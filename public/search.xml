<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>使用Docker搭建开发环境(00)</title>
    <url>/2022/01/31/IMX6ULL/01_Starting/</url>
    <content><![CDATA[<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">下载docker</span><br><span class="line">sudo snap install docker</span><br><span class="line"></span><br><span class="line">给普通用户创建执行docker的权限，首先创建docker用户组，如果docker用户组存在可以忽略</span><br><span class="line">sudo groupadd docker</span><br><span class="line">把用户添加进docker组中</span><br><span class="line">sudo gpasswd -a $&#123;USER&#125; docker</span><br><span class="line">重启docker</span><br><span class="line">sudo service docker restart</span><br><span class="line">如果普通用户执行docker命令，如果提示get …… dial unix /var/run/docker.sock权限不够，则修改/var/run/docker.sock权限</span><br><span class="line">使用root用户执行如下命令，即可</span><br><span class="line">sudo chmod a+rw /var/run/docker.sock</span><br><span class="line"></span><br><span class="line">拉取ubuntu-18.04的docker镜像</span><br><span class="line">docker pull weidongshan/ubuntu-18.04:version1.0</span><br><span class="line">查看镜像</span><br><span class="line">docker image ls</span><br><span class="line"></span><br><span class="line">imx6ull_pro 开发板命令</span><br><span class="line">sudo minicom -D /dev/ttyUSB1</span><br><span class="line"></span><br><span class="line">创建容器</span><br><span class="line">docker run -h 100ask --name ubuntu_imx6ull_pro -it --privileged=true -v /home/zgq/Documents/imx6ull_pro/docker:/home/book --user book weidongshan/ubuntu-18.04:version1.0 bash</span><br><span class="line"></span><br><span class="line">ifconfig eth0 192.168.33.10</span><br><span class="line">mount -v -t nfs -o tcp,nolock 192.168.33.135:/home/zgq/Documents/imx6ull_pro/docker /mnt</span><br><span class="line"></span><br><span class="line">启动并进入命令行</span><br><span class="line">docker start ubuntu_imx6ull_pro</span><br><span class="line">docker exec -it ubuntu_imx6ull_pro /bin/bash</span><br><span class="line">关闭</span><br><span class="line">docker stop ubuntu_imx6ull_pro</span><br><span class="line"></span><br><span class="line">export ARCH=arm</span><br><span class="line">export CROSS_COMPILE=arm-linux-gnueabihf-</span><br><span class="line">export PATH=$PATH:/home/book/100ask_imx6ull-sdk/ToolChain/gcc-linaro-6.2.1-2016.11-x86_64_arm-linux-gnueabihf/bin</span><br></pre></td></tr></table></figure>
<p>参考文档：</p>
<p>《【适合有一定基础参考】嵌入式Linux应用开发完全手册_韦东山全系列视频文档-IMX6ULL开发板(从零移植篇-预览版)-V0.1.pdf》第15篇附录1.5小节</p>
<script src="https://code.jquery.com/jquery-3.1.1.min.js"></script><link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css"><script src="https://code.jquery.com/jquery-3.1.1.min.js"></script>]]></content>
      <categories>
        <category>计算机科学与技术</category>
        <category>linux</category>
        <category>IMX6ULL</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>线性代数（1）</title>
    <url>/2021/08/11/Math/linear-algebra1/</url>
    <content><![CDATA[<p><a href="https://www.bilibili.com/video/BV1C64y1x7wr?p=1">解矩阵方程Ax=0的方法，主变量，自由变量，矩阵的秩，特解</a></p>
<p>这个对解齐次线性方程组有用，对系数矩阵利用初等行变换，化成最简阶梯形矩阵（主元都为1且矩阵中含有大量0元素），最后就可以利用主元矩阵和自由矩阵直接写出矩阵方程的解空间了。我的理解中主元矩阵的本质就是单位阵。</p>
<script type="math/tex; mode=display">
\begin{matrix}
X=\begin{bmatrix} X_{p} \\ X_{f} \end{bmatrix}=\begin{bmatrix} -F \\ I_{n-r} \end{bmatrix}X_{f}
\end{matrix}</script><script src="https://code.jquery.com/jquery-3.1.1.min.js"></script><link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css"><script src="https://code.jquery.com/jquery-3.1.1.min.js"></script>]]></content>
      <categories>
        <category>数学</category>
        <category>线性代数</category>
      </categories>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>穿针引线法的原理</title>
    <url>/2021/05/30/Math/theInequalityquestion/</url>
    <content><![CDATA[<blockquote>
<p>对于形如 </p>
<script type="math/tex; mode=display">
K=\frac{a_1·a_2·a_3···a_n}{b_1·b_2·b_3···b_m}（其中 a_i,b_i\in \mathbb{R} \setminus \{0\} 且互不相同）</script><p>的式子，可知字母 $K$ 的符号的正负性取决于 ${a_1,a_2,a_3,···,a_n},{b_1,b_2,b_3,···,b_m}$ 这 $m+n$ 个数中负因子的个数——如果有偶数个（注意0是一个特殊的偶数），则 $K$ 是正数。如果有奇数个，则 $K$ 是负数。</p>
<p>同理，对于式子   </p>
<script type="math/tex; mode=display">
P_{(x)}=\frac{(x-a_1)·(x-a_2)·(x-a_3)···(x-a_n)}{(x-b_1)·(x-b_2)·(x-b_3)···(x-b_m)}，</script><p>当 $x$ 大于 ${a_1,a_2,a_3,···,a_n},{b_1,b_2,b_3,···,b_m}$ 中最大的那个数的时候，式子中的每个因式都是大于零的（就是说，因式中取负数的个数为零）。但是当 $x$ 每经过一次分子或者分母的根，就有一个因式改变符号，由大于零变为小于零，而其余因式的符号不变。这时整个式子因式取负数的符号的奇偶性就发生的变化，也就是整个 $P_{(x)}$ 的符号发生了变化。<sup><a href="#fn_2" id="reffn_2">2</a></sup></p>
</blockquote>
<p>参考资料</p>
<blockquote id="fn_1">
<sup>1</sup>. <a href="https://baike.baidu.com/item/%E7%A9%BF%E9%92%88%E5%BC%95%E7%BA%BF%E6%B3%95/8075033?fr=aladdin">穿针引线法</a><a href="#reffn_1" title="Jump back to footnote [1] in the text."> &#8617;</a>
</blockquote>
<blockquote id="fn_2">
<sup>2</sup>. <a href="https://zhihu.com/question/65472668">穿针引线法解不等式的原理解释</a><a href="#reffn_2" title="Jump back to footnote [2] in the text."> &#8617;</a>
</blockquote>
<script src="https://code.jquery.com/jquery-3.1.1.min.js"></script><link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css"><script src="https://code.jquery.com/jquery-3.1.1.min.js"></script>]]></content>
      <categories>
        <category>数学</category>
        <category>高中数学</category>
      </categories>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>00.Rust学习笔记</title>
    <url>/2022/12/06/Rust/learn_rust_00/</url>
    <content><![CDATA[<h1 id="准备学习资料"><a href="#准备学习资料" class="headerlink" title="准备学习资料"></a>准备学习资料</h1><p>在19年的时候通过同事xys接触到Rust，然而一直以来都没有花时间去学习，当时是打算学习Python和Go语言的，后来对于Python语言有一点点了解，Go的话就没有去学习，认真学习Rust是从22年11月中旬开始，这里做一些记录，下面是在网络上搜索到的一些学习资料：</p>
<ol>
<li><a href="https://www.runoob.com/rust/rust-tutorial.html">Rust 教程|菜鸟教程</a> </li>
<li><a href="https://rustwiki.org/zh-CN/book/title-page.html#rust-程序设计语言">Rust 程序设计语言(中文翻译版本)</a> </li>
<li><a href="https://www.bilibili.com/video/BV1hp4y1k7SV/?spm_id_from=333.999.0.0">Rust编程语言入门视频教程（Rust语言/Rust权威指南配套）【已完结】</a> </li>
<li><a href="https://rustwiki.org">Rust 文档网</a> </li>
</ol>
<p>另外在 github 官网上也有许多关于Rust的项目：</p>
<ol>
<li><a href="https://github.com/QMHTMY/RustBook">RustBook</a> 这是一本介绍Rust的书，内容包括算法分析，基本数据结构和算法，外加一些实战。</li>
<li><a href="https://github.com/rcore-os/rCore-Tutorial-Book-v3">rCore-Tutorial-Book-v3</a> 这是一个用Rust来写操作系统内核的项目</li>
</ol>
<p>直接从官网入门教程着手，配合哔哩哔哩上的Rust编程语言入门视频教程，快速的了解一遍Rust的语法。然后继续去看github上的RustBook，用Rust来写数据结构和算法，也可以同步开始在LeetCode上刷算法题。</p>
<script src="https://code.jquery.com/jquery-3.1.1.min.js"></script><link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css"><script src="https://code.jquery.com/jquery-3.1.1.min.js"></script>]]></content>
      <categories>
        <category>计算机科学与技术</category>
        <category>Rust</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>Rust</tag>
      </tags>
  </entry>
  <entry>
    <title>EasyARM-i.MX283A/287A开发套件</title>
    <url>/2021/11/09/zlg-EasyARM-iMX283A/record/</url>
    <content><![CDATA[<p><a href="https://manual.zlg.cn/web/#/108?page_id=4173">EasyARM-i.MX283A/287A开发套件</a> </p>
<script src="https://code.jquery.com/jquery-3.1.1.min.js"></script><link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css"><script src="https://code.jquery.com/jquery-3.1.1.min.js"></script>]]></content>
      <categories>
        <category>计算机科学与技术</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>树莓派常见问题</title>
    <url>/2021/04/28/ComputerScience/2021/04/Raspberry&#39;s-question/</url>
    <content><![CDATA[<p>关于树莓派的一些配置</p>
<p><a href="https://blog.csdn.net/permike/article/details/108846912">/etc/systemec/system/*.service配置文件详解</a></p>
<p><a href="https://www.cnblogs.com/thisismarc/p/13214610.html">无线网络配置</a></p>
<script src="https://code.jquery.com/jquery-3.1.1.min.js"></script><link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css"><script src="https://code.jquery.com/jquery-3.1.1.min.js"></script>]]></content>
      <categories>
        <category>计算机科学与技术</category>
        <category>linux</category>
        <category>树莓派</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>树莓派</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu16.04使用apt install报错</title>
    <url>/2021/04/27/ComputerScience/2021/04/apt-error/</url>
    <content><![CDATA[<h2 id="当我在ubuntu16-04的操作系统上使用apt-install安装软件包时，终端给出了下面的提示："><a href="#当我在ubuntu16-04的操作系统上使用apt-install安装软件包时，终端给出了下面的提示：" class="headerlink" title="当我在ubuntu16.04的操作系统上使用apt install安装软件包时，终端给出了下面的提示："></a>当我在ubuntu16.04的操作系统上使用apt install安装软件包时，终端给出了下面的提示：</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">E: Could not get lock /var/lib/dpkg/lock-frontend - open (11: Resource temporarly unavailable)</span><br><span class="line">E: Unable to acquire the dpkg frontend lock (/var/lib/dpkg/lock-frontend), is an other process using it?</span><br></pre></td></tr></table></figure>
<h2 id="查阅网上资料，发现通过删除锁定文件后，就可以使用apt去安装软件了"><a href="#查阅网上资料，发现通过删除锁定文件后，就可以使用apt去安装软件了" class="headerlink" title="查阅网上资料，发现通过删除锁定文件后，就可以使用apt去安装软件了"></a>查阅网上资料，发现通过删除锁定文件后，就可以使用apt去安装软件了</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo rm /var/lib/dpkg/lock-frontend</span><br><span class="line">sudo rm /var/lib/dpkg/lock</span><br></pre></td></tr></table></figure>
<script src="https://code.jquery.com/jquery-3.1.1.min.js"></script><link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css"><script src="https://code.jquery.com/jquery-3.1.1.min.js"></script>]]></content>
      <categories>
        <category>计算机科学与技术</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>异常报错</tag>
        <tag>ubuntu16.04</tag>
      </tags>
  </entry>
  <entry>
    <title>给树莓派配置frp客户端</title>
    <url>/2021/04/15/ComputerScience/2021/04/frp-config/</url>
    <content><![CDATA[<p>从互联网上找了几个免费的frp服务器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">北京阿里云frp线路1：v0.35.1版本</span><br><span class="line">连接地址为：vip.frp.wlphp.com:7000</span><br><span class="line">状态查询：http:&#x2F;&#x2F;vip.frp.wlphp.com:7500</span><br><span class="line">查询帐号和密码为：admin 905507</span><br><span class="line">默认http端口为88</span><br><span class="line">默认https端口为99</span><br><span class="line">端口开放:5000-6000</span><br><span class="line">token:进群获取,交流QQ群:158348730</span><br><span class="line">提供四级域名*.vip.frp.wlphp.com(*自定义)</span><br><span class="line">本服务器长期服务</span><br><span class="line"></span><br><span class="line">美国frp线路2：0.16.1版本（兼容0.10.0-0.16.1版本）</span><br><span class="line">连接地址为：freenat.bid:7000</span><br><span class="line">特权认证密码为：frp888</span><br><span class="line">状态查询：http:&#x2F;&#x2F;freenat.bid:7500</span><br><span class="line">查询帐号和密码均为：admin</span><br><span class="line">默认http端口为80</span><br><span class="line">默认https端口为443</span><br><span class="line">端口全部开放</span><br><span class="line">提供二级域名.freenat.bid(自定义)</span><br><span class="line">支持KCP协议</span><br><span class="line">支持P2P穿透（xtcp）</span><br><span class="line">本服务器长期服务</span><br></pre></td></tr></table></figure>
<p>1.下载对应版本的frp</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;github.com&#x2F;fatedier&#x2F;frp&#x2F;releases&#x2F;download&#x2F;v0.16.1&#x2F;frp_0.16.1_linux_arm.tar.gz</span><br></pre></td></tr></table></figure>
<p>2.解压</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar -zxvf frp_0.16.1_linux_arm.tar.gz</span><br></pre></td></tr></table></figure>
<p>3.cd 到 frp 目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd frp_0.16.1_linux_arm</span><br></pre></td></tr></table></figure>
<p>4.编辑</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi frpc.ini</span><br></pre></td></tr></table></figure>
<p>根据服务器修改成以下内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[common]</span><br><span class="line">server_addr &#x3D; freenat.bid</span><br><span class="line">server_port &#x3D; 7000</span><br><span class="line">privilege_token &#x3D; frp888</span><br><span class="line"></span><br><span class="line">[web]</span><br><span class="line">type &#x3D; http</span><br><span class="line">local_port &#x3D; 80</span><br><span class="line">custom_domains &#x3D; xsdjt.freenat.bid</span><br></pre></td></tr></table></figure>
<p>5.最后执行以下命令运行，就可以通过 xsdjt.freenat.bid 来访问内网服务器上的内容了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;frpc -c .&#x2F;frpc.ini</span><br></pre></td></tr></table></figure>
<hr>
<p>参考链接：</p>
<p><a href="https://hsk.oray.com/news/8583.html">https://hsk.oray.com/news/8583.html</a></p>
<p><a href="https://blog.51cto.com/laok8/2321878#h7">https://blog.51cto.com/laok8/2321878#h7</a></p>
<script src="https://code.jquery.com/jquery-3.1.1.min.js"></script><link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css"><script src="https://code.jquery.com/jquery-3.1.1.min.js"></script>]]></content>
      <categories>
        <category>计算机科学与技术</category>
        <category>linux</category>
        <category>树莓派</category>
      </categories>
      <tags>
        <tag>frp</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo中常用的一些语法记录</title>
    <url>/2021/04/27/ComputerScience/2021/04/hexo-question/</url>
    <content><![CDATA[<h1 id="简要记录Latex的常用基本语法"><a href="#简要记录Latex的常用基本语法" class="headerlink" title="简要记录Latex的常用基本语法"></a>简要记录Latex的常用基本语法</h1><script type="math/tex; mode=display">
sum =     \sum_{b}^{a}x^2\
\pi\
\alpha\
\sqrt\pi\</script><script type="math/tex; mode=display">
\begin{equation*}

\int_{-X}^{Y} \exp(z)\, dz

\end{equation*}</script><p>$\textbf{HelloWorld}!$</p>
<p>$\sum_{i=1}^n a_i=0$</p>
<p> <strong>BP算法</strong></p>
<p>  训练集    $\left\{\left(x^{(1)}, y^{(1)}\right), \ldots,\left(x^{(m)}, y^{(m)}\right)\right\}$</p>
<p>  设    $\Delta_{i j}^{(l)}=0(\text { for all } l, i, j)$</p>
<p>  $\begin{array}{l}{\text {For } i=1 \text { to } m}\end{array}$</p>
<script type="math/tex; mode=display">
\begin{array}{l}{\text { Set } a^{(1)}=x^{(i)}} \\ {\text { Perform forward propagation to compute } a^{(l)} \text { for } l=2,3, \ldots, L} \\ {\text { Using } y^{(i)}, \text { compute } \delta^{(L)}=a^{(L)}-y^{(i)}} \\ {\text { Compute } \delta^{(L-1)}, \delta^{(l+1)}, \ldots, \delta^{(2)}} \\ {\Delta_{i j}^{(l)} :=\Delta_{i j}^{(l)}+a_{j}^{(l)} \delta_{i}^{(l+1)}}\end{array}</script><p>  $\begin{array}{l}{D_{i j}^{(l)} :=\frac{1}{m} \Delta_{i j}^{(l)}+\lambda \Theta_{i j}^{(l)}} &amp; {\text { if } j \neq 0} \\ {D_{i j}^{(l)} :=\frac{1}{m} \Delta_{i j}^{(l)}} &amp; {\text { if } j=0}\end{array}$</p>
<p>  其中    $\frac{\partial}{\partial \Theta_{i j}^{(l)}} J(\Theta)=D_{i j}^{(l)}$</p>
<script type="math/tex; mode=display">
f(n) =
\begin{cases} 
n/2,  & \text{if }n\text{ is even} \\
3n+1, & \text{if }n\text{ is odd}
\end{cases}</script><p>$c(u)=\begin{cases} \sqrt\frac{1}{N}，u=0\\ \sqrt\frac{2}{N}， u\neq0\end{cases} $</p>
<script type="math/tex; mode=display">
\begin{aligned}
&\vec{R_1}=[na\vec{e_x},ma\vec{e_y},la\vec{e_z}]& \nonumber\\
&\vec{R_2}=[(n+0.5)a\vec{e_x},(m+0.5)a\vec{e_y},la\vec{e_z}]& \nonumber \\
&\vec{R_3}=[(n+0.5)a\vec{e_x},ma\vec{e_y},(l+0.5)a\vec{e_z}]& \nonumber \\
&\vec{R_4}=[na\vec{e_x},(m+0.5)a\vec{e_y},(l+0.5)a\vec{e_z}]& \nonumber\\
\end{aligned}\\</script><script type="math/tex; mode=display">
\begin{aligned}\\
y&=kx+b \\
x^2+b&=y\\
\end{aligned}\\</script><script type="math/tex; mode=display">
\begin{aligned}&\\
\frac{1}{1+x}=\sum_{n=0}^{\infty}(-1)^nx^n\\
\end{aligned}</script><p>$\textcolor{GreenYellow}{GreenYellow} $<br>$\textcolor{Yellow}{Yellow}$<br>$\textcolor{Goldenrod}{Goldenrod} $<br>$\textcolor{Dandelion}{Dandelion}$<br>$\textcolor{Apricot}{Apricot} $<br>$\textcolor{Peach}{Peach}$<br>$\textcolor{Melon}{Melon} $<br>$\textcolor{YellowOrange}{YellowOrange}$<br>$\textcolor{Orange}{Orange} $<br>$\textcolor{BurntOrange}{BurntOrange}$<br>$\textcolor{Bittersweet}{Bittersweet}$<br>$\textcolor{RedOrange}{RedOrange} $<br>$\textcolor{Mahogany}{Mahogany}$<br>$\textcolor{Maroon}{Maroon} $<br>$\textcolor{BrickRed}{BrickRed}$<br>$\textcolor{Red}{Red} $<br>$\textcolor{OrangeRed}{OrangeRed}$<br>$\textcolor{RubineRed}{RubineRed}$<br>$\textcolor{WildStrawberry}{WildStrawberry}$<br>$\textcolor{Salmon}{Salmon}$<br>$\textcolor{CarnationPink}{CarnationPink}$<br>$\textcolor{Magenta}{Magenta} $<br>$\textcolor{VioletRed}{VioletRed}$<br>$\textcolor{Rhodamine}{Rhodamine} $<br>$\textcolor{Mulberry}{Mulberry}$<br>$\textcolor{RedViolet}{RedViolet} $<br>$\textcolor{Fuchsia}{Fuchsia}$<br>$\textcolor{Lavender}{Lavender} $<br>$\textcolor{Thistle}{Thistle}$<br>$\textcolor{Orchid}{Orchid} $<br>$\textcolor{DarkOrchid}{DarkOrchid}$<br>$\textcolor{Purple}{Purple} $<br>$\textcolor{Plum}{Plum}$<br>$\textcolor{Violet}{Violet} $<br>$\textcolor{RoyalPurple}{RoyalPurple}$<br>$\textcolor{BlueViolet}{BlueViolet}$<br>$\textcolor{Periwinkle}{Periwinkle}$<br>$\textcolor{CadetBlue}{CadetBlue}$<br>$\textcolor{CornflowerBlue}{CornflowerBlue}$<br>$\textcolor{MidnightBlue}{MidnightBlue}$<br>$\textcolor{NavyBlue}{NavyBlue} $<br>$\textcolor{RoyalBlue}{RoyalBlue}$<br>$\textcolor{Blue}{Blue} $<br>$\textcolor{Cerulean}{Cerulean}$<br>$\textcolor{Cyan}{Cyan} $<br>$\textcolor{ProcessBlue}{ProcessBlue}$<br>$\textcolor{SkyBlue}{SkyBlue} $<br>$\textcolor{Turquoise}{Turquoise}$<br>$\textcolor{TealBlue}{TealBlue} $<br>$\textcolor{Aquamarine}{Aquamarine}$<br>$\textcolor{BlueGreen}{BlueGreen} $<br>$\textcolor{Emerald}{Emerald}$<br>$\textcolor{JungleGreen}{JungleGreen}$<br>$\textcolor{SeaGreen}{SeaGreen} $<br>$\textcolor{Green}{Green}$<br>$\textcolor{ForestGreen}{ForestGreen}$<br>$\textcolor{PineGreen}{PineGreen} $<br>$\textcolor{LimeGreen}{LimeGreen}$<br>$\textcolor{YellowGreen}{YellowGreen}$<br>$\textcolor{SpringGreen}{SpringGreen}$<br>$\textcolor{OliveGreen}{OliveGreen}$<br>$\textcolor{RawSienna}{RawSienna} $<br>$\textcolor{Sepia}{Sepia}$<br>$\textcolor{Brown}{Brown} $<br>$\textcolor{Tan}{Tan}$<br>$\textcolor{Gray}{Gray} $<br>$\textcolor{Black}{Black}$</p>
<p>在markdown中使用html语法</p>
<p><input type="checkbox" onclick="return false;" checked="checked" />选中复选框<br><input type="checkbox" onclick="return false;"/>未选中复选框</p>




<table>
    <thead>
        <tr>
            <th align="center" colspan="3">四象限时间管理</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td align="center"></td>
            <td align="center">不重要</td>
            <td align="center">重要</td>     
        </tr>
        <tr>
            <td align="center">不紧急</td>
            <!-- 不重要不紧急 -->
            <td align="center">不重要不紧急</td>
            <!-- 重要不紧急 -->
            <td align="center">重要不紧急</td>
        </tr>
        <tr>
            <td align="center">紧急</td>
            <!-- 不重要紧急 -->
            <td align="center">不重要紧急</td>
            <!-- 重要紧急 -->
            <td align="center">重要紧急</td>
        </tr>
    </tbody>
</table>


<details><summary>hello</summary><pre><code>
Hello world!
</code></pre></details>









<p>后台进入方式：?login?</p>
<script src="https://code.jquery.com/jquery-3.1.1.min.js"></script><link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css"><script src="https://code.jquery.com/jquery-3.1.1.min.js"></script>]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>latex</tag>
      </tags>
  </entry>
  <entry>
    <title>互联网知识记录</title>
    <url>/2021/04/28/ComputerScience/2021/04/knowlege-record/</url>
    <content><![CDATA[<p><img src="https://ghchart.rshah.org/xsdjt" alt=""></p>
<center><a href="https://ghchart.rshah.org/">github贡献图的引用</a></center>

<p><a href="https://blog.csdn.net/cungudafa/article/details/106420842">hexo（sakura）仿gitee添加文章贡献度日历图（echarts）_cungudafa的博客-CSDN博客</a></p>
<p><a href="https://www.tukuwa.com/">公共图库</a></p>
<p><a href="https://xian6ge.cn/posts/3fecefd4/">Hexo 文章中展示自定义的 HTML 内容</a></p>
<p><a href="https://leancloudblog.com/Domain-Name-Story-confirm/">域名背后那些事</a></p>
<p><a href="https://www.jianshu.com/p/2f40341df631">Typora使用教程</a></p>
<p><a href="https://blog.csdn.net/csdnsevenn/article/details/107804481">选中断还是轮询方式？深究其中的区别</a></p>
<p><a href="https://sc.chinaz.com/tag_yinxiao/naozhong.html">站长素材</a></p>
<p><a href="https://blog.csdn.net/weixin_43398590/article/details/106911052">Latex特殊符号大全(高清)</a></p>
<p><a href="https://blog.csdn.net/qq_42650988/article/details/88597499">Markdown常用特殊符号</a></p>
<p><a href="http://linux.51yip.com/">Linux命令查询网站</a></p>
<p><a href="https://www.cnblogs.com/yezigege/p/13503795.html">crontab的用法</a></p>
<p><a href="https://hexo.io/zh-cn/docs/front-matter">文章前置属性的设置</a></p>
<p><a href="https://blog.garryde.com/archives/34278.html">nodejs版本引起的异常</a></p>
<p><a href="https://deserts.io/valine-admin-document/">Valine-admin配置</a></p>
<p><a href="https://blog.csdn.net/Aoman_Hao/article/details/105323917">Hexo博客Next主题valine评论系统邮件提醒</a></p>
<p><a href="https://waline.js.org/">waline</a></p>
<p><a href="https://www.shangmayuan.com/a/06a57890e862449592b71fed.html">配置多个ssh公钥</a></p>
<p><a href="https://immyw.com/posts/74006f42/#GitHub-Actions">通過travis-ci或者GitHub Actions自動化部署GitHub Pages和Coding Pages</a></p>
<p><a href="https://blog.csdn.net/qq_41426117/article/details/108703295">GitHub Action + Hexo实现在线写作</a></p>
<p><a href="https://www.raspberrypi.org/documentation/linux/filesystem/backup.md">树莓派的备份命令</a></p>
<p><a href="https://cosx.org/2018/01/build-blog-with-blogdown-hugo-netlify-github">用 R 语言的 blogdown+hugo+netlify+github 建博客</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/360027836">R沟通｜用bookdown制作图书(1)</a></p>
<p><a href="https://www.yuque.com/btzheng/bookdown/gryp02">bookdown中文文档</a></p>
<p><a href="https://rstudio-education.github.io/hopr/index.html">Hands-On Programming with R</a></p>
<p><a href="https://freexyz.cn/dev/72000.html">Python基于Webhook实现github自动化部署</a></p>
<p><a href="https://kchen.cc/2016/11/05/echarts-in-hexo/">在 Hexo 中插入 ECharts 动态图表</a></p>
<p><a href="https://zhangmaimai.com/2021/02/23/hexo-mindmap-plugin/">如何在Hexo中较为优雅的插入思维导图？</a></p>
<p><a href="https://hunterx.xyz/hexo-simple-mindmap-plugin-intro.html">Hexo 的思维导图插件</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/146565620">解析base64编码</a></p>
<p><a href="https://bookdownplus.netlify.app/portfolio/">BOOKDOWNPLUS GALLERY</a></p>
<p><a href="https://www.econometrics-with-r.org/index.html">Introduction to Econometrics with R</a></p>
<p><a href="http://blog.sina.com.cn/s/blog_744c2fb701014vh5.html">在R语言中，如何画经济学的配图？_理性的废话者_新浪博客 (sina.com.cn)</a></p>
<p><a href="www.study.com/how_to_get_your_phd.html">How to Get a PhD: Degrees &amp; Requirements</a></p>
<p><a href="http://www.zhaohy.org.cn//blogDetail/getBlogDetailPage.do?blogId=48">syncthing搭建私人网盘分享</a></p>
<script src="https://code.jquery.com/jquery-3.1.1.min.js"></script><link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css"><script src="https://code.jquery.com/jquery-3.1.1.min.js"></script>]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>互联网知识</tag>
      </tags>
  </entry>
  <entry>
    <title>去除wordpress站点内部的绝对地址访问</title>
    <url>/2021/04/15/ComputerScience/2021/04/quchuwordpresszhandianneibudejueduidizhifangwen/</url>
    <content><![CDATA[<p>编辑option.php</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi wordpress/wp-includes/option.php</span><br></pre></td></tr></table></figure>
<p>文件中修改后的代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_option</span>(<span class="params"> <span class="variable">$option</span>, <span class="variable">$default</span> = <span class="literal">false</span> </span>) </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> <span class="variable">$wpdb</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加内容使wordpress站点内部使用相对路径</span></span><br><span class="line">        <span class="variable">$activehome</span> = <span class="string">&#x27;http://&#x27;</span>.<span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_HOST&#x27;</span>].<span class="string">&#x27;/wordpress&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$option</span> = trim( <span class="variable">$option</span> );</span><br><span class="line">        <span class="keyword">if</span> ( <span class="keyword">empty</span>( <span class="variable">$option</span> ) ) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加内容使wordpress站点内部使用相对路径</span></span><br><span class="line">        <span class="keyword">if</span> ( <span class="string">&#x27;home&#x27;</span> === <span class="variable">$option</span>  <span class="string">&#x27;siteurl&#x27;</span> === <span class="variable">$option</span> ) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$activehome</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Until a proper _deprecated_option() function can be introduced,</span></span><br><span class="line"><span class="comment">         * redirect requests to deprecated keys to the new, correct ones.</span></span><br><span class="line"><span class="comment"></span></span><br></pre></td></tr></table></figure>
<hr>
<p>参考链接：</p>
<p><a href="https://www.jianshu.com/p/992218bf872c/">https://www.jianshu.com/p/992218bf872c/</a></p>
<script src="https://code.jquery.com/jquery-3.1.1.min.js"></script><link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css"><script src="https://code.jquery.com/jquery-3.1.1.min.js"></script>]]></content>
      <categories>
        <category>计算机科学与技术</category>
        <category>web</category>
        <category>树莓派</category>
      </categories>
      <tags>
        <tag>wordpress</tag>
      </tags>
  </entry>
  <entry>
    <title>自动降温控制脚本</title>
    <url>/2021/04/22/ComputerScience/2021/04/zidongjiangwenkongzhijiaoben/</url>
    <content><![CDATA[<p>采用一个S9014型号的NPN型三极管，基极接在GPIO14口上。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;python2</span><br><span class="line">#coding:utf8</span><br><span class="line">import sys</span><br><span class="line">import time</span><br><span class="line">import os</span><br><span class="line">try:</span><br><span class="line">    import RPi.GPIO as GPIO</span><br><span class="line">except RuntimeError:</span><br><span class="line">    print(&quot;Error importing RPi.GPIO!  This is probably because you need superuser privileges.  You can achieve this by using &#39;sudo&#39; to run your script&quot;)</span><br><span class="line">def cpu_temp():</span><br><span class="line">    with open(&quot;&#x2F;sys&#x2F;class&#x2F;thermal&#x2F;thermal_zone0&#x2F;temp&quot;, &#39;r&#39;) as f:</span><br><span class="line">        return float(f.read())&#x2F;1000</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    channel &#x3D; 14</span><br><span class="line">    GPIO.setmode(GPIO.BCM)</span><br><span class="line">    GPIO.setwarnings(False)</span><br><span class="line">    GPIO.setup(channel, GPIO.OUT, initial&#x3D;GPIO.LOW)</span><br><span class="line">    is_close &#x3D; True</span><br><span class="line">    while True:</span><br><span class="line">        temp &#x3D; cpu_temp()</span><br><span class="line">        if is_close:</span><br><span class="line">            if temp &gt;&#x3D; 58.0:</span><br><span class="line">                url &#x3D; &quot;http:&#x2F;&#x2F;tts.youdao.com&#x2F;fanyivoice?word&#x3D;开启风扇&amp;le&#x3D;zh&amp;keyfrom&#x3D;speaker-target&quot;</span><br><span class="line">                os.system(&#39;mplayer -loop 1 -softvol -softvol-max 100 &quot;%s&quot;&#39; % url)</span><br><span class="line">                GPIO.output(channel, 1)</span><br><span class="line">                is_close &#x3D; False</span><br><span class="line">        else:</span><br><span class="line">            if temp &lt;&#x3D; 40.0:</span><br><span class="line">                url &#x3D; &quot;http:&#x2F;&#x2F;tts.youdao.com&#x2F;fanyivoice?word&#x3D;关闭风扇&amp;le&#x3D;zh&amp;keyfrom&#x3D;speaker-target&quot;</span><br><span class="line">                os.system(&#39;mplayer -loop 1 -softvol -softvol-max 100 &quot;%s&quot;&#39; % url)</span><br><span class="line">                GPIO.output(channel, 0)</span><br><span class="line">                is_close &#x3D; True</span><br><span class="line">        time.sleep(10)</span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p><a href="https://blog.csdn.net/u014453443/article/details/81117745">三极管的用法</a></p>
<p><a href="https://blog.csdn.net/chentuo2000/article/details/81051645">树莓派GPIO</a></p>
<script src="https://code.jquery.com/jquery-3.1.1.min.js"></script><link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css"><script src="https://code.jquery.com/jquery-3.1.1.min.js"></script>]]></content>
      <categories>
        <category>计算机科学与技术</category>
        <category>linux</category>
        <category>树莓派</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>树莓派</tag>
      </tags>
  </entry>
  <entry>
    <title>在服务器上配置自启动脚本</title>
    <url>/2021/04/15/ComputerScience/2021/04/zaifuwuqishangpeizhiziqidongjiaoben/</url>
    <content><![CDATA[<p>编辑service文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;lib&#x2F;systemd&#x2F;system&#x2F;此处替换为想要的文件名.service</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description&#x3D;此处替换为服务名 service</span><br><span class="line">Wants&#x3D;network-online.target</span><br><span class="line">After&#x3D;network.target network-online.target</span><br><span class="line">Requires&#x3D;network-online.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type&#x3D;simple</span><br><span class="line"></span><br><span class="line">#启动服务的命令</span><br><span class="line">ExecStart&#x3D;此处替换为需要执行的命令</span><br><span class="line"></span><br><span class="line">Restart&#x3D;always</span><br><span class="line">RestartSec&#x3D;5</span><br><span class="line">StartLimitInterval&#x3D;0</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy&#x3D;multi-user.target</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl start 此处替换为上一条命令的文件名</span><br><span class="line">systemctl enable 此处替换为上一条命令的文件名</span><br></pre></td></tr></table></figure><script src="https://code.jquery.com/jquery-3.1.1.min.js"></script><link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css"><script src="https://code.jquery.com/jquery-3.1.1.min.js"></script>]]></content>
      <categories>
        <category>计算机科学与技术</category>
        <category>linux</category>
        <category>树莓派</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>树莓派</tag>
      </tags>
  </entry>
  <entry>
    <title>在hexo中使用思维导图的两种方法</title>
    <url>/2021/05/31/ComputerScience/2021/05/mindmap/</url>
    <content><![CDATA[<script src="https://code.jquery.com/jquery-3.1.1.min.js"></script>



<p>markmap:<br><div class="markmap-container" style="height:400px;" ><svg class="markmap-svg">IyBtYXJrbWFwCgojIyBMaW5rcwoKLSA8aHR0cHM6Ly9tYXJrbWFwLmpzLm9yZy8-Ci0gW0dpdEh1Yl0oaHR0cHM6Ly9naXRodWIuY29tL2dlcmEybGQvbWFya21hcCkKCiMjIFJlbGF0ZWQKCi0gW2NvYy1tYXJrbWFwXShodHRwczovL2dpdGh1Yi5jb20vZ2VyYTJsZC9jb2MtbWFya21hcCkKLSBbZ2F0c2J5LXJlbWFyay1tYXJrbWFwXShodHRwczovL2dpdGh1Yi5jb20vZ2VyYTJsZC9nYXRzYnktcmVtYXJrLW1hcmttYXApCgojIyBGZWF0dXJlcwoKLSBsaW5rcwotICoqaW5saW5lKiogfn50ZXh0fn4gKnN0eWxlcyoKLSBtdWx0aWxpbmUKICB0ZXh0Ci0gYGlubGluZSBjb2RlYCAgCgotCiAgICBgYGBqcyAgCiAgICBjb25zb2xlLmxvZygnY29kZSBibG9jaycpOyAgCiAgICBgYGAgIAoKLSBLYXRleCA6IFwkKHggPSB7LWIgXFxwbSBcXHNxcnR7Yl4yLTRhY30gXFxvdmVyIDJhfSlcJCAgIAogIC4</svg></div><br><br><br></p>
<p>kityminder:<br><blockquote class="pullquote mindmap mindmap-md"><ul>
<li><a href="https://www.baidu.com">百度Fengx</a><ul>
<li><a href="https://xsdjt.github.io/2021/05/31/ComputerScience/openmermaid/">任何方向开启mermaid</a><ul>
<li>编程语言<ul>
<li>Java</li>
</ul>
</li>
<li>SQL</li>
<li>Linux</li>
<li>Git</li>
</ul>
</li>
<li>技术<ul>
<li>Java Web</li>
<li>数据库</li>
<li>Docker</li>
<li>svn</li>
<li>消息队列(MQ)</li>
<li>mycat</li>
<li>大数据<ul>
<li>Hadoop</li>
<li>HBase</li>
</ul>
</li>
</ul>
</li>
<li>内功<ul>
<li>计算机基础<ul>
<li>计算机网络</li>
<li>计算机操作系统</li>
<li>编译原理</li>
<li>计算机组成原理</li>
</ul>
</li>
<li>数据结构与算法</li>
<li>设计模式</li>
<li>性能优化</li>
<li>架构设计</li>
<li>软件工程</li>
</ul>
</li>
<li>其他<ul>
<li>英语</li>
<li>博客</li>
</ul>
</li>
</ul>
</li>
</ul>
</blockquote></p>
<p><a href="https://echarts.apache.org/examples/zh/index.html">echarts示例</a><br><a href="https://underdream.github.io/post/writing/hexo/embed-echarts-in-hexo/">在Hexo博客中使用ECharts来画图 | 非名榭 (underdream.github.io)</a></p>
<div id="echarts1222" style="width: 100%;height: 600px;margin: 0 auto"></div>
<script src="https://cdn.bootcss.com/echarts/3.8.0/echarts.common.min.js"></script>
<script type="text/javascript">
        // 基于准备好的dom，初始化echarts实例
        var myChart = echarts.init(document.getElementById('echarts1222'));
        // 指定图表的配置项和数据
        var option = {
    title: {
        text: '折线图堆叠'
    },
    tooltip: {
        trigger: 'axis'
    },
    legend: {
        type: 'scroll',
        orient: 'vertical',
        right: 40,
        data:['邮件营销','联盟广告','视频广告','直接访问','搜索引擎']
    },
    grid: {
        left: '3%',
        right: '4%',
        bottom: '3%',
        containLabel: true
    },
    toolbox: {
        feature: {
            saveAsImage: {}
        }
    },
    xAxis: {
        type: 'category',
        boundaryGap: false,
        data: ['周一','周二','周三','周四','周五','周六','周日']
    },
    yAxis: {
        type: 'value'
    },
    series: [
        {
            name:'邮件营销',
            type:'line',
            stack: '总量',
            data:[120, 132, 101, 134, 90, 230, 210]
        },
        {
            name:'联盟广告',
            type:'line',
            stack: '总量',
            data:[220, 182, 191, 234, 290, 330, 310]
        },
        {
            name:'视频广告',
            type:'line',
            stack: '总量',
            data:[150, 232, 201, 154, 190, 330, 410]
        },
        {
            name:'直接访问',
            type:'line',
            stack: '总量',
            data:[320, 332, 301, 334, 390, 330, 320]
        },
        {
            name:'搜索引擎',
            type:'line',
            stack: '总量',
            data:[820, 932, 901, 934, 1290, 1330, 1320]
        }
    ]
};
        // 使用刚指定的配置项和数据显示图表。
        myChart.setOption(option);
</script>
<div id="echarts4061" style="width: 100%;height: 600px;margin: 0 auto"></div>
<script src="https://cdn.bootcss.com/echarts/3.8.0/echarts.common.min.js"></script>
<script type="text/javascript">
        // 基于准备好的dom，初始化echarts实例
        var myChart = echarts.init(document.getElementById('echarts4061'));
        // 指定图表的配置项和数据
        var option = {
    xAxis: {
        type: 'category',
        data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']
    },
    yAxis: {
        type: 'value'
    },
    series: [{
        data: [150, 230, 224, 218, 135, 147, 260],
        type: 'line'
    }]
};
        // 使用刚指定的配置项和数据显示图表。
        myChart.setOption(option);
</script>
<script src="https://code.jquery.com/jquery-3.1.1.min.js"></script><link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css"><script src="https://code.jquery.com/jquery-3.1.1.min.js"></script>]]></content>
      <categories>
        <category>计算机科学与技术</category>
        <category>web</category>
      </categories>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>在hexo的next主题中开启mermaid功能</title>
    <url>/2021/05/31/ComputerScience/2021/05/openmermaid/</url>
    <content><![CDATA[<p>发现<code>mermaid</code>功能没有打开,先进入blog的根目录执行命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-filter-mermaid-diagrams --save</span><br></pre></td></tr></table></figure>
<p>然后编辑<code>next</code>主题文件夹下的<code>_config.yml</code>文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim $blog/theme/next/_config.yml</span><br></pre></td></tr></table></figure>
<p>把<code>mermaid</code>的<code>enable</code>开关置为<code>true</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Mermaid tag</span></span><br><span class="line"><span class="attr">mermaid:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Available themes: default | dark | forest | neutral</span></span><br><span class="line">  <span class="attr">theme:</span> <span class="string">forest</span></span><br></pre></td></tr></table></figure>
<p>好了，大功告成，现在可以来画图了</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">graph TD;</span><br><span class="line">    A--&gt;B;</span><br><span class="line">    A--&gt;C;</span><br><span class="line">    B--&gt;D;</span><br></pre></td></tr></table></figure>
<pre class="mermaid">graph TD;
    A-->B;
    A-->C;
    B-->D;</pre>

<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">    Alice-&gt;&gt;John: Hello John, how are you?</span><br><span class="line">    John--&gt;&gt;Alice: Great!</span><br></pre></td></tr></table></figure>
<pre class="mermaid">sequenceDiagram
    Alice->>John: Hello John, how are you?
    John-->>Alice: Great!</pre>

<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">pie</span><br><span class="line">    title Key elements in Product X</span><br><span class="line">    &quot;Calcium&quot; : 42.96</span><br><span class="line">    &quot;Potassium&quot; : 50.05</span><br><span class="line">    &quot;Magnesium&quot; : 10.01</span><br><span class="line">    &quot;Iron&quot; :  5</span><br></pre></td></tr></table></figure>
<pre class="mermaid">pie
    title Key elements in Product X
    "Calcium" : 42.96
    "Potassium" : 50.05
    "Magnesium" : 10.01
    "Iron" :  5</pre>

<p>参考资料</p>
<p><a href="https://zhuanlan.zhihu.com/p/172635547">使用 Typora 画图（类图、流程图、时序图）</a></p>
<p><a href="https://jingyan.baidu.com/article/e75aca85a3b528552fdac670.html">hexo next渲染markdown mermaid流程图</a></p>
<script src="https://code.jquery.com/jquery-3.1.1.min.js"></script><link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css"><script src="https://code.jquery.com/jquery-3.1.1.min.js"></script>]]></content>
      <categories>
        <category>计算机科学与技术</category>
        <category>web</category>
      </categories>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>《Hands-On Programming with R》读书笔记</title>
    <url>/2021/06/05/ComputerScience/2021/06/Rlang-01/</url>
    <content><![CDATA[<blockquote><p>By stringing thoughts together in a logical sequence, you can build eloquent, even artistic statements.</p>
<footer><strong>Garrett Grolemund</strong><cite><a href="https://rstudio-education.github.io/hopr/packages.html#project-1-wrap-up">《Hands-On Programming with R》 3.4 Project 1 Wrap-up</a></cite></footer></blockquote><br><div class="markmap-container" style="height:400px;" ><svg class="markmap-svg">IyBSCgojIyDor63ms5UKCiMjIyDotYvlgLzor63lj6UKLSBgb2JqZWN0IDwtIOimgei1i-e7mW9iamVjdOeahOWAvGAKCiMjIyDlh73mlbDlrprkuYkKCi0gCiAgICBgYGBSICAKICAgIHJvbGwgPC0gZnVuY3Rpb24oYm9uZXMgPSAxOjYpewogICAgICAgIGRpY2UgPC0gc2FtcGxlKGJvbmVzLCBzaXplID0gMiwgcmVwbGFjZSA9IFRSVUUpCiAgICAgICAgc3VtKGRpY2UpCiAgICB9CiAgICBgYGAgIAoKCiMjIOWFtuS7luWKn-iDvQoKIyMjIOafpeivouWHveaVsOWPguaVsAotIGBhcmdzKOimgeeUqOeahOWHveaVsOWQjSlgCgojIyMg5a6J6KOFUuWMhQotIGBpbnN0YWxsLnBhY2thZ2VzYAoKIyMjIOWcqFIgc2Vzc2lvbuS4reWKoOi9veWMhQotIGBsaWJyYXJ5YAoKCiMjIyDmiZPlvIDlh73mlbDluK7liqnpobXpnaIKLSBgP-imgeafpeivoueahOWHveaVsGA</svg></div>
<p><br\><figure class="highlight r"><figcaption><span>R语言中的函数定义方式</span></figcaption><table><tr><td class="code"><pre><span class="line">roll2 &lt;- <span class="keyword">function</span>(bones = <span class="number">1</span>:<span class="number">6</span>) &#123;</span><br><span class="line">  dice &lt;- sample(bones, size = <span class="number">2</span>, replace = <span class="literal">TRUE</span>)</span><br><span class="line">  <span class="built_in">sum</span>(dice)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><img src="https://rstudio-education.github.io/hopr/images/hopr_0106.png" alt="图片来源https://rstudio-education.github.io/hopr/basics.html"></p>
<script src="https://code.jquery.com/jquery-3.1.1.min.js"></script><link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css"><script src="https://code.jquery.com/jquery-3.1.1.min.js"></script>]]></content>
      <categories>
        <category>计算机科学与技术</category>
        <category>计算机语言</category>
        <category>R</category>
      </categories>
      <tags>
        <tag>R</tag>
      </tags>
  </entry>
  <entry>
    <title>简记markmap</title>
    <url>/2021/06/03/ComputerScience/2021/06/hexo-markmap/</url>
    <content><![CDATA[<pre class="mermaid">graph LR;
    思维导图相关依赖-->hexo-markmap;
    hexo-markmap-->markdown-it-markmap;
    markdown-it-markmap-->markdown-it;
    markdown-it-markmap-->markmap-lib;</pre>


<p>hexo-markmap把一些html的标签代码注入到博客站点的文章页面中，通过markdown-it-markmap把数据传送到页面上，然后由注入代码接收处理并生成svg图片。</p>
<script src="https://code.jquery.com/jquery-3.1.1.min.js"></script><link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css"><script src="https://code.jquery.com/jquery-3.1.1.min.js"></script>]]></content>
      <categories>
        <category>计算机科学与技术</category>
        <category>web</category>
      </categories>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>calibre-web图书展板</title>
    <url>/2021/08/25/ComputerScience/2021/08/calibre-web/</url>
    <content><![CDATA[<p><a href="https://github.com/janeczku/calibre-web">github上的仓库链接</a></p>
<p>使用之前需要先用calibre软件生成一个书籍库。</p>
<p>笔者建立的目录，如下所示，并给了data文件夹及内部文件读写权限。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;data</span><br><span class="line"> └── CalibreLibrary</span><br><span class="line">     └──  metadata.db</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Install via pip</span><br><span class="line">Install calibre web via pip with the command pip install calibreweb (Depending on your OS and or distro the command could also be pip3).</span><br><span class="line">Optional features can also be installed via pip, please refer to this page for details</span><br><span class="line">Calibre-Web can be started afterwards by typing cps or python3 -m cps</span><br></pre></td></tr></table></figure>
<p>执行后默认地址是localhost:8083</p>
<p>启动后填入书籍库所在的文件夹位置后使用以下账号登录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">user: admin</span><br><span class="line">pass: admin123</span><br></pre></td></tr></table></figure>
<p><a href="http://xsdjt.vip.frp.wlphp.com:88/calibre-web/">防止忘记的地址http://xsdjt.vip.frp.wlphp.com:88/calibre-web/</a></p>
<p>备注一些图书网站：</p>
<p><a href="https://demo.talebook.org/">demo.talebook.org已经停止维护</a></p>
<p><a href="https://www.kgbook.com/">苦瓜书盘</a></p>
<p>ebook.com</p>
<p><a href="http://diumx.com/">芒果读书</a></p>
<p><a href="https://wenyuange.org/">文渊阁</a>有两万多本图书提供搜索，需要注册才能下载</p>
<script src="https://code.jquery.com/jquery-3.1.1.min.js"></script><link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css"><script src="https://code.jquery.com/jquery-3.1.1.min.js"></script>]]></content>
      <categories>
        <category>计算机科学与技术</category>
        <category>linux</category>
        <category>树莓派</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>树莓派</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构与算法分析——C语言描述(第二版) 笔记</title>
    <url>/2021/09/23/ComputerScience/2021/09/dsaac2e/</url>
    <content><![CDATA[<h1 id="第1章-引论"><a href="#第1章-引论" class="headerlink" title="第1章 引论"></a>第1章 引论</h1><p>用了两个例子（排序检索与字谜问题）来说明算法在处理问题中的重要性，一些算法在处理巨大数据集时所需要的时间是非常大的，这时候就需要更快更好的算法。接下来复习了数学方面指数、对数、级数相关的知识，这些在后面估计算法效率的时候会用到，也涉及了同余定理和两种证明方法（归纳和反证）。最后以递归的简介结束本章内容，在递归里面有一个自问自答比较有意思，是这样说的</p>
<blockquote>
<p>一个常见的问题是：它（递归）是否就是循环逻辑？</p>
<p>答：虽然我们定义一个函数用的是这个函数本身，但是我们并没有用函数本身定义该函数的一个特定的实例。换句话说，通过使用F(5)来得到F(5)的值才是循环的，通过F(4)得到F(5)的值不是循环的，除非F(4)的求值又要用到对F(5)的求值。</p>
</blockquote>
<p>笔者查阅了英文原版书后，感觉这里可能有个小小的误译</p>
<blockquote>
<p>A common question is: Isn’t this just circular logic? </p>
<p>The answer is that although we are defining a function in terms of itself, we are not defining a particular<br>instance of the function in terms of itself. In other words, evaluating f(5) by computing f(5) would be circular.<br>Evaluating f(5) by computing f(4) is not circular—unless, of course f(4) is evaluated by eventually computing f(5).</p>
</blockquote>
<p>这里的函数的实例就是具体使用函数时的调用，笔者猜测作者想要表达的意思可能是通过函数实例去定义抽象函数本身与通过函数实例去定义函数实例本身是不一样的，因为函数实例定义函数实例本身就如作者在书中所举的例子，用F(5)定义F(5)，这样便产生了一个循环定义。而使用函数实例来定义抽象函数可以这样来理解，当调用抽象函数的时候也就是将抽象函数实例化的时候，这时的抽象函数实例与定义抽象函数实例中的函数实例不是同一个函数实例。这里可能说的有点绕，如果不清楚可以去看一下书上对于递归思想的描述，欢迎大家提出新的见解。</p>
<p>关于书写递归函数的四条基本法则：</p>
<blockquote>
<p>1.基准情形</p>
<p>2.不断推进</p>
<p>3.设计法则</p>
<p>4.合成效益法则</p>
</blockquote>
<h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><p>在1.3题中有说到精确度的问题，比如说理论上 $sin(\pi) = 0$ 但实际上 $\pi = 3.1415926…$ 这个无限不循环小数并不能被计算机完全表示，所以使用计算机计算 $sin(\pi)$ 是存在一定误差的。因此指定输出数字中的小数位数并进行四舍五入也就成了一种通俗的规定。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://www.cnblogs.com/zhuli19901106/p/data-structure-and-algorithm-analysis-in-C.html">《数据结构与算法分析：C语言描述》读书笔记</a>  </p>
<script src="https://code.jquery.com/jquery-3.1.1.min.js"></script><link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css"><script src="https://code.jquery.com/jquery-3.1.1.min.js"></script>]]></content>
      <categories>
        <category>计算机科学与技术</category>
        <category>计算机语言</category>
        <category>C语言</category>
        <category>数据结构与算法分析</category>
      </categories>
      <tags>
        <tag>C语言</tag>
        <tag>数据结构与算法分析</tag>
      </tags>
  </entry>
  <entry>
    <title>保存网络上的知识链接</title>
    <url>/2021/09/23/ComputerScience/2021/09/review/</url>
    <content><![CDATA[<h1 id="ubuntu16-04LTS更新vim到8-x"><a href="#ubuntu16-04LTS更新vim到8-x" class="headerlink" title="ubuntu16.04LTS更新vim到8.x"></a>ubuntu16.04LTS更新vim到8.x</h1><p><a href="https://www.linuxprobe.com/vim8-0-linux.html"><a href="https://www.linuxprobe.com/vim8-0-linux.html">Linux升级Vim 8.0如虎添翼</a></a></p>
<p>由于vim8.x在命令模式下可以输入 <code>:term</code> 进入终端，所以更新了。</p>
<h1 id="Linux系统编程"><a href="#Linux系统编程" class="headerlink" title="Linux系统编程"></a>Linux系统编程</h1><p><a href="https://www.bilibili.com/video/BV19s411T7gz?p=13">linux系统编程-哔哩哔哩</a></p>
<h1 id="雷柏v500在Ubuntu系统下键位映射错误"><a href="#雷柏v500在Ubuntu系统下键位映射错误" class="headerlink" title="雷柏v500在Ubuntu系统下键位映射错误"></a>雷柏v500在Ubuntu系统下键位映射错误</h1><p><a href="https://blog.csdn.net/QiuSun_ZhangYang/article/details/77417545">(已解决)雷柏v500在Ubuntu系统下键位映射错误</a></p>
<p><a href="https://blog.csdn.net/yayaayaya123/article/details/83993041">LLVM编译原理和使用</a> </p>
<p><a href="https://blog.csdn.net/qq_32460819/article/details/108449344">LLVM_Ubuntu安装</a> </p>
<p><a href="https://wetest.qq.com/lab/view/164.html">使用autoconf及automake自动生成makefile实战</a> </p>
<p><a href="https://baijiahao.baidu.com/s?id=1673786821319256844&amp;wfr=spider&amp;for=pc">在Linux操作系统下自动生成Makefile的方法</a> </p>
<h1 id="阅读《深入理解计算机系统》的参考资料"><a href="#阅读《深入理解计算机系统》的参考资料" class="headerlink" title="阅读《深入理解计算机系统》的参考资料"></a>阅读《深入理解计算机系统》的参考资料</h1><p><a href="https://blog.csdn.net/Bin_Watson/article/details/114231670">CSAPP 3e操作环境搭建</a></p>
<p><a href="https://wdxtub.com/csapp/thin-csapp-0/2016/04/16/">【读薄 CSAPP】零 系列概览 </a></p>
<script src="https://code.jquery.com/jquery-3.1.1.min.js"></script><link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css"><script src="https://code.jquery.com/jquery-3.1.1.min.js"></script>]]></content>
      <categories>
        <category>计算机科学与技术</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>申请堆内存的相关代码</title>
    <url>/2021/10/25/ComputerScience/2021/10/read/</url>
    <content><![CDATA[<figure class="highlight c"><figcaption><span>mm.c</span><a href="/downloads/code/csapp.3e/vm/malloc/mm.c">view raw</a></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * mm_malloc - Allocate a block with at least size bytes of payload </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/* $begin mmmalloc */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">mm_malloc</span><span class="params">(<span class="keyword">size_t</span> size)</span> </span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">size_t</span> asize;      <span class="comment">/* Adjusted block size */</span></span><br><span class="line">    <span class="keyword">size_t</span> extendsize; <span class="comment">/* Amount to extend heap if no fit */</span></span><br><span class="line">    <span class="keyword">char</span> *bp;      </span><br><span class="line"></span><br><span class="line">    <span class="comment">/* $end mmmalloc */</span></span><br><span class="line">    <span class="keyword">if</span> (heap_listp == <span class="number">0</span>){</span><br><span class="line">        mm_init();</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">/* $begin mmmalloc */</span></span><br><span class="line">    <span class="comment">/* Ignore spurious requests */</span></span><br><span class="line">    <span class="keyword">if</span> (size == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Adjust block size to include overhead and alignment reqs. */</span></span><br><span class="line">    <span class="keyword">if</span> (size &lt;= DSIZE)                                          <span class="comment">//line:vm:mm:sizeadjust1</span></span><br><span class="line">        asize = <span class="number">2</span>*DSIZE;                                        <span class="comment">//line:vm:mm:sizeadjust2</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        asize = DSIZE * ((size + (DSIZE) + (DSIZE<span class="number">-1</span>)) / DSIZE); <span class="comment">//line:vm:mm:sizeadjust3</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Search the free list for a fit */</span></span><br><span class="line">    <span class="keyword">if</span> ((bp = find_fit(asize)) != <span class="literal">NULL</span>) {  <span class="comment">//line:vm:mm:findfitcall</span></span><br><span class="line">        place(bp, asize);                  <span class="comment">//line:vm:mm:findfitplace</span></span><br><span class="line">        <span class="keyword">return</span> bp;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* No fit found. Get more memory and place the block */</span></span><br><span class="line">    extendsize = MAX(asize,CHUNKSIZE);                 <span class="comment">//line:vm:mm:growheap1</span></span><br><span class="line">    <span class="keyword">if</span> ((bp = extend_heap(extendsize/WSIZE)) == <span class="literal">NULL</span>)  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;                                  <span class="comment">//line:vm:mm:growheap2</span></span><br><span class="line">    place(bp, asize);                                 <span class="comment">//line:vm:mm:growheap3</span></span><br><span class="line">    <span class="keyword">return</span> bp;</span><br><span class="line">} </span><br><span class="line"><span class="comment">/* $end mmmalloc */</span></span><br></pre></td></tr></table></figure>
<p>下面这块代码用到了整型数的除法操作会抹去小数的特点。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">asize = DSIZE * ((size + (DSIZE) + (DSIZE<span class="number">-1</span>)) / DSIZE);</span><br></pre></td></tr></table></figure>
<p>其目的是为了申请一块按 DSIZE 字节大小对齐的内存，正向推导是没问题的，不过我想知道为啥会想到这样去写？</p>
<p>仔细想了想，用小学的除法知识就能很好的解释这段代码，当<code>size</code> 能被 <code>DSIZE</code> 整除时，<code>size+DSIZE</code> 除以 <code>DSIZE</code> 的余数是 <code>0</code> ，这时的 <code>asize</code> 就是 <code>size + DSIZE</code> , 而当<code>size</code> 不能被 <code>DSIZE</code> 整除时，<code>size+DSIZE</code> 除以 <code>DSIZE</code> 的余数范围一定是落在 <code>[1, DSIZE-1]</code> 之间，这样一来余数加上 <code>DSIZE-1</code> 的范围就落在了 <code>[DSIZE, 2DSIZE-2]</code> 之间， 这个范围去除以 <code>DSIZE</code> 的结果必定是 <code>1</code> ，此时的 <code>asize</code> 就是 <code>size+1+DSIZE</code>。</p>
<p>也就达到来了代码的目的，按 <code>DSIZE</code> 字节对齐方式申请内存大小。</p>
<script src="https://code.jquery.com/jquery-3.1.1.min.js"></script><link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css"><script src="https://code.jquery.com/jquery-3.1.1.min.js"></script>]]></content>
      <categories>
        <category>计算机科学与技术</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>在ubuntu20.04LTS系统上安装安卓模拟器</title>
    <url>/2022/01/31/ComputerScience/2022/01/anbox/</url>
    <content><![CDATA[<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1、需要更新自己的系统环境，保证系统软件包是最新的，不然后面很容易出错。</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt upgrade</span><br><span class="line">sudo apt install libopengl-dev</span><br><span class="line">检查环境</span><br><span class="line">sudo modprobe ashmem_linux</span><br><span class="line">ls -l /dev/&#123;ashmem,binder&#125;</span><br><span class="line"></span><br><span class="line">2、安装Anbox</span><br><span class="line">sudo snap install --beta --devmode anbox</span><br><span class="line"></span><br><span class="line">3、验证安装结果</span><br><span class="line">3.1 命令行启动Anbox</span><br><span class="line">anbox.appmgr</span><br><span class="line">3.2 系统中软件安装完成</span><br><span class="line">3.3 重启一下自己的虚拟机（不重启adb可能连接不上）</span><br><span class="line">adb devices</span><br><span class="line">安装完成！</span><br><span class="line">后续安装APK使用</span><br><span class="line">adb install XX/XX/xx.apk</span><br><span class="line"></span><br><span class="line">如果出现</span><br><span class="line">Failed to install PACKAGE.NAME.apk: Failure [INSTALL_FAILED_NO_MATCHING_ABIS: Failed to extract native libraries, res=-113]</span><br><span class="line"></span><br><span class="line">就要开启ARM支持</span><br><span class="line">sudo apt install wget curl lzip tar unzip squashfs-tools</span><br><span class="line">wget https://raw.githubusercontent.com/geeks-r-us/anbox-playstore-installer/master/install-playstore.sh</span><br><span class="line">chmod +x install-playstore.sh</span><br><span class="line">./install-playstore.sh</span><br><span class="line">anbox.appmgr</span><br><span class="line">在模拟器的设置应用中找到谷歌服务，将权限全部打开。</span><br><span class="line">然后就可以继续安装应用了，具体操作方法可浏览后文的网络链接。</span><br></pre></td></tr></table></figure>
<p><a href="https://www.linuxuprising.com/2018/07/anbox-how-to-install-google-play-store.html">Anbox: How To Install Google Play Store And Enable ARM (libhoudini) Support, The Easy Way</a> </p>
<script src="https://code.jquery.com/jquery-3.1.1.min.js"></script><link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css"><script src="https://code.jquery.com/jquery-3.1.1.min.js"></script>]]></content>
      <categories>
        <category>计算机科学与技术</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>01计算机系统要素:从零开始构建现代计算机</title>
    <url>/2022/05/03/ComputerScience/2022/05/theElementsOfComputingSystems01/</url>
    <content><![CDATA[<h1 id="第二章-布尔运算"><a href="#第二章-布尔运算" class="headerlink" title="第二章 布尔运算"></a>第二章 布尔运算</h1><p>计算机使用二进制来存储信息，$1$ 个比特位可以表示 $2$ 种情况， $n$ 个比特位可以表示 $2^n$ 种情况。我们可以直接按全 $0$ 到全 $1$ 的顺序来排列，另外在计算机中采用了二进制的补码来表示数字，也就是说十进制的 $（-x）$ 用二进制的 $（2^n - x）$ 来表示，关于这个表示方法有很多的好处，可以从理论上面给出证明，这个在很多地方可以搜索到。在本章中我们主要关注布尔函数的构造，关键的是利用真值表，比如异或门的真值表</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>a</th>
<th>b</th>
<th>out</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>0</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>1</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td>0</td>
</tr>
</tbody>
</table>
</div>
<p>观察到 $out$ 列中的 $1$ 我们可以得到一个布尔函数 $out = \overline{a}b + a\overline{b}$ ，根据这个布尔函数就可以构造出相关的电路。</p>
<p>同理，可以来看一个半加法器的真值表，表中的 $sum$ 表示和，$carry$ 表示进位。这样以来就很明显的可以看出可以用一个异或门和一个与门来实现一个半加法器。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>a</th>
<th>b</th>
<th>sum</th>
<th>carry</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>0</td>
<td>1</td>
<td>1</td>
<td>0</td>
</tr>
<tr>
<td>1</td>
<td>0</td>
<td>1</td>
<td>0</td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td>0</td>
<td>1</td>
</tr>
</tbody>
</table>
</div>
<p>我们继续看全加法器的真值表</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>a</th>
<th>b</th>
<th>c</th>
<th>sum</th>
<th>carry</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>0</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>0</td>
</tr>
<tr>
<td>0</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>0</td>
</tr>
<tr>
<td>0</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>1</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
</tr>
<tr>
<td>1</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
</tr>
</tbody>
</table>
</div>
<p>我们可以先用一个半加法器把b和c的结果sum1和carry1给计算出来，在用一个半加法器把a和sum1的结果sum2和carry2给计算出来。然后可以知道sum2，carry1或着carry2就是就是全加法器的结果sum和carry。</p>
<script src="https://code.jquery.com/jquery-3.1.1.min.js"></script><link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css"><script src="https://code.jquery.com/jquery-3.1.1.min.js"></script>]]></content>
      <categories>
        <category>计算机科学与技术</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>Pinctrl子系统</title>
    <url>/2022/03/07/ComputerScience/2022/03/Pinctrl-sys/</url>
    <content><![CDATA[<p>一、pinctrl子系统介绍</p>
<p>pinctrl = pin controller，通过对pinctrl的拆分，可以清晰的看出这个子系统是用来控制引脚的。</p>
<script src="https://code.jquery.com/jquery-3.1.1.min.js"></script><link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css"><script src="https://code.jquery.com/jquery-3.1.1.min.js"></script>]]></content>
      <categories>
        <category>计算机科学与技术</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>00计算机系统要素:从零开始构建现代计算机</title>
    <url>/2022/04/17/ComputerScience/2022/04/a-good-book/</url>
    <content><![CDATA[<p>之前在<strong>低并发编程</strong>这个公众号上看到了系列对Linux0.11的源码进行解读的文章，写的挺好的，然后也加入了他们的交流群，4月15号的时候，看到群里有人发了本书出来《计算机系统要素:从零开始构建现代计算机》，在好奇心的驱使下，我把这本书下载了下来，然后上网搜索了一下这本书的相关信息，大概了解了一下情况，发现这东西可以从宏观上更好的来理解计算机系统，于是乎就开始看这本书了，打算花几个月的时间好好过一遍这本书，将书中的实验都做一遍，对计算机系统知识做一个全局性的回顾。</p>
<p><a href="https://www.nand2tetris.org/">From Nand to Tetris</a> </p>
<p>先按照官网的说明把需要的工具包 <code>nand2tetris.zip</code> 下载到了电脑上，解压后目录结构如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> tree nand2tetris -L 1</span></span><br><span class="line">nand2tetris</span><br><span class="line">├── projects</span><br><span class="line">└── tools</span><br><span class="line"></span><br><span class="line">2 directories, 0 files</span><br><span class="line"><span class="meta">$</span></span><br></pre></td></tr></table></figure>
<p><code>tools</code> 目录中有各种模拟器可以使用，需要在电脑上安装好 <code>java</code> 开发环境</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt install openjdk-11-jdk</span></span><br></pre></td></tr></table></figure>
<p>然后就可以对 <code>tools</code> 目录下的脚本添加可执行权限来运行</p>
<p>目前测试试了硬件模拟器，可以加载 <code>projects/01</code> 目录下的 <code>hdl</code> 文件来导入自己编写的元器件，然后再导入 <code>tst</code> 测试脚本来验证元器件功能是否正常。</p>
<script src="https://code.jquery.com/jquery-3.1.1.min.js"></script><link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css"><script src="https://code.jquery.com/jquery-3.1.1.min.js"></script>]]></content>
      <categories>
        <category>计算机科学与技术</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>缺乏思考的虚度光阴</title>
    <url>/2021/07/31/life/2021/07/opprtunity_cost/</url>
    <content><![CDATA[<p>转眼之间，七月便没了。</p>
<p>计划，执行，反馈。在这三个过程中，问题最大的是执行，可行计划制定后往往会有逃避的心理，有点儿畏难情绪，总会不自主的选择去做一些简单的事情，而把计划好要做的事情给抛开了。</p>
<p>当下互联网提供的知识量实在是太过于巨大了，有限的生命只能专注于其中的某一个点，该放弃的还是得毫不犹豫的抛掉。</p>
<script src="https://code.jquery.com/jquery-3.1.1.min.js"></script><link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css"><script src="https://code.jquery.com/jquery-3.1.1.min.js"></script>]]></content>
      <categories>
        <category>个人思考</category>
        <category>生活</category>
      </categories>
      <tags>
        <tag>个人思考</tag>
      </tags>
  </entry>
  <entry>
    <title>关于改变</title>
    <url>/2021/05/26/life/2021/05/thequestionofchange/</url>
    <content><![CDATA[<p>很长一段时间以来，我都在尝试着去改变自己，然而结果却总是以失败告终。</p>
<p>自2015年开始我给自己制定了一个接一个的计划，我想通过那些计划来提升自我，让自己成为一个博学的人。但是实际的结果却是没有一个计划被贯彻落实，我陷入了一种病态的行为，在“制定计划-完不成计划-厌恶自己行为”的恶性循环之中苦苦挣扎。</p>
<p>近日听了一本书《被讨厌的勇气》，作者是日本作家岸见一郎。书中采用对话体的形式，用青年与哲人的对话来阐释一些有关人生的问题。在听这本书的时候，我甚至以为书中的那位青年就是自己。</p>
<p>书中提到了阿尔弗雷德·阿德勒的个体心理学，也提到了个人的烦恼大都是源自人际关系的烦恼，提供了一些解决问题的方法，比如说可以用课题分离的方法来处理人际关系，身处社会关系网中的每一个体都有其特别的人生课题，我们不应该对他人的课题横加指责，但是课题分离并不是说你是你，我是我，你别干涉我，我也不会干涉你，我们要做的应该是协助，当他人需要的时候援以帮助之手。</p>
<p>我觉得书里面比较重要的是提出了这样一个命题：人生是一个个刹那的连续。是的，我们不应该总是纠结过去，过多地关注未来，其实要做的事情没有那么多，过好当下的每一个瞬间，便是在给人生递交一份最好的答卷。</p>
<p>当我开始把目标分解成周计划，甚至精确到小时计划，在那个小时之内就只做我给自己安排好的事情的时候，所谓的完不成计划的问题也就没有了。</p>
<p>希望在今后的日子里可以看到顶级自律的自己。</p>
<p><a href="http://xsdjt.vip.frp.wlphp.com:88/OneManager-php/onedrive5t/%E6%96%87%E5%AD%A6%E6%9C%97%E8%AF%BB/001.%E8%A2%AB%E8%AE%A8%E5%8E%8C%E7%9A%84%E5%8B%87%E6%B0%94-%E5%B2%B8%E8%A7%81%E4%B8%80%E9%83%8E/">《被讨厌的勇气》-下载链接1</a></p>
<p><a href="http://xsdjtdisk.herokuapp.com/onedrive5t/%E6%96%87%E5%AD%A6%E6%9C%97%E8%AF%BB/001.%E8%A2%AB%E8%AE%A8%E5%8E%8C%E7%9A%84%E5%8B%87%E6%B0%94-%E5%B2%B8%E8%A7%81%E4%B8%80%E9%83%8E/">《被讨厌的勇气》-下载链接2</a></p>
<script src="https://code.jquery.com/jquery-3.1.1.min.js"></script><link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css"><script src="https://code.jquery.com/jquery-3.1.1.min.js"></script>]]></content>
      <categories>
        <category>个人思考</category>
        <category>生活</category>
      </categories>
      <tags>
        <tag>个人思考</tag>
      </tags>
  </entry>
  <entry>
    <title>门前的枣树</title>
    <url>/2021/08/27/life/2021/08/jujube/</url>
    <content><![CDATA[<p>上个月枣子还是青青的，那时还采摘了几颗放在嘴里尝了尝，明显是没有熟的。想着等过段时日再采摘，结果现在是全熟落地了啊。</p>
<p>中午下楼吃饭的时候望了一眼，就想去尝几颗枣子。然后便走过去踢了几脚枣树，没反应，好吧，再来一脚，结果枣子没有，人给栽了，被那旁边的小枣树给刺的疼啊。这枣树定是在想：让你丫的踢我，来啊，你继续踢啊。</p>
<p>算了，枣子没摘到，刺倒是扎了一腿，最后还是老老实实洗洗腿，吃饭去了。</p>
<p>教训：千万不要用脚去踢枣树。</p>
<script src="https://code.jquery.com/jquery-3.1.1.min.js"></script><link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css"><script src="https://code.jquery.com/jquery-3.1.1.min.js"></script>]]></content>
      <categories>
        <category>生活记录</category>
        <category>生活</category>
      </categories>
      <tags>
        <tag>生活记录</tag>
      </tags>
  </entry>
  <entry>
    <title>杂 = 无</title>
    <url>/2021/08/13/life/2021/08/more-is-none/</url>
    <content><![CDATA[<blockquote>
<p>认识你自己。</p>
</blockquote>
<p>这是希腊德尔菲神庙上的一句箴言。</p>
<p>诚然，认识自己是一个非常重要的人生课题，有的人穷极一生也没能清楚的认识自己。</p>
<p>互联网时代给我们这一代人提供了太多太多的东西，让我们拥有了动动手指敲敲键盘就能获取知识的能力。然而爆炸性的知识量给某些人带来的也许不是幸福，而是悲剧。这些人在没有具备游泳能力的前提下就冒然进入了知识的海洋之中，想要尽情遨游。结果，可想而知，被活生生的淹死了。</p>
<p>那么接下来的问题就是如何培养这个游泳的能力？当我们面对那些无穷无尽的诱惑之时又如何能够不动如山？（这个还在想，尽管已经可以克服大部分诱惑了，但还是不够。）</p>
<p>当具备了在知识海洋里遨游的能力后，就得培养专注能力了，这是想要在某个领域取得成就的必要条件不是充分条件。</p>
<p>最后，分享一本电子书《极简快速阅读：信息时代如何读一本书》</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">链接：https://pan.baidu.com/s/1hB7msehG1cc4MGrt4aev1Q</span><br><span class="line">提取码：m6m0</span><br></pre></td></tr></table></figure>
<script src="https://code.jquery.com/jquery-3.1.1.min.js"></script><link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css"><script src="https://code.jquery.com/jquery-3.1.1.min.js"></script>]]></content>
      <categories>
        <category>个人思考</category>
        <category>生活</category>
      </categories>
      <tags>
        <tag>个人思考</tag>
      </tags>
  </entry>
  <entry>
    <title>积极废人</title>
    <url>/2021/08/02/life/2021/08/negtive/</url>
    <content><![CDATA[<p>最近看到<a href="https://www.baidu.com/link?url=bRP6RCk_rdeqkROqAy4NX-yafPedWlvghsHr-L9sqpURker62HxGePUeHfs0K5xmzaRqMm4gx0_TPm11E1E6cWZSZdov2tSxJxBnAcfFDrWpwExGyqGA-OsdLWaog4dN&amp;wd=&amp;eqid=e832eb4000013e9b000000056107eaa0">积极废人</a>这个词，脑子顿时嗡嗡作响。</p>
<p>长时间的习惯也许无法在短期内改变，现在都中期了。</p>
<p>其实我发现这种现象应该是在19年工作的时候，之前有花时间去想问题是在什么时候产生的，我追溯到了15年初入大学的时候。</p>
<p>现在，我想找回那失去的5年吗？不，我要做的也许应该是忘记这段时间，忘记之间发生的故事，我需要的是投身于当下，去按部就班的实现我自己的计划。</p>
<script src="https://code.jquery.com/jquery-3.1.1.min.js"></script><link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css"><script src="https://code.jquery.com/jquery-3.1.1.min.js"></script>]]></content>
      <categories>
        <category>个人思考</category>
        <category>生活</category>
      </categories>
      <tags>
        <tag>个人思考</tag>
      </tags>
  </entry>
  <entry>
    <title>晨雨</title>
    <url>/2021/08/06/life/2021/08/rainyday/</url>
    <content><![CDATA[<p>窗外的雨不大不小，断断续续的下了一个早上，让原本燥热的书房凉爽了许多。</p>
<p>午后，放晴，无风。</p>
<p>静坐在书房，对于未来，没有思绪。</p>
<script src="https://code.jquery.com/jquery-3.1.1.min.js"></script><link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css"><script src="https://code.jquery.com/jquery-3.1.1.min.js"></script>]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>生活记录</tag>
      </tags>
  </entry>
  <entry>
    <title>2021年的最后一天</title>
    <url>/2021/12/31/life/2021/12/31TheLastDay/</url>
    <content><![CDATA[<p>接下来的日子里要再努力一些，驱动 -&gt; 操作系统-&gt;应用程序开发，循序渐进，找到自己的节奏，多多思考，做生活的主人。</p>
<p>算法和数据结构是王道。</p>
<script src="https://code.jquery.com/jquery-3.1.1.min.js"></script><link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css"><script src="https://code.jquery.com/jquery-3.1.1.min.js"></script>]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>life</tag>
      </tags>
  </entry>
  <entry>
    <title>反思与规划</title>
    <url>/2021/12/08/life/2021/12/begood/</url>
    <content><![CDATA[<p>10月25日重新回到公司工作。</p>
<p>现在的心态比以前好很多了，不会太在意别人的眼光与说法，心里也踏实了许多。</p>
<p>也认识到了一件事，上司交待的事情要认认真真的去做好，做不做的出来是能力问题，能不能好好做是态度问题。能力问题可以学，笨就多花点时间总是可以学会的。但是态度问题就没法解决了。</p>
<p>从今天开始启动为期180天的自我提升计划。</p>
<script src="https://code.jquery.com/jquery-3.1.1.min.js"></script><link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css"><script src="https://code.jquery.com/jquery-3.1.1.min.js"></script>]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>life</tag>
      </tags>
  </entry>
  <entry>
    <title>好多问题</title>
    <url>/2021/12/07/life/2021/12/think/</url>
    <content><![CDATA[<p>到底什么才是思考？</p>
<p>学习的要点又是什么？</p>
<p>存在的意义？</p>
<p>在这无休无止的疑问之中，我唯一能够清楚的知道的是我一无所知。</p>
<script src="https://code.jquery.com/jquery-3.1.1.min.js"></script><link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css"><script src="https://code.jquery.com/jquery-3.1.1.min.js"></script>]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>life</tag>
      </tags>
  </entry>
  <entry>
    <title>冬至</title>
    <url>/2021/12/21/life/2021/12/winter/</url>
    <content><![CDATA[<p>最近在工作上碰到了一些问题，任务都没有完成的很好。心里也比较着急，然而又没有好的解决办法，我怀疑是自己的思维模式被固化了，但是目前又没有好的办法去解决这个问题。</p>
<p>老大指导了几次，学习关键的是思考，而不是仅仅停留在表象上面。要去挖掘现象背后所隐藏的原理，用原理去解决问题。得多问问为什么，需要什么？</p>
<p>今天晚上没有加班，在家里煮饺子和汤圆吃，过得很开心，感谢LS, WJL, GWT, XW。</p>
<script src="https://code.jquery.com/jquery-3.1.1.min.js"></script><link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css"><script src="https://code.jquery.com/jquery-3.1.1.min.js"></script>]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>life</tag>
      </tags>
  </entry>
  <entry>
    <title>我喜欢上了一个女孩</title>
    <url>/2022/01/30/life/2022/01/love/</url>
    <content><![CDATA[<p>我想要的是什么？我不知道。最近我喜欢上了一个女孩，但我又不知道要怎么和她接触，也就没有办法去深入的了解她。</p>
<p>没有谈过恋爱，一直以为自己不会再对女生动心了，没想到还是过不了这关。难道真的要应那句话</p>
<blockquote>
<p>愿意的，命运领着他（她）走。不愿意的，命运推着他（她）走。</p>
</blockquote>
<p>在这纷纷扰扰的世界中，我到底有没有完全的自由？</p>
<p>个体的毫无拘束的自由是否存在？这种存在的自由会带来美好还是灾难，我一无所知。</p>
<p>这一生不知要如何度过，但过早的结束生命应该是不会的了。这两年的时间里，算是跳出了生与死的选择。但我依然不敢肯定的表述这个结论，原因在于我无法进行一次完整的自我分析，目前只是明白自己的心理状态处于一种亚健康的状态，与前两年相比肯定是好了不少。</p>
<p>男女之间的情情爱爱就真的那么令人痴迷吗？好像也确实如此。</p>
<p>没有尝试过，想要尝试，这看起来也很正常。</p>
<p>我在干什么，我不知道，在纠结，在彷徨，在犹豫，也在惆怅。</p>
<p>静一静，把卢梭的《忏悔录》读完。</p>
<script src="https://code.jquery.com/jquery-3.1.1.min.js"></script><link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css"><script src="https://code.jquery.com/jquery-3.1.1.min.js"></script>]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>life</tag>
      </tags>
  </entry>
  <entry>
    <title>读书</title>
    <url>/2022/01/25/life/2022/01/book/</url>
    <content><![CDATA[<p>过去的不管怎么样都已经成了过去，现在的我能做的只是做好当下，前两天在看卢梭的《忏悔录》，里头他讲了这么一段话</p>
<blockquote>
<p>我这一生从来没有像我在这么幸福的时期如此接近于大彻大悟：对过去的既无太大的后悔，对未来也没有过多的忧虑，心中时时向往的是享受现在。</p>
</blockquote>
<p>我是这样想的，但却没能做到。</p>
<p>我尝试着和过去的一切和解，但用尽全力却也只能留着口气在人间。</p>
<p>阳光、乐观、积极</p>
<p>努力的做自己，想想，这个世界上还有那么多可爱的小伙伴呢。</p>
<script src="https://code.jquery.com/jquery-3.1.1.min.js"></script><link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css"><script src="https://code.jquery.com/jquery-3.1.1.min.js"></script>]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>life</tag>
      </tags>
  </entry>
  <entry>
    <title>语言表达</title>
    <url>/2022/02/05/life/2022/02/book/</url>
    <content><![CDATA[<blockquote>
<p>“人的一生充满了问题，它们扰乱了你的生活。然而，当你找到了答案，并用写作表达出来的时候，你会感到其乐无穷。”</p>
<p>——哈贝马斯</p>
</blockquote>
<p>是的，好的思想应该通过文字传承下去。</p>
<p>漫无目的的学习不如不学，学习需要带着目的，这个目的就是去解决现存环境下所面临的某些问题。</p>
<p>这几天在知乎上把《<a href="https://www.zhihu.com/remix/albums/960171412703608832">简明西方哲学史：36 位哲学大师的关键思想</a>》给听了一遍，作者讲了从古希腊的苏格拉底、柏拉图、亚里士多德开始到近现代哲学大家们的各种哲学思想。</p>
<p>本想循着这些哲学大家的思想去探索一些自己的思考，但结果貌似没能如愿。就目前阶段的情况来讲的话，比较喜欢斯多亚学派的不动心和叔本华的孤独论。</p>
<p>思考，思考力的培养。路漫漫其修远兮，吾将上下而求索。</p>
<script src="https://code.jquery.com/jquery-3.1.1.min.js"></script><link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css"><script src="https://code.jquery.com/jquery-3.1.1.min.js"></script>]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>life</tag>
      </tags>
  </entry>
  <entry>
    <title>书的抱怨</title>
    <url>/2022/02/15/life/2022/02/bookgroan/</url>
    <content><![CDATA[<p>记得几天前，你十分开心的抱着我，你说仿佛是我给了你新的生命，让你有了直面人生的勇气。</p>
<p>你对我说，你要和我一起努力去完成一些他人眼中你所无法完成的事情，你想去尝试，哪怕是遍体鳞伤也绝不后悔。</p>
<p>你给我写了那么多的信，字里行间流露的是你的真情。</p>
<p>而你却从未认真履行你的诺言。</p>
<p>你说过的那些话，难道都只是用来骗人的谎言。</p>
<p>我不想怀疑，可是事情的发展却又不得不让我对你的话产生怀疑。</p>
<p>你会回来吗？我还在布满灰尘的角落里等着你。</p>
<p>我们重新开始，好吗？</p>
<h1 id="总体目标完成情况"><a href="#总体目标完成情况" class="headerlink" title="总体目标完成情况"></a>总体目标完成情况</h1><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">要做的事情</th>
<th>目前完成的情况</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">在6月1号之前看韦东山的嵌入式视频教程系统学习下驱动开发</td>
<td>10%</td>
</tr>
</tbody>
</table>
</div>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">要读的书</th>
<th>目前完成的情况</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">《忏悔录》——卢梭</td>
<td>100%</td>
</tr>
<tr>
<td style="text-align:left">《数据结构与算法分析——C语言描述》第2版</td>
<td>10%</td>
</tr>
<tr>
<td style="text-align:left">《Linux设备驱动开发》</td>
<td>5%</td>
</tr>
<tr>
<td style="text-align:left">《嵌入式系统软件工程》</td>
<td>10%</td>
</tr>
<tr>
<td style="text-align:left">《UNIX环境高级编程》第3版</td>
<td>80%</td>
</tr>
<tr>
<td style="text-align:left">《深入理解计算机系统》</td>
<td>60%</td>
</tr>
<tr>
<td style="text-align:left">《Linux内核观测技术BPF》</td>
<td>✘</td>
</tr>
<tr>
<td style="text-align:left">《Mastering Embedded Linux Programming Second Edition》</td>
<td>✘</td>
</tr>
<tr>
<td style="text-align:left">《调试九法：软硬件错误排查之道》</td>
<td>✘</td>
</tr>
</tbody>
</table>
</div>
<p>注：✘表示没有开始做，✔表示已完成，百分数表示已完成内容所占的比重，每份表格中的内容至上而下优先级顺次降低。</p>
<script src="https://code.jquery.com/jquery-3.1.1.min.js"></script><link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css"><script src="https://code.jquery.com/jquery-3.1.1.min.js"></script>]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>life</tag>
      </tags>
  </entry>
  <entry>
    <title>核心需求测试报告</title>
    <url>/2022/02/04/life/2022/02/core-demand/</url>
    <content><![CDATA[<div class="markmap-container" style="height:400px;" ><svg class="markmap-svg">IyDmoLjlv4Plv4PnkIbpnIDmsYLpgI_op4YKIyMg5Lqy5a-G6ZyA5rGC77ya6YCa6L-H5o6l6Kem44CB6ZiF6K-744CB5Lqy6L-R562J5LiA5YiH6IO95aSf5byV6LW35oCn5aWL55qE5Lq644CB5LqL44CB54mp55qE6ZyA5rGC44CCCiMjIOeJqei0qOmcgOaxgu-8muW4jOacm-iOt-W-l-mHkemSseOAgemjn-eJqeOAgeaIv-WtkOetieeJqei0qO-8jOa7oei2s-eUn-WtmOaIluiOt-W-l-abtOWlveeUn-a0u-adoeS7tueahOmcgOaxguOAggojIyDoh6rkuLvpnIDmsYLvvJrluIzmnJvog73lpJ_ni6znq4voh6rkuLvjgIHpmo_lv4PmiYDmrLLjgIHkuI3lj5fpmZDliLbnmoTpnIDmsYLjgIIKIyMg56ep5bqP6ZyA5rGC77ya5biM5pyb6Ieq5bex5ZGo5Zu055qE5LqL54mp5Lul5p-Q56eN56ym5ZCI6YC76L6R55qE57O757uf5oiW6aG65bqP5pW06b2Q5o6S5YiX55qE6ZyA5rGC44CCCiMjIOWKqeS6uumcgOaxgu-8muW4jOacm-iDveWkn-WQjOaDheOAgeW4ruWKqeWIq-S6uueahOmcgOaxguOAggojIyDpobrku47pnIDmsYLvvJrluIzmnJvoh6rlt7HnmoTooYzkuLrkuL7mraLpg73og73lvpfliLDmjIflr7zvvIzluIzmnJvlj6ropoHkvp3nhafop4TliJnlkozmjIfku6TooYzkuovlsLHog73lrozmiJDnm67moIfnmoTpnIDmsYLjgIIKIyMg6KGo546w6ZyA5rGC77ya5oOz6KaB6KGo546w6Ieq5bex55qE6Zeq5YWJ54K577yM5biM5pyb6IO95byV6LW35Yir5Lq65a-56Ieq5bex55qE5rOo5oSP5ZKM6YeN6KeG55qE6ZyA5rGC44CCCiMjIOaUr-mFjemcgOaxgu-8muW4jOacm-iDveWkn-aIkOS4uuS4gOWQjemihuWvvOiAheOAgemihuiiluOAgeaMh-WvvOiAheOAgeaOp-WItuiAheeahOmcgOaxguOAggojIyDmiJDlsLHpnIDmsYLvvJrmuLTmnJvoh6rlt7Hog73lpJ_lhYvmnI3lm7Dpmr7jgIHlip7miJDlpKfkuovjgIHojrflvpfmiJDlip_nmoTpnIDmsYLjgIIKIyMg5oiQ6ZW_6ZyA5rGC77ya5biM5pyb6YCa6L-H5LiN5pat5Zyw44CB5rex5bGC5qyh55qE5oCd6ICD77yM56qB56C06Ieq5bex55qE6K6k55-l5bGA6ZmQ77yM6I635b6X5oiQ6ZW_55qE6ZyA5rGC44CC</svg></div>
<p>谢谢您的参与，阅读本报告时，请注意以下内容：<br>测评图表可快速帮您掌握报告内容；<br>本结果仅供参考，不可作为临床诊断的依据；<br>如结果与你自己或他人感知的有出入，可回忆在测试时是否有事情影响了你，或自己答题时是否有所顾虑；<br>如对报告有不理解的地方，建议向专业资质人员进行咨询。</p>
<p>事实上需求没有好坏之分，你可能会在几种需求上共同表现出高分，接下来我们只详细描述你在一种需求上的表现。</p>
<p><img src="/images/image-20220205143154122.png" alt="image-20220205143154122"></p>
<h1 id="你的核心心理需求"><a href="#你的核心心理需求" class="headerlink" title="你的核心心理需求"></a>你的核心心理需求</h1><p>☛ 你有着很高的成长需求，喜欢分析、追求知识，想要了解这个未知的世界，希望能够不断提高自己的认知水平。</p>
<p>☛ 你是一个喜欢独自分析和思考的人，希望能够找寻到生命的意义，而且由于你善于思考，所以你解决问题的能力比一般人强。</p>
<h2 id="在生活中：高峰体验、被照顾"><a href="#在生活中：高峰体验、被照顾" class="headerlink" title="在生活中：高峰体验、被照顾"></a>在生活中：高峰体验、被照顾</h2><p>☛ 追求认知的提升使你保持积极向上、充沛精力的动力，通过认知局限的突破来实现自己存在的价值。</p>
<p>☛ 当你在满足自己成长需求时，会获得高峰体验，你会有更加整合的自我感觉，减少内耗冲突犹豫，心平气和，注意力高度集中，放松而协调。</p>
<p>☛ 因此你常常会在思考中忘却时间，会由于太过投入而忽略了自己、家人、身边的其他事情等等。</p>
<p>☛ 也正是因为如此，生活中的你可能不太会照顾自己，常常需要他人的照顾。</p>
<h2 id="在工作中：迎难而上、专心致志"><a href="#在工作中：迎难而上、专心致志" class="headerlink" title="在工作中：迎难而上、专心致志"></a>在工作中：迎难而上、专心致志</h2><p>☛ 对成长的需求令你不断地追逐认知上的突破，面对困难你更会迎难而上，你对于知识的渴望让你在工作中总是比别人付出更多，也能让你把握更多的机会。</p>
<p>☛ 在职场上，你会成为团队中的专才，因为遇到同样的难题时，你比一般人付出更多的时间去思考和解决这一难题。</p>
<p>☛ 对于成长的需求使你在行动时自然放松，简单诚恳，不踌躇做作，有一种特殊的淳朴，奔涌出生命力。</p>
<h2 id="在感情中：忽视、被包容"><a href="#在感情中：忽视、被包容" class="headerlink" title="在感情中：忽视、被包容"></a>在感情中：忽视、被包容</h2><p>☛ 恋爱对于你来说相当于生活的调味品，而并非必需品，即使没有爱情对于你来说影响也不大。</p>
<p>☛ 所以你的感情常常需要为你的学习和工作做出让步。你的恋人应该对你有足够的理解、崇拜和爱，才能包容你将所有的注意都投入在学习或工作上。</p>
<p>☛ 在恋爱的过程中，你并不是一个“合格的伴侣”。由于你几乎将自己的全部精力都放在了自己的工作或学习上，所以你很少有时间能够与自己的恋人相处。</p>
<h1 id="你的深层心理需求"><a href="#你的深层心理需求" class="headerlink" title="你的深层心理需求"></a>你的深层心理需求</h1><p>☛ 心理学家默里表示，每一个核心心理需求背后，其实都隐藏着一个更深层次的心理需求。</p>
<p>☛ 根据马斯洛需求层次理论，深层心理需求像阶梯一样从低到高，按层次逐级递升。</p>
<p>☛ 一般来说，只有满足了低层次的需求，才会向高一层次发展。</p>
<p>☛ 但这样的次序并不是完全固定的，层级可以并列，也可以跳跃。</p>
<p>☛ 很多时候，是因人而异，因事而异的。例如，消防员救火，牺牲了安全需求，而满足了自我实现的需求。</p>
<p>☛ 所以并不是说需求层级越高，你的人生状态就越好。它只是指出了你内心深处最渴望的那部分。</p>
<p>☛ 有着高成长需求的你，内心可能隐藏着【认知】的深沉渴望。</p>
<p>☛ 这归属于马斯洛需求层次理论中“自我实现”的需求，意味着在你的内心深处，你渴求能够实现自己的价值，想要通过不断地去思考、探索以找到存在的意义，创造出属于自己的价值。</p>
<p>☛ 在寻求认知的背后，包含着这样一层含义：通过知识的积累和认知水平的提高就能有所突破，实现自己的价值。</p>
<p>☛ 这种内在能力、认知水平的提高，让你对自我的价值有所肯定。你的这种需求不依附于外在他人的认同和肯定，而是来自于自己。</p>
<h1 id="可能掉入的“陷阱”"><a href="#可能掉入的“陷阱”" class="headerlink" title="可能掉入的“陷阱”"></a>可能掉入的“陷阱”</h1><h2 id="陷阱一：社交单一"><a href="#陷阱一：社交单一" class="headerlink" title="陷阱一：社交单一"></a>陷阱一：社交单一</h2><p>☛ 过高的认知需求可能会让你需要更多的时间独处或与自己知识层面相同的人探讨问题，所以这就导致你的交际面会比较狭窄，社交单一。</p>
<p>☛ 另一方面，你可能会是一个非常冷静的人，总想跟身边的人和事保持一定的距离，以避免因这些人和事所产生的情绪对你造成困扰，影响你的思绪。</p>
<h2 id="陷阱二：忽略健康"><a href="#陷阱二：忽略健康" class="headerlink" title="陷阱二：忽略健康"></a>陷阱二：忽略健康</h2><p>☛ 过高的认知需求可能会让你将大量的精力都投入到分析思考、突破自己的认知局限上，而忽略了自己的身体健康。</p>
<p>☛ 你可能会由于太过专注于做分析、做计划，而忘记了吃饭、睡觉和换衣服这类日常生活习惯。不懂得照顾自己。</p>
<hr>
<h1 id="测评建议"><a href="#测评建议" class="headerlink" title="测评建议"></a>测评建议</h1><h2 id="如何满足你的需求"><a href="#如何满足你的需求" class="headerlink" title="如何满足你的需求"></a>如何满足你的需求</h2><p>1、选择合适的职业和团队，满足核心需求</p>
<p>♣ 根据你的成长需求，你可以寻找一份能给你充分的私人空间和高度隐私的工作，这样能够给你足够的独处空间进行自我思考和创作。</p>
<p>♣ 你可以从事一些研究类的工作，比如医学、心理学、哲学方面的等等，成为某一领域的专家。你也可以从事一些可以让你创新并富有挑战的工作，比如设计师等等。</p>
<p>2、选择和你有相同需求的另一半</p>
<p>♣ 在择偶方面，与你有着同样特质的另一半和你会有更好的默契，能够理解和支持你的认知需求，也能满足你的其他需要，从而使彼此的权力在爱情关系中达到平衡。</p>
<p>♣ 倘若对方的认知需求较弱，Ta可能无法理解你将自己的大部分精力放在工作或学习上而产生矛盾或争执。</p>
<p>♣ 无论跟谁在一起，爱情都是一场自我的修行。学会在爱中不断成长，跟爱的人一起去看天大地大，而不是抱在一起相互取暖。</p>
<p>3、积累知识</p>
<p>♣ 你可以通过阅读更多不同类型的书籍，探索更多不同领域、不同专业的理论，与更多不同职业、不同圈子的人结交的方式来拓展思想的宽度。</p>
<p>♣ 也可以对自己感兴趣的理论进行深入研究来加深思想的深度，或是研读各大哲学家、思想家的学说言论让自己向更高层次的思想靠近，甚至可以通过写书的方式在整理、传达自己的思想的同时实现自我提升。</p>
<p>4、获得自我价值感，满足深层需求</p>
<p>第一步，自我觉知：倾听自己内在的喜悦和噪音。</p>
<p>♣ 闭上眼睛，仔细聆听自己，感受自己的身体和精神。在脑海中浮现自己的样子：你的发型是什么？眼睛大不大？嘴巴怎么样？身体各部分的知觉如何？是温暖的，还是寒冷的？是沉重的，还是轻飘飘的？当下的感受如何？开心的？还是难过的？……</p>
<p>第二步，清醒催眠：获得正向的反馈。</p>
<p>♣ 找到一个合适的人，恋人或朋友，或者是互助小组的成员，让对方给予你正向的反馈，鼓励你，表扬你，安抚你，给你拥抱。</p>
<p>♣ 你也可以尝试给予他人正向反馈，如夸赞对方的优点，做得好的地方，能量的输出也会让你更有力量。</p>
<p>第三步，断裂修复：第二次出生。</p>
<p>♣ 试着写回顾日记，记录过去这段时间（一个月）完成了什么，遇到了什么困境，你是如何解决的。</p>
<p>♣ 再一项项写下想要完成什么事，一个月过去之后再翻开，在已完成的事情上打勾，没完成的顺延至下个月。在这过程中，你会感受到自己对生活的把控。</p>
<p>♣ 此时，冥想对你会有帮助。</p>
<p>♣ 冥想指南：每天给自己留一段冥想的时间，找个安静的环境坐下来，闭上眼睛跟随你的呼吸。</p>
<p>♣ 想象你都控制住了那些事情，再回到呼吸上，呼气，吸气，呼气，吸气……。</p>
<p>♣ 需要的话，你也可以听着舒缓的音乐开始。</p>
<h2 id="避免你的需求陷阱"><a href="#避免你的需求陷阱" class="headerlink" title="避免你的需求陷阱"></a>避免你的需求陷阱</h2><p>1、关注当下</p>
<p>♣ 你对于认知的需求常常会令你抽离于你目前的生活，所以你需要分出一些精力关注当下的“琐事”。</p>
<p>♣ 你可能智力超常，但如果你没有把它用在你自己或者其他人身上，智力就成了你的障碍。</p>
<p>♣ 在做那些不一定能提升你自己的自尊、自信或生活状况的琐事时，可以做一些更有吸引力的事情，比如运动、消遣等，更有助于提升你的自信。</p>
<p>2、掌握社交技巧</p>
<p>① 学习与人建立情感联结的开始阶段： 多交流</p>
<p>➷ 对他人表示感激的话语</p>
<p>➷ 礼貌适当的身体接触</p>
<p>➷ 送一点小礼物    ……</p>
<p>② 学习与人建立情感联结的加强阶段：在交流时注意一些细微事项</p>
<p>♣ 保持微笑：友好的态度让人更愿意与你接触</p>
<p>♣ 进行眼神交流：适当的眼神接触让人感觉到你有在把注意力投入在对方身上，鼓励他们进一步自我袒露</p>
<p>♣ 共情：倾听完试着理解他们的感受，并表达出来</p>
<p>♣ 表示善意：对他们的问题提供适当的帮助，或仅仅只是一句鼓励或安慰</p>
<p>3、关注自己的身体状况</p>
<p>♣ 你易于紧张，生活的弦绷得太紧，以至于很难放松、松弛，不要求助于外来的麻醉和酒精。</p>
<p>♣ 沉思、慢跑、瑜珈、跳舞等或许会比较适合你来放松自己。</p>
<script src="https://code.jquery.com/jquery-3.1.1.min.js"></script><link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css"><script src="https://code.jquery.com/jquery-3.1.1.min.js"></script>]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>life</tag>
      </tags>
  </entry>
  <entry>
    <title>2022年上半年的业余生活安排</title>
    <url>/2022/02/06/life/2022/02/goal/</url>
    <content><![CDATA[<h1 id="总体目标"><a href="#总体目标" class="headerlink" title="总体目标"></a>总体目标</h1><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">要做的事情</th>
<th>目前完成的情况</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">在6月1号之前看韦东山的嵌入式视频教程系统学习下驱动开发</td>
<td>✘</td>
</tr>
</tbody>
</table>
</div>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">要读的书</th>
<th>目前完成的情况</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">《忏悔录》——卢梭</td>
<td>60%</td>
</tr>
<tr>
<td style="text-align:left">《数据结构与算法分析——C语言描述》第2版</td>
<td>10%</td>
</tr>
<tr>
<td style="text-align:left">《Linux设备驱动开发》</td>
<td>5%</td>
</tr>
<tr>
<td style="text-align:left">《嵌入式系统软件工程》</td>
<td>10%</td>
</tr>
<tr>
<td style="text-align:left">《UNIX环境高级编程》第3版</td>
<td>80%</td>
</tr>
<tr>
<td style="text-align:left">《深入理解计算机系统》</td>
<td>60%</td>
</tr>
<tr>
<td style="text-align:left">《Linux内核观测技术BPF》</td>
<td>✘</td>
</tr>
<tr>
<td style="text-align:left">《Mastering Embedded Linux Programming Second Edition》</td>
<td>✘</td>
</tr>
<tr>
<td style="text-align:left">《调试九法：软硬件错误排查之道》</td>
<td>✘</td>
</tr>
</tbody>
</table>
</div>
<h1 id="目标分解"><a href="#目标分解" class="headerlink" title="目标分解"></a>目标分解</h1><h2 id="2月份"><a href="#2月份" class="headerlink" title="2月份"></a>2月份</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">要做的事情</th>
<th>目前完成的情况</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><a href="https://www.100ask.net/detail/p_5f338ae3e4b075dc42ad44a1/8">韦东山的嵌入式视频教程【第4篇】嵌入式Linux应用开发基础知识</a></td>
<td>50%</td>
</tr>
<tr>
<td style="text-align:left">《忏悔录》——卢梭</td>
<td>60%</td>
</tr>
<tr>
<td style="text-align:left">《数据结构与算法分析——C语言描述》第2版</td>
<td>10%</td>
</tr>
<tr>
<td style="text-align:left">《调试九法：软硬件错误排查之道》</td>
<td>✘</td>
</tr>
</tbody>
</table>
</div>
<h2 id="3月份"><a href="#3月份" class="headerlink" title="3月份"></a>3月份</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">要做的事情</th>
<th>目前完成的情况</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><a href="https://www.100ask.net/detail/p_5f1aa2dde4b0df48afbd775f/8">韦东山的嵌入式视频教程【第5篇】嵌入式Linux驱动开发基础知识</a></td>
<td>✘</td>
</tr>
<tr>
<td style="text-align:left">《Linux设备驱动开发》、《嵌入式系统软件工程》</td>
<td>15%</td>
</tr>
</tbody>
</table>
</div>
<h2 id="4月份"><a href="#4月份" class="headerlink" title="4月份"></a>4月份</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">要做的事情</th>
<th>目前完成的情况</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><a href="https://www.100ask.net/detail/p_5ff2c46ce4b0c4f2bc4fa16d/8">嵌入式Linux全新系列教程之驱动大全(基于IMX6ULL开发板)</a></td>
<td>✘</td>
</tr>
<tr>
<td style="text-align:left">《深入理解计算机系统》</td>
<td>60%</td>
</tr>
</tbody>
</table>
</div>
<h2 id="5月份"><a href="#5月份" class="headerlink" title="5月份"></a>5月份</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">要做的事情</th>
<th>目前完成的情况</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><a href="https://www.100ask.net/detail/p_5ff2c46ce4b0c4f2bc4fa16d/8">嵌入式Linux全新系列教程之驱动大全(基于IMX6ULL开发板)</a></td>
<td>✘</td>
</tr>
<tr>
<td style="text-align:left">《UNIX环境高级编程》第3版</td>
<td>80%</td>
</tr>
<tr>
<td style="text-align:left">《Mastering Embedded Linux Programming Second Edition》</td>
<td>✘</td>
</tr>
</tbody>
</table>
</div>
<h2 id="6月份"><a href="#6月份" class="headerlink" title="6月份"></a>6月份</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">要做的事情</th>
<th>目前完成的情况</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><a href="https://www.100ask.net/detail/p_5ff2c46ce4b0c4f2bc4fa16d/8">嵌入式Linux全新系列教程之驱动大全(基于IMX6ULL开发板)</a></td>
<td>✘</td>
</tr>
<tr>
<td style="text-align:left">《Linux内核观测技术BPF》</td>
<td>✘</td>
</tr>
</tbody>
</table>
</div>
<p>注：✘表示没有开始做，✔表示已完成，百分数表示已完成内容所占的比重，每份表格中的内容至上而下优先级顺次降低。</p>
<script src="https://code.jquery.com/jquery-3.1.1.min.js"></script><link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css"><script src="https://code.jquery.com/jquery-3.1.1.min.js"></script>]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>life</tag>
      </tags>
  </entry>
  <entry>
    <title>感性</title>
    <url>/2022/02/21/life/2022/02/love/</url>
    <content><![CDATA[<blockquote>
<p>“人的一生充满了问题，它们扰乱了你的生活。然而，当你找到了答案，并用写作表达出来的时候，你会感到其乐无穷。”</p>
<p>——哈贝马斯</p>
</blockquote>
<p>上帝原来是个爱开玩笑的家伙，他变着戏法，玩弄世人，让人们在情情爱爱的感性里迷失了方向。</p>
<p>你喜欢的人不喜欢你，喜欢你的人你不喜欢。</p>
<p>我和她说了，</p>
<p>结束了吗？</p>
<p>也许没有，</p>
<p>只不过是自我欺骗的谎言。</p>
<script src="https://code.jquery.com/jquery-3.1.1.min.js"></script><link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css"><script src="https://code.jquery.com/jquery-3.1.1.min.js"></script>]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>life</tag>
      </tags>
  </entry>
  <entry>
    <title>建立学习反馈机制</title>
    <url>/2022/03/13/life/2022/03/create_feedback/</url>
    <content><![CDATA[<p>安卓系统架构是怎么样的？学习路线要怎么安排？</p>
<p>安卓的系统架构文章可以从互联网上找到一堆材料，这是在知乎上看到的一个链接 <a href="https://zhuanlan.zhihu.com/p/26100298">Android系统架构开篇</a> 作者写的内容比较多，我只简单的看了一下架构图。</p>
<p>接着翻了一下，就看到了袁辉辉的博客了 <a href="http://gityuan.com/">Gityuan</a> </p>
<script src="https://code.jquery.com/jquery-3.1.1.min.js"></script><link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css"><script src="https://code.jquery.com/jquery-3.1.1.min.js"></script>]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>life</tag>
      </tags>
  </entry>
  <entry>
    <title>如果不能安静下来，请按下暂停键</title>
    <url>/2022/03/01/life/2022/03/think/</url>
    <content><![CDATA[<blockquote>
<p>“人的一生充满了问题，它们扰乱了你的生活。然而，当你找到了答案，并用写作表达出来的时候，你会感到其乐无穷。”</p>
<p>——哈贝马斯</p>
</blockquote>
<p>最近，哦不，应该是很长一段时间以来都是漫无目的的行动。</p>
<p>这种行为方式不仅自己苦恼，也让周围的人产生了反感，行为模式带来的危害非常严重，必须要警惕起来，现在确定了一个方向，那就好好的去学习。</p>
<p>先给自己提一些问题。</p>
<p>安卓系统架构是怎么样的？学习路线要怎么安排？</p>
<script src="https://code.jquery.com/jquery-3.1.1.min.js"></script><link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css"><script src="https://code.jquery.com/jquery-3.1.1.min.js"></script>]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>life</tag>
      </tags>
  </entry>
  <entry>
    <title>对过去的3月做个简单的总结，为更好的继续接下来的计划作准备</title>
    <url>/2022/04/01/life/2022/04/soul-searching/</url>
    <content><![CDATA[<h1 id="回顾总体目标"><a href="#回顾总体目标" class="headerlink" title="回顾总体目标"></a>回顾总体目标</h1><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">要做的事情</th>
<th>目前完成的情况</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">在6月1号之前看韦东山的嵌入式视频教程系统学习下驱动开发</td>
<td>10%</td>
</tr>
</tbody>
</table>
</div>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">要读的书</th>
<th>目前完成的情况</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">《忏悔录》——卢梭</td>
<td>100%</td>
</tr>
<tr>
<td style="text-align:left">《数据结构与算法分析——C语言描述》第2版</td>
<td>10%</td>
</tr>
<tr>
<td style="text-align:left">《Linux设备驱动开发》</td>
<td>100%</td>
</tr>
<tr>
<td style="text-align:left">《嵌入式系统软件工程》</td>
<td>10%</td>
</tr>
<tr>
<td style="text-align:left">《UNIX环境高级编程》第3版</td>
<td>80%</td>
</tr>
<tr>
<td style="text-align:left">《深入理解计算机系统》</td>
<td>60%</td>
</tr>
<tr>
<td style="text-align:left">《Linux内核观测技术BPF》</td>
<td>✘</td>
</tr>
<tr>
<td style="text-align:left">《Mastering Embedded Linux Programming Second Edition》</td>
<td>✘</td>
</tr>
<tr>
<td style="text-align:left">《调试九法：软硬件错误排查之道》</td>
<td>✘</td>
</tr>
</tbody>
</table>
</div>
<h1 id="三月份情况分析总结"><a href="#三月份情况分析总结" class="headerlink" title="三月份情况分析总结"></a>三月份情况分析总结</h1><p>首先，在2022年02月06日的时候是有给自己制定业余计划的，目前来看，总体进度存在明显拖延。其中的个人心理因素给自己的计划带来了巨大的阻碍作用，心里面经常想做更多的事情。比如说3月份还买了《道德经》来看，还想在理解的基础上背下来，这肯定是要花时间的。</p>
<p>但总体而言情况是在朝着好的方向发展，从3月份开始都是6：45就起床了，然后会提前一小时到公司看技术书。晚上大概八点到九点半下班回家，再看一会儿书，玩一玩手机，凌晨一点左右睡觉吧。个人感觉这个熬夜玩手机的习惯还是要不得的，后面会戒掉。</p>
<p>最后就是技术方面的想法的话，就是朝着操作系统的方向去深挖，就当自己之前啥也没学过，代码方面要多敲一敲。</p>
<script src="https://code.jquery.com/jquery-3.1.1.min.js"></script><link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css"><script src="https://code.jquery.com/jquery-3.1.1.min.js"></script>]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>life</tag>
      </tags>
  </entry>
  <entry>
    <title>在理性与感性的对撞中造就的抽象形象</title>
    <url>/2022/04/30/life/2022/04/time/</url>
    <content><![CDATA[<p>抽象形象这个词是今天在与大学老师通话过程中第一次听到的。当时第一反应就是康德，因为抽象代表的是理性，而形象代表的是感性直观。抽象形象这个词将理性与感性结合在一起，形成了一种综合，而这不就是康德做的事情吗？</p>
<p>记忆中，最开始接触康德应该是初中的时候看的一部电视剧，但那剧的名字记不得了，只依稀记得其中有一个辩论的情节，当时有一位辩手引用的康德的这句话：“有两样东西，越是经常而持久地对它们进行反复思考，它们就越是使心灵充满常新而日益增长的惊赞和敬畏：我头上的星空和我心中的道德法则。” 当时，我就直接被吸引住了，一直把这句话记在了心里。后来随着年岁的增长，对康德也有了进一步的了解，比如他一辈子都没出哥尼斯堡，极致的作息规律，对于道德的高标准要求，尽管身躯瘦弱矮小仍然用自己的方式活了79岁，终身未婚等等。再后来，我开始想要去了解他的思想，接触他的哲学思辨，于是就尝试着去读他写的《纯粹理性批判》。读了之后，我发现自己根本就是完全看不懂，然后就开始找网课了。</p>
<p>在找网课的过程中，我被一位普林斯顿的教授说笑了，他说在《纯粹理性批判》出版之后，出现了一位评注者提到读这本书的感觉时说：“这是一项令人厌恶的任务，因为文章的枯燥，晦涩难懂，不同于所有日常概念，并且还很冗长。”到这里其实还没什么，关键的是那位教授说这个评注者就是康德本人，我当时着实笑翻了。我顿时理解了自己。但是康德在英国经验与欧洲理性的背景之下，运用哲学思辨完成了一次史无前例的综合，真的是太伟大了。</p>
<p>目前对康德的了解也就仅仅限于他在认识论上做的一些工作，后面有时间了再继续看看他写的书。关于《纯粹理性批判》这本书，现在还在断断续续的读着，但由于工作的原因，我把阅读计划延后了。</p>
<p>本来只是想打电话给老师问个好，没想到老师的话让我回忆了一波，收获满满。</p>
<script src="https://code.jquery.com/jquery-3.1.1.min.js"></script><link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css"><script src="https://code.jquery.com/jquery-3.1.1.min.js"></script>]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>life</tag>
      </tags>
  </entry>
  <entry>
    <title>离职后的第一天</title>
    <url>/2022/11/19/life/2022/11/start/</url>
    <content><![CDATA[<p>离职后的第一天，居家隔离，原因是昨日在集团子公司中发现有新冠阳性的例子，于是乎前几日在公司待过的员工都得居家隔离了，原定的离榕计划又得延后几日。</p>
<p>说说这次的离职吧，前年提出离职是想要去追寻自己的理想，这一次也许真的是工作不适合自己吧，也不太想加班，我想要找一份上班是上班生活是生活的工作，想来想去，还是辞职了，既然辞职了，就给自己一点空闲的时间，趁着年轻去做点自己想做的事情吧，可是我想做的是什么？我不知道。</p>
<p>充分地去享受那在世的生命体验吧，感受生活，回归日常。</p>
<script src="https://code.jquery.com/jquery-3.1.1.min.js"></script><link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css"><script src="https://code.jquery.com/jquery-3.1.1.min.js"></script>]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>life</tag>
      </tags>
  </entry>
  <entry>
    <title>新的开始</title>
    <url>/2022/12/14/life/2022/12/20221214/</url>
    <content><![CDATA[<p>这几年确实过得挺乱的，记得2017年11月发了一条朋友圈：“说给自己一个十年，努力奋斗，让自己的生活越来越美好。”，当时有位很好的朋友说，不用十年，只消五年，社会就会打的你鼻青脸肿。现在五年过去了，事实也确实如此，我被揍的鼻青脸肿了。</p>
<p>那现在的问题是，为什么会变成现在这个样子？我想来想去，也就是知行合一的问题，很多大道理人们都懂，但真正踏踏实实去做的很少。我也知道问题就在于，明明知道个人能量有限，精力有限，却渴望学会在人这一生中都学不完的东西。不停的摇摆，然后蹉跎了岁月，荒废了人生。</p>
<p>一直都没有想明白自己到底喜欢什么，要做一件什么样的事情，如何更好的达成自己的目标？</p>
<p>针对目前的困境，其实最需要解决的应该是经济问题，当经济问题成为首要问题的时候，其他的问题都无法解决，目前的积蓄还能支撑一段时间，在这段时间我得确立一个方向，是之后坚持深挖十年的方向，要踏踏实实的。</p>
<p>《孟子·离娄上》有一段话，颇令人警醒，孟子曰：“有不虞之誉，有求全之毁。”</p>
<p>不要因为外在的赞扬而得意忘形，也不要因为内心的苛责而长久的难受，踏踏实实的做事情，静待花开。</p>
<blockquote>
<p>事物的本质只有一个，却有多种表现形式，这些形式不但不会完全相同，有时甚至表现得正好相反，哲学上的术语就是“二律背反”,即同样一个事物，有时会表现出两个相反的表象，但这两个相反的表象都是事物本质的真实反映。不虞之誉和求全之毁，或是符合事实而自己未能认识到，或是不符合事实而自己没有料想到，它们在现实中都是存在的。在阳光下，一个人只要有形，就必然有影；只有在自己倒下的情况下，才会有形无影。影子不会使人跌倒到，只有形不正才会使自己跌倒。</p>
</blockquote>
<script src="https://code.jquery.com/jquery-3.1.1.min.js"></script><link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css"><script src="https://code.jquery.com/jquery-3.1.1.min.js"></script>]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>life</tag>
      </tags>
  </entry>
  <entry>
    <title>破局</title>
    <url>/2022/12/14/life/2022/12/poem/</url>
    <content><![CDATA[<p>秋月引愁愁不堪，冬阳消雪天更寒。<br>今破生死身犹在，待到来年做好汉。</p>
<script src="https://code.jquery.com/jquery-3.1.1.min.js"></script><link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css"><script src="https://code.jquery.com/jquery-3.1.1.min.js"></script>]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>life</tag>
      </tags>
  </entry>
  <entry>
    <title>自下而上的了解Android</title>
    <url>/2021/09/11/ComputerScience/2021/09/android/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>开始时间（2021年9月11日9点50分 ）<br>结束时间（2021年9月19日16点40分）<br>注意空间要留够，最好留500G空间用来存放AOSP的源代码。（笔者在第一次实验时只留了300G，结果做到最后发现实验空间不够了，临时切换到deepin系统使用gparted工具扩容到了600G以上）</p>
<p>该记录是为了自下而上的了解安卓程序运行的整个流程，参考的文档大部分都放在了本记录的参考内容之中，由于网络上的教程比较分散且部分内容和使用的源码版本不一致，故在此整理，以便日后复习使用。</p>
<h2 id="环境准备（基于ubuntu16-04）"><a href="#环境准备（基于ubuntu16-04）" class="headerlink" title="环境准备（基于ubuntu16.04）"></a>环境准备（基于ubuntu16.04）</h2><h3 id="下载Android源代码"><a href="#下载Android源代码" class="headerlink" title="下载Android源代码"></a>下载Android源代码</h3><p><a href="https://mirrors.tuna.tsinghua.edu.cn/help/AOSP/">使用清华源下载源码</a></p>
<p>下载源码时可能需要把https换成http</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">repo init -u http://aosp.tuna.tsinghua.edu.cn/platform/manifest -b android-7.0.0_r28</span><br></pre></td></tr></table></figure>
<p>另外如果碰到python环境有问题，可以重新安装python环境，之后就能执行repo脚本了</p>
<p><a href="https://blog.csdn.net/qq_42353939/article/details/94609591">Python安装报错：”ModuleNotFoundError:No module named _ctypes“ 的解决方案</a></p>
<p>若担心网络不好中途断开链接，可以用一个shell脚本执行<code>repo.sh</code> </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">repo sync -j8 </span><br><span class="line"></span><br><span class="line">while [ $? = 1 ]</span><br><span class="line">do</span><br><span class="line">    echo &quot;======sync failed ,re-sync again======&quot;</span><br><span class="line">    sleep 3</span><br><span class="line">    repo sync -j8 </span><br><span class="line">done</span><br></pre></td></tr></table></figure>
<h3 id="编译Android源代码"><a href="#编译Android源代码" class="headerlink" title="编译Android源代码"></a>编译Android源代码</h3><h4 id="安装openjdk-1-8"><a href="#安装openjdk-1-8" class="headerlink" title="安装openjdk 1.8"></a>安装openjdk 1.8</h4><p><a href="https://www.linuxidc.com/Linux/2017-11/148695.htm">Ubuntu 16.04安装Java JDK</a> </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install openjdk-8-jdk</span><br></pre></td></tr></table></figure>
<h4 id="安装依赖库"><a href="#安装依赖库" class="headerlink" title="安装依赖库"></a>安装依赖库</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install libx11-dev:i386 libreadline6-dev:i386 libgl1-mesa-dev</span><br><span class="line">g++-multilib git flex bison gperf build-essential libncurses5-dev:i386</span><br><span class="line">tofrodos python-markdown libxml2-utils xsltproc zlib1g-dev:i386 dpkg-dev</span><br><span class="line">libsdl1.2-dev libesd0-dev git-core gnupg flex bison gperf build-essential</span><br><span class="line">zip curl zlib1g-dev gcc-multilib g++-multilib libc6-dev-i386</span><br><span class="line">lib32ncurses5-dev x11proto-core-dev libx11-dev lib32z-dev</span><br><span class="line">ccache libgl1-mesa-dev libxml2-utils xsltproc unzip m4</span><br></pre></td></tr></table></figure>
<h4 id="编译AOSP项目的源代码"><a href="#编译AOSP项目的源代码" class="headerlink" title="编译AOSP项目的源代码"></a>编译AOSP项目的源代码</h4><p>由于最后编写应用程序验证驱动时会碰到 <code>selinux</code> 的问题，在查阅了相关资料后修改 <code>system/core/init/init.cpp</code> 的一行代码，关闭安全选项 <code>SELINUX_ENFORCING</code>。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> selinux_enforcing_status <span class="title">selinux_status_from_cmdline</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//selinux_enforcing_status status = SELINUX_ENFORCING;</span></span><br><span class="line">    selinux_enforcing_status status = SELINUX_PERMISSIVE;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">import_kernel_cmdline</span>(<span class="literal">false</span>, [&amp;](<span class="keyword">const</span> std::string&amp; key, <span class="keyword">const</span> std::string&amp; value, <span class="keyword">bool</span> in_qemu) &#123;</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="string">&quot;androidboot.selinux&quot;</span> &amp;&amp; value == <span class="string">&quot;permissive&quot;</span>) &#123;</span><br><span class="line">            status = SELINUX_PERMISSIVE;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<p>开始编译源码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进入AOSP项目根目录</span></span><br><span class="line">cd android</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">设置环境变量</span></span><br><span class="line">source build/envsetup.sh </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">选择平台 选择2       2.aosp_arm64-eng</span></span><br><span class="line">lunch 2</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 执行编译</span></span><br><span class="line">make -j8</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 编译SDK</span></span><br><span class="line">make sdk -j8</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 执行android启动sdk manager下载项目相关工具</span></span><br><span class="line">android</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>下载好后通过 <code>android list targets</code> 命令来查看当前系统中可以创建哪些平台的虚拟设备，在我的系统下，这条命令的执行结果如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Available Android targets:</span><br><span class="line">----------</span><br><span class="line">id: 1 or &quot;android-24&quot;</span><br><span class="line">     Name: Android 7.0</span><br><span class="line">     Type: Platform</span><br><span class="line">     API level: 24</span><br><span class="line">     Revision: 2</span><br><span class="line">     Skins: HVGA, QVGA, WQVGA400, WQVGA432, WSVGA, WVGA800 (default), WVGA854, WXGA720, WXGA800, WXGA800-7in</span><br><span class="line"> Tag/ABIs : default/armeabi-v7a</span><br><span class="line">----------</span><br><span class="line">id: 2 or &quot;Google Inc.:Google APIs:24&quot;</span><br><span class="line">     Name: Google APIs</span><br><span class="line">     Type: Add-On</span><br><span class="line">     Vendor: Google Inc.</span><br><span class="line">     Revision: 1</span><br><span class="line">     Description: Android + Google APIs</span><br><span class="line">     Based on Android 7.0 (API level 24)</span><br><span class="line">     Libraries:</span><br><span class="line">      * com.android.future.usb.accessory (usb.jar)</span><br><span class="line">          API for USB Accessories</span><br><span class="line">      * com.google.android.media.effects (effects.jar)</span><br><span class="line">          Collection of video effects</span><br><span class="line">      * com.google.android.maps (maps.jar)</span><br><span class="line">          API for Google Maps</span><br><span class="line">     Skins: HVGA, QVGA, WQVGA400, WQVGA432, WSVGA, WVGA800 (default), WVGA854, WXGA720, WXGA800, WXGA800-7in</span><br><span class="line"> Tag/ABIs : no ABIs.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>接下来创建设备并运行模拟器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">创建一个Android 7.0的虚拟设备。创建的命令如下：</span></span><br><span class="line">android create avd -n helloandroid -t 1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 通过 emulator -<span class="built_in">help</span> 查看说明，然后运行安卓模拟器</span> </span><br><span class="line">emulator -show-kernel -avd helloandroid -partition-size 4096 -memory 2048 -cache-size 2048</span><br></pre></td></tr></table></figure>
<p>之后运行安卓模拟器需要先设置好环境变量和平台</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">设置环境变量</span></span><br><span class="line">source build/envsetup.sh </span><br><span class="line"><span class="meta">#</span><span class="bash">选择平台 与之前编译时的选择要相同</span></span><br><span class="line">lunch 2</span><br><span class="line"><span class="meta">#</span><span class="bash"> 运行安卓模拟器</span></span><br><span class="line">emulator -show-kernel -avd helloandroid -partition-size 4096 -memory 2048 -cache-size 2048</span><br></pre></td></tr></table></figure>
<h3 id="下载、编译与安装android内核源代码-linux-kernel"><a href="#下载、编译与安装android内核源代码-linux-kernel" class="headerlink" title="下载、编译与安装android内核源代码(linux kernel)"></a>下载、编译与安装android内核源代码(linux kernel)</h3><p>下载 Android kernel 代码</p>
<p>先设置代理，之后才能下载内核源码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">设置代理</span></span><br><span class="line">git config --global http.proxy  IPaddress:port</span><br><span class="line">git config --global https.proxy IPaddress:port</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">内核的下载花了点时间，执行命令后，可以去做其他事了</span></span><br><span class="line">mkdir kernel &amp;&amp; cd kernel</span><br><span class="line">git clone https://android.googlesource.com/kernel/goldfish</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">取消代理</span></span><br><span class="line">git config --global --unset http.proxy</span><br><span class="line">git config --global --unset https.proxy</span><br></pre></td></tr></table></figure>
<p>下载好后进行内核版本选择，这里可以打开模拟器去看看预编译好的内核版本，然后再进行选择，笔者这里的安卓模拟器使用的Android版本是7.0内核版本显示3.10</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进入goldfish版本内核</span></span><br><span class="line">cd goldfish </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看有哪些分支</span></span><br><span class="line">git branch -a </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 选择与预编译一致的linux内核版本的分支</span></span><br><span class="line">git checkout remotes/origin/android-goldfish-3.10</span><br><span class="line">git branch arm-3.10</span><br><span class="line">git checkout arm-3.10</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">设置环境变量</span></span><br><span class="line">source build/envsetup.sh </span><br><span class="line"><span class="meta">#</span><span class="bash">选择平台 与之前编译源码时的选择要相同</span></span><br><span class="line">lunch 2</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用安卓项目中的编译脚本来编译内核</span></span><br><span class="line">../../prebuilts/qemu-kernel/build-kernel.sh </span><br></pre></td></tr></table></figure>
<p>或者导入环境变量再编译（后面编译驱动的时候就用这种方式）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export ARCH=arm64</span><br><span class="line">export CROSS_COMPILE=aarch64-linux-android-</span><br><span class="line"><span class="meta">#</span><span class="bash">如果无法使用make goldfish  可以直接cp arch/arm/configs/某个匹配的配置文件 .config</span></span><br><span class="line">make goldfish</span><br><span class="line">make -j8</span><br></pre></td></tr></table></figure>
<p>运行安卓模拟器（使用编译好的内核）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">设置环境变量</span></span><br><span class="line">source build/envsetup.sh </span><br><span class="line"><span class="meta">#</span><span class="bash">选择平台</span></span><br><span class="line">lunch 2</span><br><span class="line"><span class="meta">#</span><span class="bash"> 运行安卓模拟器，指定编译好的文件</span></span><br><span class="line">emulator -show-kernel -avd helloandroid -kernel ../kernel/goldfish/arch/arm64/boot/Image -system ./out/target/product/generic_arm64/system.img -data ./out/target/product/generic_arm64/userdata.img -ramdisk ./out/target/product/generic_arm64/ramdisk.img</span><br></pre></td></tr></table></figure>
<h2 id="编写Linux内核驱动程序"><a href="#编写Linux内核驱动程序" class="headerlink" title="编写Linux内核驱动程序"></a>编写Linux内核驱动程序</h2><p>新编译的linux内核是3.10版本，代码变动可以在drivers目录中找例子</p>
<h3 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">从 Android kernel 根目录进入drivers,并创建相关文件夹和文件</span></span><br><span class="line">cd drivers</span><br><span class="line">mkdir hello &amp;&amp; cd hello</span><br><span class="line">touch hello.h hello.c Makefile Kconfig</span><br></pre></td></tr></table></figure>
<p>各代码文件内容如下:</p>
<h4 id="hello-h"><a href="#hello-h" class="headerlink" title="hello.h"></a>hello.h</h4><figure class="highlight c"><figcaption><span>hello.h</span><a href="/downloads/code/hello/hello.h">view raw</a></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _HELLO_Android_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _HELLO_ANDROID_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/cdev.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/semaphore.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> HELLO_DEVICE_NODE_NAME <span class="meta-string">&quot;hello&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> HELLO_DEVICE_FILE_NAME <span class="meta-string">&quot;hello&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> HELLO_DEVICE_PROC_NAME <span class="meta-string">&quot;hello&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> HELLO_DEVICE_CLASS_NAME <span class="meta-string">&quot;hello&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*定义一个设备结构体,此结构体可以封装设备相关的一些信息等</span></span><br><span class="line"><span class="comment">  信号量等也可以封装在此结构中，后续的设备模块一般都</span></span><br><span class="line"><span class="comment">  应该封装一个这样的结构体，但此结构体中必须包含某些</span></span><br><span class="line"><span class="comment">  成员，对于字符设备来说，我们必须包含struct cdev cdev*/</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">hello_android_dev</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">semaphore</span> <span class="title">sem</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">cdev</span> <span class="title">dev</span>;</span></span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>
<h4 id="hello-c"><a href="#hello-c" class="headerlink" title="hello.c"></a>hello.c</h4><figure class="highlight c"><figcaption><span>hello.c</span><a href="/downloads/code/hello/hello.c">view raw</a></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/init.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/fs.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/proc_fs.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/device.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;asm/uaccess.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/cdev.h&gt;</span>    </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/semaphore.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//drivers/hello/hello.c:303:5: error: implicit declaration of function &#x27;kmalloc&#x27; [-Werror=implicit-function-declaration]</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/slab.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/seq_file.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;hello.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//主设备和从设备号变量</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> hello_major = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> hello_minor = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//设备类别和设备变量</span></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="keyword">class</span>* <span class="title">hello_class</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">hello_android_dev</span>* <span class="title">hello_dev</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//访问设置属性的方法</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">ssize_t</span> <span class="title">hello_val_show</span><span class="params">(struct device* dev, struct device_attribute* attr, <span class="keyword">char</span>* buf)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">ssize_t</span> <span class="title">hello_val_store</span><span class="params">(struct device* dev, struct device_attribute* attr, <span class="keyword">const</span> <span class="keyword">char</span>* buf, <span class="keyword">size_t</span> count)</span></span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">//定义设备属性</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="title">DEVICE_ATTR</span><span class="params">(val, S_IRUGO | S_IWUSR, hello_val_show, hello_val_store)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//传统设备文件操作方法</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hello_open</span><span class="params">(struct inode* inode, struct file* filp)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hello_release</span><span class="params">(struct inode* inode, struct file* filp)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">ssize_t</span> <span class="title">hello_read</span><span class="params">(struct file* filp, <span class="keyword">char</span> __user *buf, <span class="keyword">size_t</span> count, <span class="keyword">loff_t</span>* f_pos)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">ssize_t</span> <span class="title">hello_write</span><span class="params">(struct file* filp, <span class="keyword">const</span> <span class="keyword">char</span> __user *buf, <span class="keyword">size_t</span> count, <span class="keyword">loff_t</span>* f_pos)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//设备文件操作方法表</span></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">file_operations</span> <span class="title">hello_fops</span> =</span> </span><br><span class="line">{</span><br><span class="line">     .owner = THIS_MODULE,</span><br><span class="line">     .open = hello_open,</span><br><span class="line">     .release = hello_release,</span><br><span class="line">     .read = hello_read,</span><br><span class="line">     .write = hello_write,</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="comment">//打开设备方法</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hello_open</span><span class="params">(struct inode* inode, struct file* filp)</span> </span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">hello_android_dev</span>* <span class="title">dev</span>;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//将自定义设备结构体保存在文件指针的私有数据域中，以便访问设备时拿来用</span></span><br><span class="line">    dev = container_of(inode-&gt;i_cdev, struct hello_android_dev, dev);</span><br><span class="line">    filp-&gt;private_data = dev;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//设备文件释放时调用，空实现</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hello_release</span><span class="params">(struct inode* inode, struct file* filp)</span> </span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//读取设备的寄存器val的值</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">ssize_t</span> <span class="title">hello_read</span><span class="params">(struct file* filp, <span class="keyword">char</span> __user *buf, <span class="keyword">size_t</span> count, <span class="keyword">loff_t</span>* f_pos)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">      printk(<span class="string">&quot;hello_read()\n&quot;</span>);</span><br><span class="line">      </span><br><span class="line">    <span class="keyword">ssize_t</span> err = <span class="number">0</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">hello_android_dev</span>* <span class="title">dev</span> =</span> filp-&gt;private_data;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//同步访问</span></span><br><span class="line">    <span class="keyword">if</span>(down_interruptible(&amp;(dev-&gt;sem))) </span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">return</span> -ERESTARTSYS;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(count &lt; <span class="keyword">sizeof</span>(dev-&gt;val)) </span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">goto</span> out;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将寄存器val的值拷贝到用户提供的缓冲区</span></span><br><span class="line">    <span class="keyword">if</span>(copy_to_user(buf, &amp;(dev-&gt;val), <span class="keyword">sizeof</span>(dev-&gt;val))) </span><br><span class="line">    {</span><br><span class="line">         err = -EFAULT;</span><br><span class="line">         <span class="keyword">goto</span> out;</span><br><span class="line">     }</span><br><span class="line"></span><br><span class="line">     err = <span class="keyword">sizeof</span>(dev-&gt;val);</span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line">    up(&amp;(dev-&gt;sem));</span><br><span class="line">    <span class="keyword">return</span> err;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//写设备寄存器的值val</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">ssize_t</span> <span class="title">hello_write</span><span class="params">(struct file* filp, <span class="keyword">const</span> <span class="keyword">char</span> __user *buf, <span class="keyword">size_t</span> count, <span class="keyword">loff_t</span>* f_pos)</span> </span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">hello_android_dev</span>* <span class="title">dev</span> =</span> filp-&gt;private_data;</span><br><span class="line">    <span class="keyword">ssize_t</span> err = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    printk(<span class="string">&quot;hello_write()\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//同步访问</span></span><br><span class="line">    <span class="keyword">if</span>(down_interruptible(&amp;(dev-&gt;sem))) {</span><br><span class="line">        <span class="keyword">return</span> -ERESTARTSYS;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(count != <span class="keyword">sizeof</span>(dev-&gt;val)) {</span><br><span class="line">        <span class="keyword">goto</span> out;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将用户提供的缓冲区的值写到设备寄存器去</span></span><br><span class="line">    <span class="keyword">if</span>(copy_from_user(&amp;(dev-&gt;val), buf, count)) {</span><br><span class="line">        err = -EFAULT;</span><br><span class="line">        <span class="keyword">goto</span> out;</span><br><span class="line">    }</span><br><span class="line">    err = <span class="keyword">sizeof</span>(dev-&gt;val);</span><br><span class="line">out:</span><br><span class="line">    up(&amp;(dev-&gt;sem));</span><br><span class="line">    <span class="keyword">return</span> err;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//读取寄存器val的值到缓冲区的buf中，内部使用</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">ssize_t</span> __hello_get_val(struct hello_android_dev* dev, <span class="keyword">char</span>* buf) </span><br><span class="line">{</span><br><span class="line">      printk(<span class="string">&quot;__hello_get_val()\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> val = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//同步访问</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">semaphore</span> *<span class="title">p_sem</span> =</span> &amp;(dev-&gt;sem);</span><br><span class="line">    <span class="keyword">if</span>(down_interruptible(p_sem))</span><br><span class="line">    {</span><br><span class="line">          printk(<span class="string">&quot;sem is used,pls wait to free.\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> -ERESTARTSYS;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    val = dev-&gt;val;</span><br><span class="line">    up(p_sem);</span><br><span class="line">    </span><br><span class="line">    printk(<span class="string">&quot;get val: %d\n&quot;</span>,val);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">snprintf</span>(buf, PAGE_SIZE, <span class="string">&quot;%d\n&quot;</span>, val);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//把缓冲区buf的值写到设备寄存器val中去，内部使用</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">ssize_t</span> __hello_set_val(struct hello_android_dev* dev, <span class="keyword">const</span> <span class="keyword">char</span>* buf, <span class="keyword">size_t</span> count) </span><br><span class="line">{</span><br><span class="line">      printk(<span class="string">&quot;__hello_set_val()\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> val = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将字符串转换成数字</span></span><br><span class="line">    val = simple_strtol(buf, <span class="literal">NULL</span>, <span class="number">10</span>);</span><br><span class="line">    </span><br><span class="line">    printk(<span class="string">&quot;set val: %d\n&quot;</span>,val);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//同步访问</span></span><br><span class="line">    <span class="keyword">if</span>(down_interruptible(&amp;(dev-&gt;sem)))</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">return</span> -ERESTARTSYS;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    dev-&gt;val = val;</span><br><span class="line">    up(&amp;(dev-&gt;sem));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//读取设备属性</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">ssize_t</span> <span class="title">hello_val_show</span><span class="params">(struct device* dev, struct device_attribute* attr, <span class="keyword">char</span>* buf)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">      printk(<span class="string">&quot;hello_val_show()\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">hello_android_dev</span>* <span class="title">hdev</span> =</span> (struct hello_android_dev*)dev_get_drvdata(dev);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> __hello_get_val(hdev, buf);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//写设备属性</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">ssize_t</span> <span class="title">hello_val_store</span><span class="params">(struct device* dev, struct device_attribute* attr, <span class="keyword">const</span> <span class="keyword">char</span>* buf, <span class="keyword">size_t</span> count)</span> </span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">      printk(<span class="string">&quot;hello_val_store()\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">hello_android_dev</span>* <span class="title">hdev</span> =</span> (struct hello_android_dev*)dev_get_drvdata(dev);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> __hello_set_val(hdev, buf, count);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hello_proc_show</span><span class="params">(struct seq_file *m, <span class="keyword">void</span> *v)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    seq_printf(m, <span class="string">&quot;%d\n&quot;</span>, hello_dev-&gt;val);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hello_proc_open</span><span class="params">(struct inode *inode, struct file *filp)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">return</span> single_open(filp, hello_proc_show, <span class="literal">NULL</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//读取设备寄存器val的值，保存在page缓冲区中</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">ssize_t</span> <span class="title">hello_proc_read</span><span class="params">(<span class="keyword">char</span>* page, <span class="keyword">char</span>** start, <span class="keyword">off_t</span> off, <span class="keyword">int</span> count, <span class="keyword">int</span>* eof, <span class="keyword">void</span>* data)</span> </span></span><br><span class="line"><span class="function"></span>{    </span><br><span class="line">      printk(<span class="string">&quot;hello_proc_read()\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(off &gt; <span class="number">0</span>) </span><br><span class="line">    {</span><br><span class="line">        *eof = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> __hello_get_val(hello_dev, page);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//把缓冲区的值buff保存到设备寄存器val中去</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">ssize_t</span> <span class="title">hello_proc_write</span><span class="params">(struct file* filp, <span class="keyword">const</span> <span class="keyword">char</span> __user *buff, <span class="keyword">unsigned</span> <span class="keyword">long</span> len, <span class="keyword">void</span>* data)</span> </span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">      printk(<span class="string">&quot;hello_proc_write()\n&quot;</span>);</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">int</span> err = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span>* page = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(len &gt; PAGE_SIZE) {</span><br><span class="line">    printk(KERN_ALERT<span class="string">&quot;The buff is too large: %lu./n&quot;</span>, len);</span><br><span class="line">        <span class="keyword">return</span> -EFAULT;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    page = (<span class="keyword">char</span>*)__get_free_page(GFP_KERNEL);</span><br><span class="line">    <span class="keyword">if</span>(!page) {</span><br><span class="line">        printk(KERN_ALERT<span class="string">&quot;Failed to alloc page./n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> -ENOMEM;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//先把用户提供的缓冲区值拷贝到内核缓冲区中去</span></span><br><span class="line">    <span class="keyword">if</span>(copy_from_user(page, buff, len)) {</span><br><span class="line">        printk(KERN_ALERT<span class="string">&quot;Failed to copy buff from user./n&quot;</span>);</span><br><span class="line">    err = -EFAULT;</span><br><span class="line">    <span class="keyword">goto</span> out;</span><br><span class="line">    }</span><br><span class="line">    err = __hello_set_val(hello_dev, page, len);</span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line">    free_page((<span class="keyword">unsigned</span> <span class="keyword">long</span>)page);</span><br><span class="line">    <span class="keyword">return</span> err;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除/proc/hello文件</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">hello_remove_proc</span><span class="params">(<span class="keyword">void</span>)</span> </span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    remove_proc_entry(HELLO_DEVICE_PROC_NAME, <span class="literal">NULL</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">file_operations</span> <span class="title">hello_proc_fops</span> =</span> {</span><br><span class="line">	.owner	= THIS_MODULE,</span><br><span class="line">	.open	= hello_proc_open,</span><br><span class="line">	.write	= hello_proc_write,</span><br><span class="line">	.read	= seq_read,</span><br><span class="line">	.llseek	= seq_lseek,</span><br><span class="line">	.release= single_release,</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建/proc/hello文件</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">hello_create_proc</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="comment">//    struct proc_dir_entry* entry;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    entry = create_proc_entry(HELLO_DEVICE_PROC_NAME, 0, NULL);</span></span><br><span class="line"><span class="comment">//    if(entry)</span></span><br><span class="line"><span class="comment">//    {</span></span><br><span class="line"><span class="comment">//        //entry-&gt;owner = THIS_MODULE;  entry has no &quot;owner&quot; member</span></span><br><span class="line"><span class="comment">//        entry-&gt;read_proc = hello_proc_read;</span></span><br><span class="line"><span class="comment">//        entry-&gt;write_proc = hello_proc_write;</span></span><br><span class="line"><span class="comment">//    }</span></span><br><span class="line">    proc_create(HELLO_DEVICE_PROC_NAME, <span class="number">0</span>, <span class="literal">NULL</span>, &amp;hello_proc_fops);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化设备</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> __hello_setup_dev(struct hello_android_dev* dev) </span><br><span class="line">{</span><br><span class="line">    <span class="keyword">int</span> err;</span><br><span class="line">    <span class="keyword">dev_t</span> devno = MKDEV(hello_major, hello_minor);</span><br><span class="line">    </span><br><span class="line">    printk(<span class="string">&quot;__hello_setup_dev()\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memset</span>(dev, <span class="number">0</span>, <span class="keyword">sizeof</span>(struct hello_android_dev));</span><br><span class="line"></span><br><span class="line">    cdev_init(&amp;(dev-&gt;dev), &amp;hello_fops);</span><br><span class="line">    dev-&gt;dev.owner = THIS_MODULE;</span><br><span class="line">    dev-&gt;dev.ops = &amp;hello_fops;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注册字符设备</span></span><br><span class="line">    err = cdev_add(&amp;(dev-&gt;dev),devno, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(err) </span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">return</span> err;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化信号量和寄存器val的值</span></span><br><span class="line">    <span class="comment">//init_MUTEX(&amp;(dev-&gt;sem));  2.6.25及以后的linux内核版本废除了init_MUTEX函数</span></span><br><span class="line">    sema_init(&amp;(dev-&gt;sem),<span class="number">1</span>);</span><br><span class="line">    dev-&gt;val = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//模块加载方法</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> __init <span class="title">hello_init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> err = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">dev_t</span> dev = <span class="number">0</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">device</span>* <span class="title">temp</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    printk(KERN_ALERT<span class="string">&quot;Initializing hello device./n&quot;</span>);</span><br><span class="line">    <span class="comment">/*动态分配主设备和从设备号*/</span>    </span><br><span class="line">    err = alloc_chrdev_region(&amp;dev, <span class="number">0</span>, <span class="number">1</span>, HELLO_DEVICE_NODE_NAME);</span><br><span class="line">    <span class="keyword">if</span>(err &lt; <span class="number">0</span>) {</span><br><span class="line">        printk(KERN_ALERT<span class="string">&quot;Failed to alloc char dev region./n&quot;</span>);</span><br><span class="line">        <span class="keyword">goto</span> fail;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    hello_major = MAJOR(dev);</span><br><span class="line">    hello_minor = MINOR(dev);  </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//分配hello设备结构体变量</span></span><br><span class="line">    hello_dev = kmalloc(<span class="keyword">sizeof</span>(struct hello_android_dev), GFP_KERNEL);</span><br><span class="line">    <span class="keyword">if</span>(!hello_dev) {</span><br><span class="line">        err = -ENOMEM;</span><br><span class="line">        printk(KERN_ALERT<span class="string">&quot;Failed to alloc hello_dev./n&quot;</span>);</span><br><span class="line">        <span class="keyword">goto</span> unregister;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化设备</span></span><br><span class="line">    err = __hello_setup_dev(hello_dev);</span><br><span class="line">    <span class="keyword">if</span>(err) {</span><br><span class="line">        printk(KERN_ALERT<span class="string">&quot;Failed to setup dev: %d./n&quot;</span>, err);</span><br><span class="line">        <span class="keyword">goto</span> cleanup;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在/sys/class/目录下创建设备类别目录hello</span></span><br><span class="line">    hello_class = class_create(THIS_MODULE, HELLO_DEVICE_CLASS_NAME);</span><br><span class="line">    <span class="keyword">if</span>(IS_ERR(hello_class)) {</span><br><span class="line">        err = PTR_ERR(hello_class);</span><br><span class="line">        printk(KERN_ALERT<span class="string">&quot;Failed to create hello class./n&quot;</span>);</span><br><span class="line">        <span class="keyword">goto</span> destroy_cdev;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在/dev目录和/sys/class/hello目录下分别创建设备文件hello</span></span><br><span class="line">    temp = device_create(hello_class, <span class="literal">NULL</span>, dev, <span class="string">&quot;%s&quot;</span>, HELLO_DEVICE_FILE_NAME);</span><br><span class="line">    <span class="keyword">if</span>(IS_ERR(temp)) {</span><br><span class="line">        err = PTR_ERR(temp);</span><br><span class="line">         printk(KERN_ALERT<span class="string">&quot;Failed to create hello device.&quot;</span>);</span><br><span class="line">         <span class="keyword">goto</span> destroy_class;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在/sys/class/hello/hello目录下创建属性文件val</span></span><br><span class="line">    err = device_create_file(temp, &amp;dev_attr_val);</span><br><span class="line">    <span class="keyword">if</span>(err &lt; <span class="number">0</span>) {</span><br><span class="line">        printk(KERN_ALERT<span class="string">&quot;Failed to create attribute val.&quot;</span>);</span><br><span class="line">        <span class="keyword">goto</span> destroy_device;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    dev_set_drvdata(temp, hello_dev);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建/proc/hello文件</span></span><br><span class="line">    hello_create_proc();</span><br><span class="line">    printk(KERN_ALERT<span class="string">&quot;Succedded to initialize hello device./n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">destroy_device:</span><br><span class="line">    device_destroy(hello_class, dev);</span><br><span class="line">destroy_class:</span><br><span class="line">    class_destroy(hello_class);</span><br><span class="line"></span><br><span class="line">destroy_cdev:</span><br><span class="line">    cdev_del(&amp;(hello_dev-&gt;dev));</span><br><span class="line">cleanup:</span><br><span class="line">    kfree(hello_dev);</span><br><span class="line"></span><br><span class="line">unregister:</span><br><span class="line">    unregister_chrdev_region(MKDEV(hello_major, hello_minor), <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">fail:</span><br><span class="line">    <span class="keyword">return</span> err;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//模块卸载方法</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> __exit <span class="title">hello_exit</span><span class="params">(<span class="keyword">void</span>)</span> </span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">dev_t</span> devno = MKDEV(hello_major, hello_minor);</span><br><span class="line"></span><br><span class="line">    printk(KERN_ALERT<span class="string">&quot;Destroy hello device./n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除/proc/hello文件</span></span><br><span class="line">    hello_remove_proc();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//销毁设备类别和设备</span></span><br><span class="line">    <span class="keyword">if</span>(hello_class) {</span><br><span class="line">        device_destroy(hello_class, MKDEV(hello_major, hello_minor));</span><br><span class="line">        class_destroy(hello_class);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除字符设备和释放设备内存</span></span><br><span class="line">    <span class="keyword">if</span>(hello_dev) {</span><br><span class="line">        cdev_del(&amp;(hello_dev-&gt;dev));</span><br><span class="line">        kfree(hello_dev);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//释放设备号</span></span><br><span class="line">    unregister_chrdev_region(devno, <span class="number">1</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">MODULE_LICENSE(<span class="string">&quot;GPL&quot;</span>);</span><br><span class="line">MODULE_DESCRIPTION(<span class="string">&quot;First Android Driver&quot;</span>);</span><br><span class="line"></span><br><span class="line">module_init(hello_init);</span><br><span class="line">module_exit(hello_exit);</span><br></pre></td></tr></table></figure>
<h4 id="makefile"><a href="#makefile" class="headerlink" title="makefile"></a>makefile</h4><figure class="highlight makefile"><figcaption><span>Makefile</span><a href="/downloads/code/hello/Makefile">view raw</a></figcaption><table><tr><td class="code"><pre><span class="line">obj-<span class="variable">$(CONFIG_HELLO)</span>    += hello.o</span><br></pre></td></tr></table></figure>
<h4 id="Kconfig"><a href="#Kconfig" class="headerlink" title="Kconfig"></a>Kconfig</h4><figure class="highlight plain"><figcaption><span>Kconfig</span><a href="/downloads/code/hello/Kconfig">view raw</a></figcaption><table><tr><td class="code"><pre><span class="line">config HELLO</span><br><span class="line">	tristate &quot;Frist Android Driver&quot;</span><br><span class="line">	default y</span><br><span class="line">	help</span><br><span class="line">	This is the first android driver.</span><br></pre></td></tr></table></figure>
<p>接着在 kernel/drivers/Makefile 中添加如下代码:</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">obj-<span class="variable">$(CONFIG_HELLO)</span> += hello/</span><br></pre></td></tr></table></figure>
<p>继续在 kernel/drivers/Kconfig 中添加如下代码:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">source &quot;drivers&#x2F;hello&#x2F;Kconfig&quot;</span><br></pre></td></tr></table></figure>
<p>其中配置Kconfig是为了在menuconfig中生成菜单项，如果不想在配置菜单中显示，可以直接将 <code>$(CONFIG_HELLO)</code> 替换成 <code>y</code> 将Kconfig文件删除即可，也不必在上层目录的Kconfig中添加代码。</p>
<h3 id="重新编译内核"><a href="#重新编译内核" class="headerlink" title="重新编译内核"></a>重新编译内核</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">在kernel/goldfish 目录执行以下命令进行内核编译</span></span><br><span class="line">cp arch/arm/configs/ranchu_defconfig .config</span><br><span class="line"><span class="meta">#</span><span class="bash">打开内核编译配置选项 确认 Device Drivers --&gt; [*]Frist Android Driver 是开启的</span></span><br><span class="line">make menuconfig</span><br><span class="line"><span class="meta">#</span><span class="bash">执行编译</span></span><br><span class="line">make -j8</span><br></pre></td></tr></table></figure>
<p>使用编译好的内核启动模拟器，再用 <code>adb shell</code> 进入安卓模拟器的终端界面，运行以下命令进行验证</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 运行安卓模拟器，指定编译好的文件</span></span><br><span class="line">emulator -show-kernel -avd helloandroid -kernel ../kernel/goldfish/arch/arm64/boot/Image -system ./out/target/product/generic_arm64/system.img -data ./out/target/product/generic_arm64/userdata.img -ramdisk ./out/target/product/generic_arm64/ramdisk.img</span><br></pre></td></tr></table></figure>
<p>这个时候也可以直接在执行模拟器命令的终端上按回车键即可输入命令进行驱动的验证。</p>
<p>下面是使用 <code>adb shell</code> 的方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nicho@PC:~&#x2F;work&#x2F;android$ adb shell</span><br><span class="line">generic_arm64:&#x2F; # cd dev                                                             </span><br><span class="line">generic_arm64:&#x2F;dev # ls hello                                                        </span><br><span class="line">hello</span><br><span class="line">generic_arm64:&#x2F;dev # cd &#x2F;proc                                                        </span><br><span class="line">generic_arm64:&#x2F;proc # ls hello                                                       </span><br><span class="line">hello</span><br><span class="line">generic_arm64:&#x2F;proc # cat hello                                                      </span><br><span class="line">0</span><br><span class="line">generic_arm64:&#x2F;proc # echo 9 &gt; hello                                               </span><br><span class="line">generic_arm64:&#x2F;proc # cat hello                                                      </span><br><span class="line">9</span><br><span class="line">generic_arm64:&#x2F;proc # cd &#x2F;sys&#x2F;class&#x2F;hello&#x2F;hello&#x2F;                                                                                         </span><br><span class="line">generic_arm64:&#x2F;sys&#x2F;class&#x2F;hello&#x2F;hello # cat val                                       </span><br><span class="line">9</span><br><span class="line">generic_arm64:&#x2F;sys&#x2F;class&#x2F;hello&#x2F;hello # echo 0 &gt; val                                </span><br><span class="line">generic_arm64:&#x2F;sys&#x2F;class&#x2F;hello&#x2F;hello # cat val                                       </span><br><span class="line">0</span><br></pre></td></tr></table></figure>
<h2 id="编写C可执行程序测试Linux内核驱动程序"><a href="#编写C可执行程序测试Linux内核驱动程序" class="headerlink" title="编写C可执行程序测试Linux内核驱动程序"></a>编写C可执行程序测试Linux内核驱动程序</h2><h3 id="编写代码-1"><a href="#编写代码-1" class="headerlink" title="编写代码"></a>编写代码</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">从 AOSP 根目录进入external,并创建相关文件夹和文件</span></span><br><span class="line">cd external</span><br><span class="line">mkdir hello &amp;&amp; cd hello</span><br><span class="line">touch hello.c Android.mk</span><br></pre></td></tr></table></figure>
<p>各文件代码内容如下:</p>
<h4 id="hello-c-1"><a href="#hello-c-1" class="headerlink" title="hello.c"></a>hello.c</h4><figure class="highlight c"><figcaption><span>hello.c</span><a href="/downloads/code/hello-external/hello.c">view raw</a></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DEVICE_NAME <span class="meta-string">&quot;/dev/hello&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">	<span class="keyword">int</span> fd = <span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">int</span> val = <span class="number">0</span>;</span><br><span class="line">	</span><br><span class="line">	fd = open(DEVICE_NAME, O_RDWR);</span><br><span class="line">	<span class="keyword">if</span>(fd == <span class="number">-1</span>)</span><br><span class="line">	{</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Failed to open device %s.\n&quot;</span>, DEVICE_NAME);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;read original value:\n&quot;</span>);</span><br><span class="line">	read(fd, &amp;val, <span class="keyword">sizeof</span>(val));</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d.\n\n&quot;</span>, val);</span><br><span class="line">	</span><br><span class="line">	val = <span class="number">5</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Write value %d to %s.\n\n&quot;</span>, val, DEVICE_NAME);</span><br><span class="line">	write(fd, &amp;val, <span class="keyword">sizeof</span>(val));</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Read the value again:\n&quot;</span>);</span><br><span class="line">	read(fd, &amp;val, <span class="keyword">sizeof</span>(val));</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d.\n\n&quot;</span>,val);</span><br><span class="line">	</span><br><span class="line">	close(fd);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h4 id="Android-mk"><a href="#Android-mk" class="headerlink" title="Android.mk"></a>Android.mk</h4><figure class="highlight text"><figcaption><span>Android.mk</span><a href="/downloads/code/hello-external/Android.mk">view raw</a></figcaption><table><tr><td class="code"><pre><span class="line">LOCAL_PATH := $(call my-dir)</span><br><span class="line">include $(CLEAR_VARS)</span><br><span class="line">LOCAL_MODULE_TAGS := optional</span><br><span class="line">LOCAL_MODULE := hello</span><br><span class="line">LOCAL_SRC_FILES := $(call all-subdir-c-files)</span><br><span class="line">include $(BUILD_EXECUTABLE)</span><br></pre></td></tr></table></figure>
<h3 id="编译hello程序"><a href="#编译hello程序" class="headerlink" title="编译hello程序"></a>编译hello程序</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">在AOSP根目录执行以下命令进行编译</span></span><br><span class="line">mmm ./external/hello</span><br><span class="line"><span class="meta">#</span><span class="bash">重新生成system.bin文件</span></span><br><span class="line">make snod</span><br></pre></td></tr></table></figure>
<p>最后重新启动模拟器即可直接在 <code>adb shell</code> 中执行 <code>hello</code> 命令验证</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nicho@PC:~&#x2F;work&#x2F;android$ adb shell</span><br><span class="line">generic_arm64:&#x2F; # hello                                                              </span><br><span class="line">read original value:</span><br><span class="line">0.</span><br><span class="line"></span><br><span class="line">Write value 5 to &#x2F;dev&#x2F;hello.</span><br><span class="line"></span><br><span class="line">Read the value again:</span><br><span class="line">5.</span><br></pre></td></tr></table></figure>
<h2 id="增加硬件抽象层（HAL）模块访问Linux内核驱动程序"><a href="#增加硬件抽象层（HAL）模块访问Linux内核驱动程序" class="headerlink" title="增加硬件抽象层（HAL）模块访问Linux内核驱动程序"></a>增加硬件抽象层（HAL）模块访问Linux内核驱动程序</h2><h3 id="在-android-hardware-libhardware-include-hardware-目录中创建-hello-h-文件。"><a href="#在-android-hardware-libhardware-include-hardware-目录中创建-hello-h-文件。" class="headerlink" title="在 android/hardware/libhardware/include/hardware 目录中创建 hello.h 文件。"></a>在 <code>android/hardware/libhardware/include/hardware</code> 目录中创建 <code>hello.h</code> 文件。</h3><p>内容如下</p>
<figure class="highlight c"><figcaption><span>hello.h</span><a href="/downloads/code/hello-hal/hello.h">view raw</a></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> Android_HELLO_INTERFACE_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ANDROID_HELLO_INTERFACE_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;hardware/hardware.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">__BEGIN_DECLS</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> HELLO_HARDWARE_MODULE_ID <span class="meta-string">&quot;hello&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">hello_module_t</span> {</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">hw_module_t</span> <span class="title">common</span>;</span></span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">hello_device_t</span> {</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">hw_device_t</span> <span class="title">common</span>;</span></span><br><span class="line">    <span class="keyword">int</span> fd;</span><br><span class="line">    <span class="keyword">int</span> (*set_val)(struct <span class="keyword">hello_device_t</span>* dev, <span class="keyword">int</span> val);</span><br><span class="line">    <span class="keyword">int</span> (*get_val)(struct <span class="keyword">hello_device_t</span>* dev, <span class="keyword">int</span>* val);</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line">__END_DECLS</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>
<p>这里按照Android硬件抽象层规范的要求，分别定义模块ID、模块结构体以及硬件接口结构体。在硬件接口结构体中，fd表示设备文件描述符，对应我们将要处理的设备文件”/dev/hello”，set_val和get_val为该HAL对上提供的函数接口。</p>
<h3 id="在-android-hardware-libhardware-modules-hello-目录中创建-hello-c-和-Android-mk-文件。"><a href="#在-android-hardware-libhardware-modules-hello-目录中创建-hello-c-和-Android-mk-文件。" class="headerlink" title="在 android/hardware/libhardware/modules/hello 目录中创建 hello.c 和 Android.mk 文件。"></a>在 <code>android/hardware/libhardware/modules/hello</code> 目录中创建 <code>hello.c</code> 和 <code>Android.mk</code> 文件。</h3><p><code>hello</code> 目录需要手动创建</p>
<p>各文件内容如下</p>
<figure class="highlight c"><figcaption><span>hello.c</span><a href="/downloads/code/hello-hal/hello.c">view raw</a></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;hardware/hardware.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;hardware/hello.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cutils/log.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cutils/atomic.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;android/log.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOGE(...) __android_log_print(ANDROID_LOG_ERROR,<span class="meta-string">&quot;hello_stub&quot;</span>,__VA_ARGS__)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOGI(...) __android_log_print(ANDROID_LOG_INFO,<span class="meta-string">&quot;hello_stub&quot;</span>,__VA_ARGS__)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOG_TAG <span class="meta-string">&quot;HelloStub&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DEVICE_NAME <span class="meta-string">&quot;/dev/hello&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MODULE_NAME <span class="meta-string">&quot;hello&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MODULE_AUTHOR <span class="meta-string">&quot;y041039@gmail.com&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*设备打开和关闭接口*/</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hello_device_open</span><span class="params">(<span class="keyword">const</span> struct <span class="keyword">hw_module_t</span>* <span class="keyword">module</span>, <span class="keyword">const</span> <span class="keyword">char</span>* name, struct <span class="keyword">hw_device_t</span>** device)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hello_device_close</span><span class="params">(struct <span class="keyword">hw_device_t</span>* device)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*设备访问接口*/</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hello_set_val</span><span class="params">(struct <span class="keyword">hello_device_t</span>* dev, <span class="keyword">int</span> val)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hello_get_val</span><span class="params">(struct <span class="keyword">hello_device_t</span>* dev, <span class="keyword">int</span>* val)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*模块方法表*/</span></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">hw_module_methods_t</span> <span class="title">hello_module_methods</span> =</span> {</span><br><span class="line"> open: hello_device_open</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="comment">/*模块实例变量*/</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">hello_module_t</span> <span class="title">HAL_MODULE_INFO_SYM</span> =</span> {</span><br><span class="line"> common: {</span><br><span class="line"> tag: HARDWARE_MODULE_TAG,</span><br><span class="line"> version_major: <span class="number">1</span>,</span><br><span class="line"> version_minor: <span class="number">0</span>,</span><br><span class="line"> id: HELLO_HARDWARE_MODULE_ID,</span><br><span class="line"> name: MODULE_NAME,</span><br><span class="line"> author: MODULE_AUTHOR,</span><br><span class="line"> methods: &amp;hello_module_methods,</span><br><span class="line">}</span><br><span class="line">};</span><br><span class="line"><span class="comment">/* 这里，实例变量名必须为HAL_MODULE_INFO_SYM，tag 也必须为HARDWARE_MODULE_TAG，</span></span><br><span class="line"><span class="comment">这是Android 硬件抽象层规范规定的 */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hello_device_open</span><span class="params">(<span class="keyword">const</span> struct <span class="keyword">hw_module_t</span>* <span class="keyword">module</span>, <span class="keyword">const</span> <span class="keyword">char</span>* name, struct <span class="keyword">hw_device_t</span>** device)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">hello_device_t</span>* <span class="title">dev</span>;</span>dev = (struct <span class="keyword">hello_device_t</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct <span class="keyword">hello_device_t</span>));</span><br><span class="line">    </span><br><span class="line">      <span class="keyword">if</span>(!dev) </span><br><span class="line">      {</span><br><span class="line">        LOGE(<span class="string">&quot;Hello Stub: failed to alloc space&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> -EFAULT;</span><br><span class="line">      }</span><br><span class="line">    </span><br><span class="line">      <span class="built_in">memset</span>(dev, <span class="number">0</span>, <span class="keyword">sizeof</span>(struct <span class="keyword">hello_device_t</span>));</span><br><span class="line">      dev-&gt;common.tag = HARDWARE_DEVICE_TAG;</span><br><span class="line">      dev-&gt;common.version = <span class="number">0</span>;</span><br><span class="line">      dev-&gt;common.<span class="keyword">module</span> = (<span class="keyword">hw_module_t</span>*)<span class="keyword">module</span>;</span><br><span class="line">      dev-&gt;common.close = hello_device_close;</span><br><span class="line">      dev-&gt;set_val = hello_set_val;dev-&gt;get_val = hello_get_val;</span><br><span class="line">    </span><br><span class="line">      <span class="keyword">if</span>((dev-&gt;fd = open(DEVICE_NAME, O_RDWR)) == <span class="number">-1</span>) {</span><br><span class="line">        LOGE(<span class="string">&quot;Hello Stub: failed to open /dev/hello -- %s.&quot;</span>, strerror(errno));<span class="built_in">free</span>(dev);</span><br><span class="line">        <span class="keyword">return</span> -EFAULT;</span><br><span class="line">      }</span><br><span class="line">     </span><br><span class="line">      *device = &amp;(dev-&gt;common);</span><br><span class="line">      LOGI(<span class="string">&quot;Hello Stub: open /dev/hello successfully.&quot;</span>);</span><br><span class="line">     </span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">DEVICE_NAME 定义为&quot;/dev/hello&quot;。由于设备文件是在内核驱动里面通过device_create 创建的，而device_create 创建的设备文</span></span><br><span class="line"><span class="comment">件默认只有root 用户可读写，而hello_device_open 一般是由上层APP 来调用的，这些APP 一般不具有root 权限，这时候就</span></span><br><span class="line"><span class="comment">导致打开设备文件失败：</span></span><br><span class="line"><span class="comment">Hello Stub: failed to open /dev/hello -- Permission denied.</span></span><br><span class="line"><span class="comment">解决办法是类似于Linux 的udev 规则，打开Android 源代码工程目录下，进入到system/core/rootdir 目录，里面有一个名为</span></span><br><span class="line"><span class="comment">uevent.rc 文件，往里面添加一行：</span></span><br><span class="line"><span class="comment">/dev/hello 0666 root root</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hello_device_close</span><span class="params">(struct <span class="keyword">hw_device_t</span>* device)</span> </span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">hello_device_t</span>* <span class="title">hello_device</span> =</span> (struct <span class="keyword">hello_device_t</span>*)device;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(hello_device)</span><br><span class="line">    {</span><br><span class="line">        close(hello_device-&gt;fd);</span><br><span class="line">        <span class="built_in">free</span>(hello_device);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hello_set_val</span><span class="params">(struct <span class="keyword">hello_device_t</span>* dev, <span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    LOGI(<span class="string">&quot;Hello Stub: set value %d to device.&quot;</span>, val);</span><br><span class="line"></span><br><span class="line">    write(dev-&gt;fd, &amp;val, <span class="keyword">sizeof</span>(val));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hello_get_val</span><span class="params">(struct <span class="keyword">hello_device_t</span>* dev, <span class="keyword">int</span>* val)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">if</span>(!val)</span><br><span class="line">    {</span><br><span class="line">        LOGE(<span class="string">&quot;Hello Stub: error val pointer&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> -EFAULT;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    read(dev-&gt;fd, val, <span class="keyword">sizeof</span>(*val));</span><br><span class="line"></span><br><span class="line">    LOGI(<span class="string">&quot;Hello Stub: get value %d from device&quot;</span>, *val);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<figure class="highlight makefile"><figcaption><span>Android.mk</span><a href="/downloads/code/hello-hal/Android.mk">view raw</a></figcaption><table><tr><td class="code"><pre><span class="line">LOCAL_PATH := <span class="variable">$(<span class="built_in">call</span> my-<span class="built_in">dir</span>)</span></span><br><span class="line"><span class="keyword">include</span> <span class="variable">$(CLEAR_VARS)</span></span><br><span class="line"></span><br><span class="line">LOCAL_LDLIBS := -llog</span><br><span class="line"></span><br><span class="line">LOCAL_MODULE_TAGS := optional</span><br><span class="line">LOCAL_PRELINK_MODULE := false</span><br><span class="line">LOCAL_MODULE_RELATIVE_PATH := hw</span><br><span class="line">LOCAL_SHARED_LIBRARIES := liblog</span><br><span class="line">LOCAL_SRC_FILES := hello.c</span><br><span class="line">LOCAL_MODULE := hello.default</span><br><span class="line"><span class="keyword">include</span> <span class="variable">$(BUILD_SHARED_LIBRARY)</span></span><br></pre></td></tr></table></figure>
<p>最后记得在 <code>android/system/core/rootdir/uevent.rc</code> 文件中添加一行，使应用程序有权限访问设备节点</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">/dev/hello 0666 root root</span><br></pre></td></tr></table></figure>
<p>开始编译并重新打包系统镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">回到源码根目录执行</span></span><br><span class="line">mmm hardware/libhardware/moudles/hello</span><br><span class="line">make snod</span><br></pre></td></tr></table></figure>
<p>可以在 <code>out/target/product/generic_arm64/system/lib/hw/</code> 目录中看到有 <code>hello.default.so</code> 生成。这时的 <code>system.img</code> 就包含我们定义的硬件抽象层模块 <code>hello.default</code> 了。虽然我们在Android系统为我们自己的硬件增加了一个硬件抽象层模块，但是现在Java应用程序还不能访问到我们的硬件。还必须编写JNI方法和在Android的Application Frameworks层增加API接口，才能让上层Application访问到硬件。</p>
<h2 id="编写JNI-方法在应用程序框架层提供Java-接口访问硬件"><a href="#编写JNI-方法在应用程序框架层提供Java-接口访问硬件" class="headerlink" title="编写JNI 方法在应用程序框架层提供Java 接口访问硬件"></a>编写JNI 方法在应用程序框架层提供Java 接口访问硬件</h2><h3 id="进入-android-frameworks-base-services-core-jni-目录创建-com-android-server-HelloService-cpp-文件"><a href="#进入-android-frameworks-base-services-core-jni-目录创建-com-android-server-HelloService-cpp-文件" class="headerlink" title="进入 android/frameworks/base/services/core/jni 目录创建 com_android_server_HelloService.cpp 文件"></a>进入 <code>android/frameworks/base/services/core/jni</code> 目录创建 <code>com_android_server_HelloService.cpp</code> 文件</h3><p>在com_android_server_HelloService.cpp文件中，实现JNI方法。注意文件的命令方法，com_android_server前缀表示的是包名，表示硬件服务HelloService是放在frameworks/base/services/java目录下的com/android/server目录的，即存在一个命令为com.android.server.HelloService的类。这里，我们暂时略去HelloService类的描述，在下一篇文章中，我们将回到HelloService类来。简单地说，HelloService是一个提供Java接口的硬件访问服务类。内容如下</p>
<figure class="highlight cpp"><figcaption><span>com_android_server_HelloService.cpp</span><a href="/downloads/code/hello-jni/com_android_server_HelloService.cpp">view raw</a></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;jni.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;JNIHelp.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;android_runtime/AndroidRuntime.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utils/misc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utils/Log.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;hardware/hardware.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;hardware/hello.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;android/log.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOGE(...) __android_log_print(ANDROID_LOG_ERROR,<span class="meta-string">&quot;hello_stub&quot;</span>,__VA_ARGS__)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOGI(...) __android_log_print(ANDROID_LOG_INFO,<span class="meta-string">&quot;hello_stub&quot;</span>,__VA_ARGS__)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//#define LOG_TAG &quot;HelloService&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> android</span><br><span class="line">{</span><br><span class="line">    <span class="comment">/*在硬件抽象层中定义的硬件访问结构体，参考&lt;hardware/hello.h&gt;*/</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">hello_device_t</span>* <span class="title">hello_device</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">/*通过硬件抽象层定义的硬件访问接口设置硬件寄存器val 的值*/</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">hello_setVal</span><span class="params">(JNIEnv* env, jobject clazz, jint value)</span> </span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="keyword">int</span> val = value;</span><br><span class="line">        <span class="built_in">LOGI</span>(<span class="string">&quot;Hello JNI: set value %d to device.&quot;</span>, val);</span><br><span class="line">        <span class="keyword">if</span>(!hello_device)</span><br><span class="line">        {</span><br><span class="line">            <span class="built_in">LOGI</span>(<span class="string">&quot;Hello JNI: device is not open.&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        hello_device-&gt;<span class="built_in">set_val</span>(hello_device, val);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*通过硬件抽象层定义的硬件访问接口读取硬件寄存器val 的值*/</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> jint <span class="title">hello_getVal</span><span class="params">(JNIEnv* env, jobject clazz)</span> </span>{</span><br><span class="line">            <span class="keyword">int</span> val = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span>(!hello_device)</span><br><span class="line">            {</span><br><span class="line">                <span class="built_in">LOGI</span>(<span class="string">&quot;Hello JNI: device is not open.&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> val;</span><br><span class="line">            }</span><br><span class="line">            hello_device-&gt;<span class="built_in">get_val</span>(hello_device, &amp;val);</span><br><span class="line">        </span><br><span class="line">            <span class="built_in">LOGI</span>(<span class="string">&quot;Hello JNI: get value %d from device.&quot;</span>, val);</span><br><span class="line">        </span><br><span class="line">            <span class="keyword">return</span> val;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*通过硬件抽象层定义的硬件模块打开接口打开硬件设备*/</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">hello_device_open</span><span class="params">(<span class="keyword">const</span> <span class="keyword">hw_module_t</span>* <span class="keyword">module</span>, struct <span class="keyword">hello_device_t</span>** device)</span> </span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">module</span>-&gt;methods-&gt;<span class="built_in">open</span>(<span class="keyword">module</span>, HELLO_HARDWARE_MODULE_ID, (struct <span class="keyword">hw_device_t</span>**)device);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*通过硬件模块ID 来加载指定的硬件抽象层模块并打开硬件*/</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> jboolean <span class="title">hello_init</span><span class="params">(JNIEnv* env, jclass clazz)</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="keyword">hello_module_t</span>* <span class="keyword">module</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">LOGI</span>(<span class="string">&quot;Hello JNI: initializing......&quot;</span>);</span><br><span class="line">           </span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">hw_get_module</span>(HELLO_HARDWARE_MODULE_ID, (<span class="keyword">const</span> struct <span class="keyword">hw_module_t</span>**)&amp;<span class="keyword">module</span>) == <span class="number">0</span>) </span><br><span class="line">            {</span><br><span class="line">                <span class="built_in">LOGI</span>(<span class="string">&quot;Hello JNI: hello Stub found.&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">hello_device_open</span>(&amp;(<span class="keyword">module</span>-&gt;common), &amp;hello_device) == <span class="number">0</span>)</span><br><span class="line">                {</span><br><span class="line">                    <span class="built_in">LOGI</span>(<span class="string">&quot;Hello JNI: hello device is open.&quot;</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                }</span><br><span class="line">        </span><br><span class="line">                <span class="built_in">LOGE</span>(<span class="string">&quot;Hello JNI: failed to open hello device.&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="built_in">LOGE</span>(<span class="string">&quot;Hello JNI: failed to get hello stub module.&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        }</span><br><span class="line">    </span><br><span class="line">          <span class="comment">/*JNI 方法表*/</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">const</span> JNINativeMethod method_table[] = </span><br><span class="line">        {</span><br><span class="line">            {<span class="string">&quot;init_native&quot;</span>, <span class="string">&quot;()Z&quot;</span>, (<span class="keyword">void</span>*)hello_init},</span><br><span class="line">            {<span class="string">&quot;setVal_native&quot;</span>, <span class="string">&quot;(I)V&quot;</span>, (<span class="keyword">void</span>*)hello_setVal},</span><br><span class="line">            {<span class="string">&quot;getVal_native&quot;</span>, <span class="string">&quot;()I&quot;</span>, (<span class="keyword">void</span>*)hello_getVal},</span><br><span class="line">        };</span><br><span class="line"></span><br><span class="line">       <span class="comment">/*注册JNI 方法*/</span></span><br><span class="line">       <span class="function"><span class="keyword">int</span> <span class="title">register_android_server_HelloService</span><span class="params">(JNIEnv *env)</span></span></span><br><span class="line"><span class="function">       </span>{</span><br><span class="line">           <span class="keyword">return</span> <span class="built_in">jniRegisterNativeMethods</span>(env, <span class="string">&quot;com/android/server/HelloService&quot;</span>, method_table, <span class="built_in">NELEM</span>(method_table));</span><br><span class="line">       }</span><br><span class="line">   </span><br><span class="line">};</span><br></pre></td></tr></table></figure>
<p>修改同目录的 <code>onload.cpp</code> 文件</p>
<figure class="highlight cpp"><figcaption><span>onload.cpp</span><a href="/downloads/code/hello-jni/onload.cpp">view raw</a></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;JNIHelp.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;jni.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;utils/Log.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;utils/misc.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> android {</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">register_android_server_HelloService</span><span class="params">(JNIEnv* env)</span></span>; <span class="comment">//新增加的一行</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">register_android_server_ActivityManagerService</span><span class="params">(JNIEnv* env)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">register_android_server_AlarmManagerService</span><span class="params">(JNIEnv* env)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">register_android_server_AssetAtlasService</span><span class="params">(JNIEnv* env)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">register_android_server_BatteryStatsService</span><span class="params">(JNIEnv* env)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">register_android_server_ConsumerIrService</span><span class="params">(JNIEnv *env)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">register_android_server_InputApplicationHandle</span><span class="params">(JNIEnv* env)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">register_android_server_InputWindowHandle</span><span class="params">(JNIEnv* env)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">register_android_server_InputManager</span><span class="params">(JNIEnv* env)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">register_android_server_LightsService</span><span class="params">(JNIEnv* env)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">register_android_server_PowerManagerService</span><span class="params">(JNIEnv* env)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">register_android_server_SerialService</span><span class="params">(JNIEnv* env)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">register_android_server_SystemServer</span><span class="params">(JNIEnv* env)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">register_android_server_UsbDeviceManager</span><span class="params">(JNIEnv* env)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">register_android_server_UsbMidiDevice</span><span class="params">(JNIEnv* env)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">register_android_server_UsbHostManager</span><span class="params">(JNIEnv* env)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">register_android_server_vr_VrManagerService</span><span class="params">(JNIEnv* env)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">register_android_server_VibratorService</span><span class="params">(JNIEnv* env)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">register_android_server_location_GnssLocationProvider</span><span class="params">(JNIEnv* env)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">register_android_server_location_FlpHardwareProvider</span><span class="params">(JNIEnv* env)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">register_android_server_connectivity_Vpn</span><span class="params">(JNIEnv* env)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">register_android_server_hdmi_HdmiCecController</span><span class="params">(JNIEnv* env)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">register_android_server_tv_TvUinputBridge</span><span class="params">(JNIEnv* env)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">register_android_server_tv_TvInputHal</span><span class="params">(JNIEnv* env)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">register_android_server_PersistentDataBlockService</span><span class="params">(JNIEnv* env)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">register_android_server_Watchdog</span><span class="params">(JNIEnv* env)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">register_android_server_HardwarePropertiesManagerService</span><span class="params">(JNIEnv* env)</span></span>;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> android;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="function">jint <span class="title">JNI_OnLoad</span><span class="params">(JavaVM* vm, <span class="keyword">void</span>* <span class="comment">/* reserved */</span>)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    JNIEnv* env = <span class="literal">NULL</span>;</span><br><span class="line">    jint result = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (vm-&gt;<span class="built_in">GetEnv</span>((<span class="keyword">void</span>**) &amp;env, JNI_VERSION_1_4) != JNI_OK) {</span><br><span class="line">        <span class="built_in">ALOGE</span>(<span class="string">&quot;GetEnv failed!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">ALOG_ASSERT</span>(env, <span class="string">&quot;Could not retrieve the env!&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">register_android_server_HelloService</span>(env); <span class="comment">//新增加的一行</span></span><br><span class="line">    <span class="built_in">register_android_server_ActivityManagerService</span>(env);</span><br><span class="line">    <span class="built_in">register_android_server_PowerManagerService</span>(env);</span><br><span class="line">    <span class="built_in">register_android_server_SerialService</span>(env);</span><br><span class="line">    <span class="built_in">register_android_server_InputApplicationHandle</span>(env);</span><br><span class="line">    <span class="built_in">register_android_server_InputWindowHandle</span>(env);</span><br></pre></td></tr></table></figure>
<p>修改同目录下的 <code>Android.mk</code> 文件</p>
<figure class="highlight makefile"><figcaption><span>Android.mk</span><a href="/downloads/code/hello-jni/Android.mk">view raw</a></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">ifneq</span> (<span class="variable">$(ENABLE_CPUSETS)</span>,)</span><br><span class="line"><span class="keyword">ifneq</span> (<span class="variable">$(ENABLE_SCHED_BOOST)</span>,)</span><br><span class="line">LOCAL_CFLAGS += -DUSE_SCHED_BOOST</span><br><span class="line"><span class="keyword">endif</span></span><br><span class="line"><span class="keyword">endif</span></span><br><span class="line"></span><br><span class="line">LOCAL_SRC_FILES += \</span><br><span class="line">    <span class="variable">$(LOCAL_REL_DIR)</span>/com_android_server_HelloService.cpp \  <span class="comment">#新添加的一行</span></span><br><span class="line">    <span class="variable">$(LOCAL_REL_DIR)</span>/com_android_server_AlarmManagerService.cpp \</span><br><span class="line">    <span class="variable">$(LOCAL_REL_DIR)</span>/com_android_server_am_BatteryStatsService.cpp \</span><br><span class="line">    <span class="variable">$(LOCAL_REL_DIR)</span>/com_android_server_am_ActivityManagerService.cpp \</span><br><span class="line">    <span class="variable">$(LOCAL_REL_DIR)</span>/com_android_server_AssetAtlasService.cpp \</span><br><span class="line">    <span class="variable">$(LOCAL_REL_DIR)</span>/com_android_server_connectivity_Vpn.cpp \</span><br></pre></td></tr></table></figure>
<h3 id="开始编译并重新打包系统镜像"><a href="#开始编译并重新打包系统镜像" class="headerlink" title="开始编译并重新打包系统镜像"></a>开始编译并重新打包系统镜像</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">回到源码根目录执行</span></span><br><span class="line">mmm frameworks/base/services/core/jni</span><br><span class="line">make snod</span><br></pre></td></tr></table></figure>
<p>这样，重新打包的system.img镜像文件就包含刚才编写的JNI方法，也就是可以通过Android系统的Application Frameworks层提供的硬件服务HelloService来调用这些JNI方法，进而调用低层的硬件抽象层接口去访问硬件。</p>
<h2 id="在应用程序框架层增加硬件服务接口"><a href="#在应用程序框架层增加硬件服务接口" class="headerlink" title="在应用程序框架层增加硬件服务接口"></a>在应用程序框架层增加硬件服务接口</h2><h3 id="首先定义通信接口"><a href="#首先定义通信接口" class="headerlink" title="首先定义通信接口"></a>首先定义通信接口</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nicho@PC:~/work/android$ cd frameworks/base/core/java/android/os/</span><br><span class="line">nicho@PC:~/work/android/frameworks/base/core/java/android/os$ vi IHelloService.aidl </span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><figcaption><span>IHelloService.aidl</span><a href="/downloads/code/hello-hard/IHelloService.aidl">view raw</a></figcaption><table><tr><td class="code"><pre><span class="line">package android.os;</span><br><span class="line"></span><br><span class="line">interface IHelloService </span><br><span class="line">{</span><br><span class="line">    void setVal(int val);</span><br><span class="line">    int getVal();</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p>修改 <code>frameworks/base目录，打开Android.mk文件，修改LOCAL_SRC_FILES变量的值，增加IHelloService.aidl源文件</code> </p>
<figure class="highlight makefile"><figcaption><span>Android.mk</span><a href="/downloads/code/hello-hard/Android.mk">view raw</a></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">## READ ME: ########################################################</span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="comment">## When updating this list of aidl files, consider if that aidl is</span></span><br><span class="line"><span class="comment">## part of the SDK API.  If it is, also add it to the list below that</span></span><br><span class="line"><span class="comment">## is preprocessed and distributed with the SDK.  This list should</span></span><br><span class="line"><span class="comment">## not contain any aidl files for parcelables, but the one below should</span></span><br><span class="line"><span class="comment">## if you intend for 3rd parties to be able to send those objects</span></span><br><span class="line"><span class="comment">## across process boundaries.</span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="comment">## READ ME: ########################################################</span></span><br><span class="line">LOCAL_SRC_FILES += \</span><br><span class="line">	core/java/android/accessibilityservice/IAccessibilityServiceConnection.aidl \</span><br><span class="line">	core/java/android/accessibilityservice/IAccessibilityServiceClient.aidl \</span><br><span class="line">	core/java/android/accounts/IAccountManager.aidl \</span><br></pre></td></tr></table></figure>
<figure class="highlight makefile"><figcaption><span>Android.mk</span><a href="/downloads/code/hello-hard/Android.mk">view raw</a></figcaption><table><tr><td class="code"><pre><span class="line">core/java/android/os/IUserManager.aidl \</span><br><span class="line">	core/java/android/os/IVibratorService.aidl \</span><br><span class="line">	core/java/android/os/IHelloService.aidl \  <span class="comment"># 添加的一行</span></span><br></pre></td></tr></table></figure>
<h3 id="编译IHelloService-aidl接口"><a href="#编译IHelloService-aidl接口" class="headerlink" title="编译IHelloService.aidl接口"></a>编译IHelloService.aidl接口</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nicho@PC:~/work/android$ mmm frameworks/base/</span><br></pre></td></tr></table></figure>
<p>这样，就会根据IHelloService.aidl生成相应的IHelloService.Stub接口。</p>
<p>接下来在 <code>frameworks/base/services/java/com/android/server</code> 目录中添加 <code>HelloService.java</code> 文件</p>
<figure class="highlight java"><figcaption><span>HelloService.java</span><a href="/downloads/code/hello-hard/HelloService.java">view raw</a></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.android.server;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.os.IHelloService;</span><br><span class="line"><span class="keyword">import</span> android.util.Slog;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloService</span> <span class="keyword">extends</span> <span class="title">IHelloService</span>.<span class="title">Stub</span> </span>{</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">&quot;HelloService&quot;</span>;</span><br><span class="line"></span><br><span class="line">HelloService() </span><br><span class="line">{</span><br><span class="line">    System.out.println(<span class="string">&quot;frameworks/base/services/java/com/android/server/HelloService.java HelloService()&quot;</span>);</span><br><span class="line">     init_native();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setVal</span><span class="params">(<span class="keyword">int</span> val)</span> </span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    System.out.println(<span class="string">&quot;frameworks/base/services/java/com/android/server/HelloService.java setVal()&quot;</span>);</span><br><span class="line">    setVal_native(val);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getVal</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    System.out.println(<span class="string">&quot;frameworks/base/services/java/com/android/server/HelloService.java getVal()&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> getVal_native();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">boolean</span> <span class="title">init_native</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">setVal_native</span><span class="params">(<span class="keyword">int</span> val)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">int</span> <span class="title">getVal_native</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">};</span><br></pre></td></tr></table></figure>
<p>修改同目录的 <code>SystemServer.java</code> 文件</p>
<figure class="highlight java"><figcaption><span>SystemServer.java</span><a href="/downloads/code/hello-hard/SystemServer.java">view raw</a></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">// initialization.</span></span><br><span class="line">        mActivityManagerService.systemReady(<span class="keyword">new</span> Runnable() {</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="comment">/////////////////添加的内容</span></span><br><span class="line">                <span class="keyword">try</span> {</span><br><span class="line">                    Slog.i(TAG, <span class="string">&quot;Hello Service&quot;</span>);</span><br><span class="line">                    ServiceManager.addService(<span class="string">&quot;hello&quot;</span>, <span class="keyword">new</span> HelloService());</span><br><span class="line">                } <span class="keyword">catch</span> (Throwable e) {</span><br><span class="line">                    Slog.i(TAG, <span class="string">&quot;Failure starting Hello Service&quot;</span>, e);</span><br><span class="line">                }</span><br><span class="line"><span class="comment">/////////////////添加的内容到此为止</span></span><br><span class="line"></span><br><span class="line">                Slog.i(TAG, <span class="string">&quot;Making services ready&quot;</span>);</span><br><span class="line">                mSystemServiceManager.startBootPhase(</span><br><span class="line">                        SystemService.PHASE_ACTIVITY_MANAGER_READY);</span><br></pre></td></tr></table></figure>
<h3 id="开始编译并重新打包系统镜像-1"><a href="#开始编译并重新打包系统镜像-1" class="headerlink" title="开始编译并重新打包系统镜像"></a>开始编译并重新打包系统镜像</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">回到源码根目录执行</span></span><br><span class="line">mmm frameworks/base/services</span><br><span class="line">make snod</span><br></pre></td></tr></table></figure>
<p> 这样，重新打包后的system.img系统镜像文件就在Application Frameworks层中包含了自定义的硬件服务HelloService，并且会在系统启动的时候，自动加载HelloService。这时，应用程序就可以通过Java接口来访问Hello硬件服务。</p>
<h2 id="内置Java应用程序测试Application-Frameworks层的硬件服务"><a href="#内置Java应用程序测试Application-Frameworks层的硬件服务" class="headerlink" title="内置Java应用程序测试Application Frameworks层的硬件服务"></a>内置Java应用程序测试Application Frameworks层的硬件服务</h2><p>原始教程是通过Android Studio创建工程项目的，这里笔者图了个方便直接在命令行中创建了。下面我们就可以开始创建我们第一个HelloAndroid工程了。在~/workandroid/external下建立helloandroid目录，进入helloandroid目录，执行下面命令（target 参数接的数字要与AOSP的版本对应）：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd ~/work/android/external</span><br><span class="line">mkdir helloandroid &amp;&amp; cd helloandroid</span><br><span class="line">android create project --name helloandroid --activity HelloAndroid --path ./ --package com.examples.helloandroid --target 1</span><br></pre></td></tr></table></figure>
<p>要修改的文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">helloandroid&#x2F;src&#x2F;com&#x2F;examples&#x2F;helloandroid&#x2F;HelloAndroid.java </span><br><span class="line">helloandroid&#x2F;res&#x2F;layout&#x2F;main.xml </span><br><span class="line">helloandroid&#x2F;AndroidManifest.xml </span><br><span class="line">helloandroid&#x2F;Android.mk </span><br></pre></td></tr></table></figure>
<p>文件内容如下</p>
<figure class="highlight java"><figcaption><span>HelloAndroid.java</span><a href="/downloads/code/hello-app/HelloAndroid.java">view raw</a></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.examples.helloandroid;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.examples.helloandroid.R;</span><br><span class="line"><span class="keyword">import</span> android.app.Activity;</span><br><span class="line"><span class="keyword">import</span> android.os.ServiceManager;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.os.IHelloService;</span><br><span class="line"><span class="keyword">import</span> android.os.RemoteException;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.view.View.OnClickListener;</span><br><span class="line"><span class="keyword">import</span> android.widget.Button;</span><br><span class="line"><span class="keyword">import</span> android.widget.EditText;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloAndroid</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="keyword">implements</span> <span class="title">OnClickListener</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String LOG_TAG = <span class="string">&quot;shy.luo.renju.Hello&quot;</span>;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">private</span> IHelloService helloService = <span class="keyword">null</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> EditText valueText = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> Button readButton = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> Button writeButton = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> Button clearButton = <span class="keyword">null</span>;</span><br><span class="line">     </span><br><span class="line"> <span class="comment">/** Called when the activity is first created. */</span></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>{</span><br><span class="line"> <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line"> setContentView(R.layout.main);</span><br><span class="line"> System.out.println(<span class="string">&quot;Hello Started&quot;</span>);</span><br><span class="line">    helloService = IHelloService.Stub.asInterface(</span><br><span class="line">        ServiceManager.getService(<span class="string">&quot;hello&quot;</span>));</span><br><span class="line">  </span><br><span class="line"> valueText = (EditText)findViewById(R.id.edit_value);</span><br><span class="line"> readButton = (Button)findViewById(R.id.button_read);</span><br><span class="line"> writeButton = (Button)findViewById(R.id.button_write);</span><br><span class="line"> clearButton = (Button)findViewById(R.id.button_clear);</span><br><span class="line"> </span><br><span class="line">    readButton.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">    writeButton.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">    clearButton.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">  </span><br><span class="line"> Log.i(LOG_TAG, <span class="string">&quot;Hello Activity Created&quot;</span>);</span><br><span class="line"> }</span><br><span class="line">  </span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(v.equals(readButton)) {</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="keyword">int</span> val = helloService.getVal();</span><br><span class="line">            String text = String.valueOf(val);</span><br><span class="line">            valueText.setText(text);</span><br><span class="line">        } <span class="keyword">catch</span> (RemoteException e) {</span><br><span class="line">            Log.e(LOG_TAG, <span class="string">&quot;Remote Exception while reading value from device.&quot;</span>);</span><br><span class="line">        }       </span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(v.equals(writeButton)) {</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            String text = valueText.getText().toString();</span><br><span class="line">            <span class="keyword">int</span> val = Integer.parseInt(text);</span><br><span class="line">            helloService.setVal(val);</span><br><span class="line">        } <span class="keyword">catch</span> (RemoteException e) {</span><br><span class="line">            Log.e(LOG_TAG, <span class="string">&quot;Remote Exception while writing value to device.&quot;</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(v.equals(clearButton)) {</span><br><span class="line">        String text = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        valueText.setText(text);</span><br><span class="line">    }</span><br><span class="line"> }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><figcaption><span>main.xml</span><a href="/downloads/code/hello-app/main.xml">view raw</a></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;fill_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;fill_parent&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">&lt;LinearLayout</span><br><span class="line"> android:layout_width=&quot;fill_parent&quot;</span><br><span class="line"> android:layout_height=&quot;wrap_content&quot;</span><br><span class="line"> android:orientation=&quot;vertical&quot;</span><br><span class="line"> android:gravity=&quot;center&quot;&gt;</span><br><span class="line"> <span class="tag">&lt;<span class="name">TextView</span> </span></span><br><span class="line"><span class="tag"> <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:text</span>=<span class="string">&quot;@string/value&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">TextView</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">EditText</span> </span></span><br><span class="line"><span class="tag"> <span class="attr">android:layout_width</span>=<span class="string">&quot;fill_parent&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:id</span>=<span class="string">&quot;@+id/edit_value&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:hint</span>=<span class="string">&quot;@string/hint&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">EditText</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"> &lt;LinearLayout</span><br><span class="line"> android:layout_width=&quot;fill_parent&quot;</span><br><span class="line"> android:layout_height=&quot;wrap_content&quot;</span><br><span class="line"> android:orientation=&quot;horizontal&quot;</span><br><span class="line"> android:gravity=&quot;center&quot;&gt;</span><br><span class="line"> <span class="tag">&lt;<span class="name">Button</span> </span></span><br><span class="line"><span class="tag"> <span class="attr">android:id</span>=<span class="string">&quot;@+id/button_read&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:text</span>=<span class="string">&quot;@string/read&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">Button</span> </span></span><br><span class="line"><span class="tag"> <span class="attr">android:id</span>=<span class="string">&quot;@+id/button_write&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:text</span>=<span class="string">&quot;@string/write&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">Button</span> </span></span><br><span class="line"><span class="tag"> <span class="attr">android:id</span>=<span class="string">&quot;@+id/button_clear&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:text</span>=<span class="string">&quot;@string/clear&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><figcaption><span>AndroidManifest.xml</span><a href="/downloads/code/hello-app/AndroidManifest.xml">view raw</a></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">package</span>=<span class="string">&quot;com.examples.helloandroid&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:versionCode</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:versionName</span>=<span class="string">&quot;1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">application</span> <span class="attr">android:label</span>=<span class="string">&quot;@string/app_name&quot;</span> <span class="attr">android:icon</span>=<span class="string">&quot;@drawable/ic_launcher&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">&quot;HelloAndroid&quot;</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">android:label</span>=<span class="string">&quot;@string/app_name&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.action.MAIN&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.category.LAUNCHER&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight makefile"><figcaption><span>Android.mk</span><a href="/downloads/code/hello-app/Android.mk">view raw</a></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># This Android.mk is empty, and &gt;&gt; does not build subdirectories &lt;&lt;.</span></span><br><span class="line"><span class="comment"># Individual packages in experimental/ must be built directly with &quot;mmm&quot;.</span></span><br><span class="line">LOCAL_PATH:= <span class="variable">$(<span class="built_in">call</span> my-<span class="built_in">dir</span>)</span></span><br><span class="line"><span class="keyword">include</span> <span class="variable">$(CLEAR_VARS)</span></span><br><span class="line">LOCAL_MODULE_TAGS := optional</span><br><span class="line">LOCAL_SRC_FILES := <span class="variable">$(<span class="built_in">call</span> all-subdir-java-files)</span></span><br><span class="line">LOCAL_PACKAGE_NAME := Hello</span><br><span class="line"><span class="keyword">include</span> <span class="variable">$(BUILD_PACKAGE)</span></span><br></pre></td></tr></table></figure>
<h3 id="编译并运行模拟器进行验证"><a href="#编译并运行模拟器进行验证" class="headerlink" title="编译并运行模拟器进行验证"></a>编译并运行模拟器进行验证</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">回到源码根目录执行</span></span><br><span class="line">nicho@PC:~/work/android$ mmm packages/experimental/helloandroid</span><br><span class="line">make snod</span><br><span class="line"><span class="meta">#</span><span class="bash"> 运行安卓模拟器，指定编译好的文件</span></span><br><span class="line">emulator -show-kernel -avd helloandroid -kernel ../kernel/goldfish/arch/arm64/boot/Image -system ./out/target/product/generic_arm64/system.img -data ./out/target/product/generic_arm64/userdata.img -ramdisk ./out/target/product/generic_arm64/ramdisk.img</span><br></pre></td></tr></table></figure>
<p>至此，也就完整地学习了在Android的Linux内核空间添加硬件驱动程序、在Android的硬件抽象层添加硬件接口、在Android的Application Frameworks层提供硬件服务以及在Android的应用层调用硬件服务的整个过程。</p>
<hr>
<h2 id="参考内容"><a href="#参考内容" class="headerlink" title="参考内容"></a>参考内容</h2><p><a href="https://www.linuxidc.com/Linux/2011-07/38979.htm">Android硬件抽象层（HAL）概要介绍和学习计划</a> </p>
<p><a href="https://www.cnblogs.com/Free-Thinker/p/4142003.html">（三）在Ubuntu上为Android增加硬件抽象层（HAL）模块访问Linux内核驱动程序</a>  原始链接已经打不开了，重新找了一个</p>
<p>1.下载源码 </p>
<p><a href="https://blog.csdn.net/windcake/article/details/79349057">在Ubuntu16.04上下载并编译Android源代码</a></p>
<p><a href="https://www.jianshu.com/p/a3bf09abb8fc">国内不翻墙下载Android 源代码</a></p>
<p><a href="https://blog.csdn.net/qq_36837858/article/details/107931549">Ubuntu下载编译android7.0源码教程从安装到编译</a></p>
<p><a href="https://blog.csdn.net/u010164190/article/details/78332484">repo forall -c 用法</a></p>
<p>2.配置环境</p>
<p><del><a href="https://www.wmzhe.com/soft-70404.html">下载jdk1.7</a></del></p>
<p><del><a href="https://blog.csdn.net/pxmxx/article/details/79860421">配置jdk的环境变量</a></del></p>
<p><del><a href="https://www.cnblogs.com/imoon22/p/13903327.html">用update-alternatives管理java版本</a></del></p>
<p><del><a href="https://www.jianshu.com/p/49dab66c1783">ubuntu安装和卸载jdk8</a></del></p>
<p><del><a href="https://blog.csdn.net/qq_33160790/article/details/78252150">ubuntu16 安装openjdk java1.7</a></del></p>
<p><a href="https://tieba.baidu.com/p/4515033977">最终是使用open jdk8 进行编译</a></p>
<p>重新添加了 <code>libwxgtk2.8-dev</code> 的ppa</p>
<p><a href="https://blog.csdn.net/chenxia1902/article/details/100716384">安装其他依赖</a></p>
<p>4.编译AOSP项目</p>
<p><a href="https://blog.csdn.net/lookinthefog/article/details/98677773">Android6.0源码编译</a></p>
<p>使用openjdk1.8 编译android7 到37%出现严重错误</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[ 34% 16828/48845] Ensure Jack server is installed and started</span><br><span class="line">FAILED: /bin/bash -c &quot;(prebuilts/sdk/tools/jack-admin install-server prebuilts/sdk/tools/jack-launcher.jar prebuilts/sdk/tools/jack-server-4.8.ALPHA.jar  2&gt;&amp;1 || (exit 0) ) &amp;&amp; (JACK_SERVER_VM_ARGUMENTS=\&quot;-Dfile.encoding=UTF-8 -XX:+TieredCompilation\&quot; prebuilts/sdk/tools/jack-admin start-server 2&gt;&amp;1 || exit 0 ) &amp;&amp; (prebuilts/sdk/tools/jack-admin update server prebuilts/sdk/tools/jack-server-4.8.ALPHA.jar 4.8.ALPHA 2&gt;&amp;1 || exit 0 ) &amp;&amp; (prebuilts/sdk/tools/jack-admin update jack prebuilts/sdk/tools/jacks/jack-2.28.RELEASE.jar 2.28.RELEASE || exit 47; prebuilts/sdk/tools/jack-admin update jack prebuilts/sdk/tools/jacks/jack-3.36.CANDIDATE.jar 3.36.CANDIDATE || exit 47; prebuilts/sdk/tools/jack-admin update jack prebuilts/sdk/tools/jacks/jack-4.7.BETA.jar 4.7.BETA || exit 47 )&quot;</span><br><span class="line">Jack server already installed in &quot;/home/nicho/.jack-server&quot;</span><br><span class="line">Communication error with Jack server (35), try &#x27;jack-diagnose&#x27; or see Jack server log</span><br><span class="line">SSL error when connecting to the Jack server. Try &#x27;jack-diagnose&#x27;</span><br><span class="line">SSL error when connecting to the Jack server. Try &#x27;jack-diagnose&#x27;</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[ 37% 18114/48845] target thumb C: lib...rnal/icu/icu4c/source/i18n/decNumber.c</span><br><span class="line">ninja: build stopped: subcommand failed.</span><br><span class="line">build/core/ninja.mk:148: recipe for target &#x27;ninja_wrapper&#x27; failed</span><br><span class="line">make: *** [ninja_wrapper] Error 1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">### make failed to build some targets (01:42:20 (hh:mm:ss)) ####</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><a href="https://blog.csdn.net/zjy764219923/article/details/105612760">编译报错：build/core/ninja.mk:148: recipe for target ‘ninja_wrapper’ failed</a> </p>
<p><a href="https://blog.csdn.net/pcsxk/article/details/52594223">AOSP中make clean与make clobber的区别</a> </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make clean</span><br><span class="line"></span><br><span class="line">它会删除本次设置所生成的所有的output与中间文件。</span><br><span class="line">等价于指令</span><br><span class="line"></span><br><span class="line">rm -rf $OUT</span><br><span class="line"></span><br><span class="line">    1</span><br><span class="line"></span><br><span class="line">    这里的$OUT指的是out/target/product/[product_name]</span><br><span class="line"></span><br><span class="line">make clobber</span><br><span class="line"></span><br><span class="line">它会删除所有设置所生成的所有的output与中间文件。</span><br><span class="line">等价于指令</span><br><span class="line"></span><br><span class="line">rm -rf out/</span><br><span class="line"></span><br><span class="line">    1</span><br><span class="line"></span><br><span class="line">    可以看到，make clobber的严格在于它把整个out目录都删除了。</span><br></pre></td></tr></table></figure>
<p>5.下载编译安装 Android kernel</p>
<p><a href="https://source.android.com/setup/build/building-kernels-deprecated">Building Kernels Manually-需要通过外网访问</a>这个文档比较全，在构建安卓系统的过程中可以全程使用</p>
<p><a href="https://blog.csdn.net/mandagod/article/details/47449335">Android源代码Linux Kernel下载及编译</a> </p>
<p><a href="https://www.drunkdream.com/2017/12/06/build-android-emulator-kernel/">编译可用的Android模拟器ranchu内核</a> </p>
<p>6.编写Linux 3.4.67的字符驱动</p>
<blockquote>
<p><strong>Learn How to Write a Driver for Linux 3.x With The Linux Driver Template</strong></p>
<p>A Linux Driver Template (LDT) has been published to help new Linux kernel developers writing hardware device drivers.</p>
<p>Constantine Shulyupin <a href="https://lkml.org/lkml/2012/11/13/531">posted the Linux Driver Template</a> (LDT) on the Linux mailing list in order to merge it into the mainline  Linux kernel. The code can be used as as a starting point for new  drivers, and shows how to use several Linux facilities such as module,  platform driver, file operations (read/write, mmap, ioctl, blocking and  nonblocking mode, polling), kfifo, completion, interrupt, tasklet, work, kthread, timer, simple misc device,<br> multiple char devices, Device Model, configfs, UART, hardware loopback, software loopback and ftracer.</p>
<p>This sample has been added to other device drivers samples in <a href="http://elinux.org/Device_drivers">eLinux.org</a>. And if you want to learn further there’s always the Linux driver bible: “<a href="https://lwn.net/Kernel/LDD3/">Linux Device Drivers, Third Edition</a>” which can be downloaded for free as PDF, although it’s for 2.6.10 kernel and many parts may not be up-to date.</p>
<p>以上内容摘自: <a href="https://www.cnx-software.com/2012/11/14/learn-how-to-write-a-driver-for-linux-3-x-with-the-linux-driver-template/">https://www.cnx-software.com/2012/11/14/learn-how-to-write-a-driver-for-linux-3-x-with-the-linux-driver-template/</a></p>
</blockquote>
<p><a href="https://www.cnblogs.com/y041039/archive/2013/05/22/3092774.html">Android 驱动之旅： 第一章  在Android 内核源代码工程中编写硬件驱动程序</a> </p>
<p><a href="https://www.cnblogs.com/y041039/archive/2013/05/22/3092868.html">Android 驱动之旅： 第二章 — 在Android 系统中增加C 可执行程序来访问硬件驱动程序</a></p>
<p><a href="https://www.cnblogs.com/y041039/archive/2013/05/23/3094579.html">Android 驱动之旅： 第三章 硬件抽象层(HAL)增加接口模块访问硬件驱动程序</a> </p>
<p><a href="https://blog.csdn.net/weixin_45932426/article/details/106194139">LOCAL_MODULE_PATH与LOCAL_MODULE_RELATIVE_PATH区别</a> </p>
<p><a href="https://blog.csdn.net/zzf405788549/article/details/104610089">Android7.0 APP调用驱动流程 JNI层开发流程</a></p>
<p><a href="https://blog.csdn.net/luoshengyang/article/details/6575988">在Ubuntu为Android硬件抽象层（HAL）模块编写JNI方法提供Java访问硬件服务接口</a></p>
<p><a href="https://developer.aliyun.com/article/240569">Android HAL(硬件抽象层)介绍以及调用</a> </p>
<p><a href="https://www.cnblogs.com/simaben/p/3446378.html">ubuntu下使用命令行创建一个android项目</a> </p>
<p><a href="https://www.cnblogs.com/bcsky/archive/2011/05/25/2056345.html">使用命令行方式开发Android应用</a> </p>
<p><a href="https://blog.csdn.net/chen_yuyunfox/article/details/106112470">Android9.0 mm编译失败：ninja: error: ‘xxx’, needed by ‘xxx’, missing and no known rule to make it</a> </p>
<p><a href="http://www.voidcn.com/article/p-vzxsaoko-brw.html">Android架构实例分析之编写hello驱动的系统硬件服务</a></p>
<p><a href="https://blog.csdn.net/zjy764219923/article/details/106235420/">Android7关闭selinux（设置为Permissive模式）</a> </p>
<p>忽然意识到，驱动的编写模板应该在内核目录drivers里头去找。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd ~/work/android &amp;&amp; source build/envsetup.sh &amp;&amp; lunch 2</span><br><span class="line"></span><br><span class="line">mmm packages/experimental/helloandroid/</span><br><span class="line"></span><br><span class="line">make snod</span><br><span class="line"></span><br><span class="line">emulator -show-kernel -avd helloandroid -kernel ../kernel/goldfish/arch/arm64/boot/Image -system ./out/target/product/generic_arm64/system.img -data ./out/target/product/generic_arm64/userdata.img -ramdisk ./out/target/product/generic_arm64/ramdisk.img</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">01-01 08:03:04.915   898   898 E ServiceManager: add_service(&#x27;hello&#x27;,6d) uid=1000 - PERMISSION DENIED</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">09-19 11:05:07.863  1866  1866 E AndroidRuntime: java.lang.NullPointerException: Attempt to invoke interface method &#x27;int android.os.IHelloService.getVal()&#x27; on a null object reference</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><a href="https://blog.csdn.net/eliot_shao/article/details/51770558">ServiceManager add_service SELinux Permission Denied</a> </p>
<p><a href="https://www.freesion.com/article/5898146080/">Android O 添加系统服务错误 add_service uid=1000 - PERMISSION DENIED</a> </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"> Android source code compile error: “Try increasing heap size with java option &#x27;-Xmx&lt;size&gt;&#x27;”</span><br><span class="line"></span><br><span class="line">export JACK_SERVER_VM_ARGUMENTS=&quot;-Dfile.encoding=UTF-8 -XX:+TieredCompilation -Xmx4g&quot;</span><br><span class="line"></span><br><span class="line">./prebuilts/sdk/tools/jack-admin kill-server</span><br><span class="line"></span><br><span class="line">./prebuilts/sdk/tools/jack-admin start-server</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><a href="https://blog.csdn.net/nwpushuai/article/details/78778602">repo介绍</a></p>
<p><a href="https://blog.csdn.net/wa_ke/article/details/108010419">repo 撤销本地代码</a></p>
<p><a href="https://blog.csdn.net/jjw97_5/article/details/11608225">使用repo丢弃本地的改动</a></p>
<p><a href="https://www.mobibrw.com/2016/3082">repo如何取消本地改动（How to discard changes using repo）</a></p>
<p>驱动的编写模板应该在内核目录drivers里头去找例子</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd ~/work/android &amp;&amp; source build/envsetup.sh &amp;&amp; lunch 2</span><br><span class="line">emulator -show-kernel -avd helloandroid -kernel ../kernel/goldfish/arch/arm64/boot/Image -system ./out/target/product/generic_arm64/system.img -data ./out/target/product/generic_arm64/userdata.img -ramdisk ./out/target/product/generic_arm64/ramdisk.img</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>9月15日下午编译SDK之后，安卓模拟器就总是卡在开机动画界面，9月18日早上打算重新走一遍教程，捋一捋问题出在了哪里。9月19日终于把整个流程都走完了，然后重头梳理教程，理清思路。</p>
<p>最初下载好源码后是使用了 <code>lunch 2</code> 去编译 <code>arm64</code> 架构，且能正常运行，但当走到 <code>adb devices</code> 这一步的时候发现 <code>device</code> 总是 <code>offline</code> ，所以后来又回过头去使用 <code>lunch 1</code> 编译了 <code>arm</code> 架构，这一次非常顺利，并且也能通过 <code>adb shell</code> 进入终端，不过到了最后一个步骤需要编写 <code>apk</code> 进行验证的时候需要编译 <code>SDK</code> ，结果编译完 <code>SDK</code> 之后忽然发现所有的模拟器（源码预编译好的与 <code>SDK</code> 中新编译出来的）都卡在启动界面无法进入，在网上参考了许多资料都没效果，后来实在想不出办法了，就 <code>make clean</code> 了以下，又重新使用 <code>lunch 2</code> 去编译 <code>arm64</code> 架构的，这一次全部都通了，然后在命令行启动 <code>android</code> 开启 <code>SDK manager</code> 下载与安卓源码匹配的工具与镜像。通过在命令行下创建安卓项目工程，编写好相关代码文件，编译生成安卓系统预置应用程序 <code>helloandroid</code> ，启动模拟器验证结果，这时候碰到了 <code>selinux</code> 的问题，在查阅了相关资料后修改 <code>system/core/init/init.cpp</code> 的一行代码，关闭安全选项，重新执行 <code>make -j8</code> 进行编译，开启模拟器验证成功，自此自下而上的了解安卓系统算是有了一点眉目。</p>
<p>在此非常感谢同学的帮助，也感谢所有在互联网上无私分享知识的网友们，没有你们的付出，我很难收获到这些知识，更不会有这篇记录的产生，谢谢你们。 </p>
<script src="https://code.jquery.com/jquery-3.1.1.min.js"></script><link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css"><script src="https://code.jquery.com/jquery-3.1.1.min.js"></script>]]></content>
      <categories>
        <category>计算机科学与技术</category>
        <category>linux</category>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>学会使用设备树（Device Tree）</title>
    <url>/2021/11/01/ComputerScience/2021/11/devicetree/</url>
    <content><![CDATA[<p><a href="https://elinux.org/Device_Tree_Reference">Device Tree Reference</a> </p>
<p><a href="https://elinux.org/Device_Tree_Usage">Device Tree Usage</a> </p>
<p><a href="https://blog.csdn.net/caihaitao2000/article/details/83960823">设备树规范翻译</a> </p>
<p><a href="https://www.docin.com/p-1850850229.html">Power_ePAPR_APPROVED_v1.1 参考2.2.2节</a> </p>
<p><a href="http://wiki.100ask.org/Linux_devicetree">百问网 Linux_devicetree</a> </p>
<h1 id="原文摘录与个人理解"><a href="#原文摘录与个人理解" class="headerlink" title="原文摘录与个人理解"></a>原文摘录与个人理解</h1><p>设备树将外围设备抽象成节点，且除了根节点 <code>/</code> 没有父节点外，其余节点都有且只有一个父节点。节点的命名应当反映设备的类型而不是特定的型号。</p>
<p>设备树的基本结构是每个节点后用花括号包裹好节点的属性以及子节点，其中的属性以键值对 <code>键=值</code> 的形式表示且以分号隔离。</p>
<p>键值对中的值在设备树中有几种基本表示形式：</p>
<ul>
<li>文本形式用双引号包裹</li>
<li>32位无符号整形用尖括号包裹，且尖括号内可以有多个以空格分隔的整形数</li>
<li>二进制数据使用方括号包裹，且括号内可以有多个以空格分隔的数，数默认为二进制，加不加前缀 <code>0x</code> 都一样</li>
<li>上述三种类型也可以用逗号分隔赋值给某个混合键</li>
<li>也可以使用逗号分隔文本形式的数据创建字符串列表</li>
</ul>
<figure class="highlight plain"><figcaption><span>tree</span></figcaption><table><tr><td class="code"><pre><span class="line">#address-cells &#x3D; &lt;1&gt;</span><br><span class="line">#size-cells &#x3D; &lt;0&gt;;</span><br></pre></td></tr></table></figure>
<p>这两个参数用来解释子节点中可编址设备的 <code>reg = &lt;地址1 长度1 [地址2 长度2] [地址3 长度3] ... &gt;</code> 。</p>
<p>担心以后链接失效，这里把原文搬了过来，然后看到CSDN上有一篇翻译 <a href="https://blog.csdn.net/eydwyz/article/details/72285896">设备树使用手册</a> </p>
<h1 id="Device-Tree-Usage-原文"><a href="#Device-Tree-Usage-原文" class="headerlink" title="Device Tree Usage 原文"></a>Device Tree Usage 原文</h1><p> <a href="https://elinux.org/Device_Tree"> Top Device Tree page</a></p>
<p> (This page was previously located at htttp://devicetree.org/Device_Tree_Usage)</p>
<p>This page walks through how to write a device tree for a new  machine.  It is intended to provide an overview of device tree concepts  and how they are used to describe a machine.</p>
<p>For a full technical description of device tree data format, refer to the <a href="https://elinux.org/images/c/cf/Power_ePAPR_APPROVED_v1.1.pdf">ePAPR v1.1</a> specification.  The ePAPR specification covers a lot more detail than  the basic topics covered on this page, please refer to it for more  advanced usage that isn’t covered by this page. <a href="https://elinux.org/Device_tree_future#Devicetree_Specification"> The ePAPR is currently being updated</a> with a new name of Devicetree Specification Documentation.</p>
<h2 id="Basic-Data-Format"><a href="#Basic-Data-Format" class="headerlink" title="Basic Data Format"></a>Basic Data Format</h2><p>The device tree is a simple tree structure of nodes and properties.   Properties are key-value pairs, and node may contain both properties and child nodes.  For example, the following is a simple tree in the <a href="https://elinux.org/index.php?title=Definitions&amp;action=edit&amp;redlink=1"> .dts</a> format:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;dts-v1&#x2F;;</span><br><span class="line"></span><br><span class="line">&#x2F; &#123;</span><br><span class="line">    node1 &#123;</span><br><span class="line">        a-string-property &#x3D; &quot;A string&quot;;</span><br><span class="line">        a-string-list-property &#x3D; &quot;first string&quot;, &quot;second string&quot;;</span><br><span class="line">        &#x2F;&#x2F; hex is implied in byte arrays. no &#39;0x&#39; prefix is required</span><br><span class="line">        a-byte-data-property &#x3D; [01 23 34 56];</span><br><span class="line">        child-node1 &#123;</span><br><span class="line">            first-child-property;</span><br><span class="line">            second-child-property &#x3D; &lt;1&gt;;</span><br><span class="line">            a-string-property &#x3D; &quot;Hello, world&quot;;</span><br><span class="line">        &#125;;</span><br><span class="line">        child-node2 &#123;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">    node2 &#123;</span><br><span class="line">        an-empty-property;</span><br><span class="line">        a-cell-property &#x3D; &lt;1 2 3 4&gt;; &#x2F;* each number (cell) is a uint32 *&#x2F;</span><br><span class="line">        child-node1 &#123;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>This tree is obviously pretty useless because it doesn’t describe  anything, but it does show the structure of nodes and properties.  There is:</p>
<ul>
<li>a single root node: “<code>/</code>“</li>
<li>a couple of child nodes: “<code>node1</code>“ and “<code>node2</code>“</li>
<li>a couple of children for node1: “<code>child-node1</code>“ and “<code>child-node2</code>“</li>
<li>a bunch of properties scattered through the tree.</li>
</ul>
<p>Properties are simple key-value pairs where the value can either be  empty or contain an arbitrary byte stream.  While data types are not  encoded into the data structure, there are a few fundamental data  representations that can be expressed in a device tree source file.</p>
<ul>
<li>Text strings (null terminated) are represented with double quotes:<ul>
<li><code>string-property = &quot;a string&quot;;</code></li>
</ul>
</li>
<li>‘Cells’ are 32 bit unsigned integers delimited by angle brackets:<ul>
<li><code>cell-property = &lt;0xbeef 123 0xabcd1234&gt;;</code></li>
</ul>
</li>
<li>Binary data is delimited with square brackets:<ul>
<li><code>binary-property = [0x01 0x23 0x45 0x67];</code></li>
</ul>
</li>
<li>Data of differing representations can be concatenated together using a comma:<ul>
<li><code>mixed-property = &quot;a string&quot;, [0x01 0x23 0x45 0x67], &lt;0x12345678&gt;;</code></li>
</ul>
</li>
<li>Commas are also used to create lists of strings:<ul>
<li><code>string-list = &quot;red fish&quot;, &quot;blue fish&quot;;</code></li>
</ul>
</li>
</ul>
<h2 id="Basic-Concepts"><a href="#Basic-Concepts" class="headerlink" title="Basic Concepts"></a>Basic Concepts</h2><p>To understand how the device tree is used, we will start with a  simple machine and build up a device tree to describe it step by step.</p>
<h3 id="Sample-Machine"><a href="#Sample-Machine" class="headerlink" title="Sample Machine"></a>Sample Machine</h3><p>Consider the following imaginary machine (loosely based on ARM Versatile), manufactured by “Acme” and named “Coyote’s Revenge”:</p>
<ul>
<li>One 32bit ARM CPU</li>
<li>processor local bus attached to memory mapped serial port, spi bus  controller, i2c controller, interrupt controller, and external bus  bridge</li>
<li>256MB of SDRAM based at 0</li>
<li>2 Serial ports based at 0x101F1000 and 0x101F2000</li>
<li>GPIO controller based at 0x101F3000</li>
<li>SPI controller based at 0x10170000 with following devices<ul>
<li>MMC slot with SS pin attached to GPIO #1</li>
</ul>
</li>
<li>External bus bridge with following devices<ul>
<li>SMC SMC91111 Ethernet device attached to external bus based at 0x10100000</li>
<li>i2c controller based at 0x10160000 with following devices<ul>
<li>Maxim DS1338 real time clock.  Responds to slave address 1101000 (0x58)</li>
</ul>
</li>
<li>64MB of NOR flash based at 0x30000000</li>
</ul>
</li>
</ul>
<h3 id="Initial-structure"><a href="#Initial-structure" class="headerlink" title="Initial structure"></a>Initial structure</h3><p>The first step is to lay down a skeleton structure for the machine.   This is the bare minimum structure required for a valid device tree.  At this stage you want to uniquely identify the machine.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;dts-v1&#x2F;;</span><br><span class="line"></span><br><span class="line">&#x2F; &#123;</span><br><span class="line">    compatible &#x3D; &quot;acme,coyotes-revenge&quot;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><code>compatible</code> specifies the name of the system.  It  contains a string in the form “<manufacturer>,<model>.  It  is important to specify the exact device, and to include the  manufacturer name to avoid namespace collisions.  Since the operating  system will use the <code>compatible</code> value to make decisions about how to run on the machine, it is very important to put correct data into this property.</p>
<p>Theoretically, compatible is all the data an OS needs to uniquely identify a machine.  If all the machine details are hard coded, then  the OS could look specifically for “acme,coyotes-revenge” in the top  level <code>compatible</code> property.</p>
<h3 id="CPUs"><a href="#CPUs" class="headerlink" title="CPUs"></a>CPUs</h3><p>Next step is to describe for each of the CPUs.  A container node  named “cpus” is added with a child node for each CPU.  In this case the  system is a dual-core Cortex A9 system from ARM.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;dts-v1&#x2F;;</span><br><span class="line"></span><br><span class="line">&#x2F; &#123;</span><br><span class="line">    compatible &#x3D; &quot;acme,coyotes-revenge&quot;;</span><br><span class="line"></span><br><span class="line">    cpus &#123;</span><br><span class="line">        cpu@0 &#123;</span><br><span class="line">            compatible &#x3D; &quot;arm,cortex-a9&quot;;</span><br><span class="line">        &#125;;</span><br><span class="line">        cpu@1 &#123;</span><br><span class="line">            compatible &#x3D; &quot;arm,cortex-a9&quot;;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>The compatible property in each cpu node is a string that specifies the exact cpu model in the form <code>&lt;manufacturer&gt;,&lt;model&gt;</code>, just like the compatible property at the top level.</p>
<p>More properties will be added to the cpu nodes later, but we first need to talk about more of the basic concepts.</p>
<h3 id="Node-Names"><a href="#Node-Names" class="headerlink" title="Node Names"></a>Node Names</h3><p>It is worth taking a moment to talk about naming conventions.  Every node must have a name in the form <code>&lt;name&gt;[@&lt;unit-address&gt;</code>].</p>
<p><code>&lt;name&gt;</code> is a simple ascii string and can be up  to 31 characters in length.  In general, nodes are named according to  what kind of device it represents.  ie. A node for a 3com Ethernet  adapter would be use the name <code>ethernet</code>, not <code>3com509</code>.</p>
<p>The unit-address is included if the node describes a device with  an address.  In general, the unit address is the primary address used to access the device, and is listed in the node’s <code>reg</code> property.  We’ll cover the reg property later in this document.</p>
<p>Sibling nodes must be uniquely named, but it is normal for more  than one node to use the same generic name so long as the address is  different (ie, serial@101f1000 &amp; serial@101f2000).</p>
<p>See section 2.2.1 of the ePAPR spec for full details about node naming.</p>
<h3 id="Devices"><a href="#Devices" class="headerlink" title="Devices"></a>Devices</h3><p>Every device in the system is represented by a device tree node.  The next step is to populate the tree with a node for each of the devices.  For now, the new nodes will be left empty until we can talk about how  address ranges and irqs are handled.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;dts-v1&#x2F;;</span><br><span class="line"></span><br><span class="line">&#x2F; &#123;</span><br><span class="line">    compatible &#x3D; &quot;acme,coyotes-revenge&quot;;</span><br><span class="line"></span><br><span class="line">    cpus &#123;</span><br><span class="line">        cpu@0 &#123;</span><br><span class="line">            compatible &#x3D; &quot;arm,cortex-a9&quot;;</span><br><span class="line">        &#125;;</span><br><span class="line">        cpu@1 &#123;</span><br><span class="line">            compatible &#x3D; &quot;arm,cortex-a9&quot;;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    serial@101F0000 &#123;</span><br><span class="line">        compatible &#x3D; &quot;arm,pl011&quot;;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    serial@101F2000 &#123;</span><br><span class="line">        compatible &#x3D; &quot;arm,pl011&quot;;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    gpio@101F3000 &#123;</span><br><span class="line">        compatible &#x3D; &quot;arm,pl061&quot;;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    interrupt-controller@10140000 &#123;</span><br><span class="line">        compatible &#x3D; &quot;arm,pl190&quot;;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    spi@10115000 &#123;</span><br><span class="line">        compatible &#x3D; &quot;arm,pl022&quot;;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    external-bus &#123;</span><br><span class="line">        ethernet@0,0 &#123;</span><br><span class="line">            compatible &#x3D; &quot;smc,smc91c111&quot;;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        i2c@1,0 &#123;</span><br><span class="line">            compatible &#x3D; &quot;acme,a1234-i2c-bus&quot;;</span><br><span class="line">            rtc@58 &#123;</span><br><span class="line">                compatible &#x3D; &quot;maxim,ds1338&quot;;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        flash@2,0 &#123;</span><br><span class="line">            compatible &#x3D; &quot;samsung,k8f1315ebm&quot;, &quot;cfi-flash&quot;;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>In this tree, a node has been added for each device in the system,  and the hierarchy reflects the how devices are connected to the system.  ie. devices on the extern bus are children of the external bus node,  and i2c devices are children of the i2c bus controller node.  In  general, the hierarchy represents the view of the system from the  perspective of the CPU.</p>
<p>This tree isn’t valid at this point.  It is missing information  about connections between devices.  That data will be added later.</p>
<p>Some things to notice in this tree:</p>
<ul>
<li>Every device node has a <code>compatible</code> property.</li>
<li>The flash node has 2 strings in the compatible property.  Read on to the next section to learn why.</li>
<li>As mentioned earlier, node names reflect the type of device, not the particular model.  See section 2.2.2 of the ePAPR spec for a list of  defined generic node names that should be used wherever possible.</li>
</ul>
<h3 id="Understanding-the-compatible-Property"><a href="#Understanding-the-compatible-Property" class="headerlink" title="Understanding the compatible Property"></a>Understanding the <code>compatible</code> Property</h3><p>Every node in the tree that represents a device is required to have the <code>compatible</code> property.  <code>compatible</code> is the key an operating system uses to decide which device driver to bind to a device.</p>
<p><code>compatible</code> is a list of strings.  The first string in the list specifies the exact device that the node represents in the form <code>&quot;&lt;manufacturer&gt;,&lt;model&gt;&quot;</code>.  The following strings represent other devices that the device is <em>compatible</em> with.</p>
<p>For example, the Freescale MPC8349 System on Chip (SoC) has a  serial device which implements the National Semiconductor ns16550  register interface.  The compatible property for the MPC8349 serial  device should therefore be: <code>compatible = &quot;fsl,mpc8349-uart&quot;, &quot;ns16550&quot;</code>.  In this case, <code>fsl,mpc8349-uart</code> specifies the exact device, and <code>ns16550</code> states that it is register-level compatible with a National Semiconductor 16550 UART.</p>
<p>Note: <code>ns16550</code> doesn’t have a manufacturer prefix  purely for historical reasons.  All new compatible values should use the manufacturer prefix.</p>
<p>This practice allows existing device drivers to be bound to a newer device, while still uniquely identifying the exact hardware.</p>
<p>Warning: Don’t use <em>wildcard</em> compatible values, like  “fsl,mpc83xx-uart” or similar.  Silicon vendors will invariably make a  change that breaks your wildcard assumptions the moment it is too late  to change it.  Instead, choose a specific silicon implementations and  make all subsequent silicon <em>compatible</em> with it.</p>
<h2 id="How-Addressing-Works"><a href="#How-Addressing-Works" class="headerlink" title="How Addressing Works"></a>How Addressing Works</h2><p>Devices that are addressable use the following properties to encode address information into the device tree:</p>
<ul>
<li><code>reg</code></li>
<li><code>#address-cells</code></li>
<li><code>#size-cells</code></li>
</ul>
<p>Each addressable device gets a <code>reg</code> which is a list of tuples in the form <code>reg = &lt;address1 length1 [address2 length2] [address3 length3] ... &gt;</code>.  Each tuple represents an address range used by the device.  Each  address value is a list of one or more 32 bit integers called <em>cells</em>.  Similarly, the length value can either be a list of cells, or empty.</p>
<p>Since both the address and length fields are variable of variable size, the <code>#address-cells</code> and <code>#size-cells</code> properties in the parent node are used to state how many cells are in  each field.  Or in other words, interpreting a reg property correctly  requires the parent node’s #address-cells and #size-cells values.  To  see how this all works, lets add the addressing properties to the sample device tree, starting with the CPUs.</p>
<h3 id="CPU-addressing"><a href="#CPU-addressing" class="headerlink" title="CPU addressing"></a>CPU addressing</h3><p>The CPU nodes represent the simplest case when talking about  addressing.  Each CPU is assigned a single unique ID, and there is no  size associated with CPU ids.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cpus &#123;</span><br><span class="line">    #address-cells &#x3D; &lt;1&gt;;</span><br><span class="line">    #size-cells &#x3D; &lt;0&gt;;</span><br><span class="line">    cpu@0 &#123;</span><br><span class="line">        compatible &#x3D; &quot;arm,cortex-a9&quot;;</span><br><span class="line">        reg &#x3D; &lt;0&gt;;</span><br><span class="line">    &#125;;</span><br><span class="line">    cpu@1 &#123;</span><br><span class="line">        compatible &#x3D; &quot;arm,cortex-a9&quot;;</span><br><span class="line">        reg &#x3D; &lt;1&gt;;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>In the <code>cpus</code> node, <code>#address-cells</code> is set to 1, and <code>#size-cells</code> is set to 0.  This means that child <code>reg</code> values are a single uint32 that represent the address with no size  field.  In this case, the two cpus are assigned addresses 0 and 1.  <code>#size-cells</code> is 0 for cpu nodes because each cpu is only assigned a single address.</p>
<p>You’ll also notice that the <code>reg</code> value matches the value in the node name.  By convention, if a node has a <code>reg</code> property, then the node name must include the unit-address, which is the first address value in the <code>reg</code> property.</p>
<h3 id="Memory-Mapped-Devices"><a href="#Memory-Mapped-Devices" class="headerlink" title="Memory Mapped Devices"></a>Memory Mapped Devices</h3><p>Instead of single address values like found in the cpu nodes, a  memory mapped device is assigned a range of addresses that it will  respond to.  <code>#size-cells</code> is used to state how large the length field is in each child <code>reg</code> tuple.  In the following example, each address value is 1 cell (32  bits), and each length value is also 1 cell, which is typical on 32 bit  systems.  64 bit machines may use a value of 2 for #address-cells and  #size-cells to get 64 bit addressing in the device tree.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;dts-v1&#x2F;;</span><br><span class="line"></span><br><span class="line">&#x2F; &#123;</span><br><span class="line">    #address-cells &#x3D; &lt;1&gt;;</span><br><span class="line">    #size-cells &#x3D; &lt;1&gt;;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    serial@101f0000 &#123;</span><br><span class="line">        compatible &#x3D; &quot;arm,pl011&quot;;</span><br><span class="line">        reg &#x3D; &lt;0x101f0000 0x1000 &gt;;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    serial@101f2000 &#123;</span><br><span class="line">        compatible &#x3D; &quot;arm,pl011&quot;;</span><br><span class="line">        reg &#x3D; &lt;0x101f2000 0x1000 &gt;;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    gpio@101f3000 &#123;</span><br><span class="line">        compatible &#x3D; &quot;arm,pl061&quot;;</span><br><span class="line">        reg &#x3D; &lt;0x101f3000 0x1000</span><br><span class="line">               0x101f4000 0x0010&gt;;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    interrupt-controller@10140000 &#123;</span><br><span class="line">        compatible &#x3D; &quot;arm,pl190&quot;;</span><br><span class="line">        reg &#x3D; &lt;0x10140000 0x1000 &gt;;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    spi@10115000 &#123;</span><br><span class="line">        compatible &#x3D; &quot;arm,pl022&quot;;</span><br><span class="line">        reg &#x3D; &lt;0x10115000 0x1000 &gt;;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>Each device is assigned a base address, and the size of the region it is assigned.  The GPIO device address in this example is assigned two  address ranges; 0x101f3000…0x101f3fff and 0x101f4000..0x101f400f.</p>
<p>Some devices live on a bus with a different addressing scheme.   For example, a device can be attached to an external bus with discrete  chip select lines.  Since each parent node defines the addressing domain for its children, the address mapping can be chosen to best describe  the system.  The code below show address assignment for devices attached to the external bus with the chip select number encoded into the  address.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">external-bus &#123;</span><br><span class="line">    #address-cells &#x3D; &lt;2&gt;;</span><br><span class="line">    #size-cells &#x3D; &lt;1&gt;;</span><br><span class="line"></span><br><span class="line">    ethernet@0,0 &#123;</span><br><span class="line">        compatible &#x3D; &quot;smc,smc91c111&quot;;</span><br><span class="line">        reg &#x3D; &lt;0 0 0x1000&gt;;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    i2c@1,0 &#123;</span><br><span class="line">        compatible &#x3D; &quot;acme,a1234-i2c-bus&quot;;</span><br><span class="line">        reg &#x3D; &lt;1 0 0x1000&gt;;</span><br><span class="line">        rtc@58 &#123;</span><br><span class="line">            compatible &#x3D; &quot;maxim,ds1338&quot;;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    flash@2,0 &#123;</span><br><span class="line">        compatible &#x3D; &quot;samsung,k8f1315ebm&quot;, &quot;cfi-flash&quot;;</span><br><span class="line">        reg &#x3D; &lt;2 0 0x4000000&gt;;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>The <code>external-bus</code> uses 2 cells for the address value; one for the chip select number, and one for the offset from the base of the chip select.  The length field remains as a single cell since only the  offset portion of the address needs to have a range.  So, in this  example, each <code>reg</code> entry contains 3 cells; the chipselect number, the offset, and the length.</p>
<p>Since the address domains are contained to a node and its  children, parent nodes are free to define whatever addressing scheme  makes sense for the bus.  Nodes outside of the immediate parent and  child nodes do not normally have to care about the local addressing  domain, and addresses have to be mapped to get from one domain to  another.</p>
<h3 id="Non-Memory-Mapped-Devices"><a href="#Non-Memory-Mapped-Devices" class="headerlink" title="Non Memory Mapped Devices"></a>Non Memory Mapped Devices</h3><p>Other devices are not memory mapped on the processor bus.  They can  have address ranges, but they are not directly accessible by the CPU.   Instead the parent device’s driver would perform indirect access on  behalf of the CPU.</p>
<p>To take the example of i2c devices, each device is assigned an  address, but there is no length or range associated with it.  This looks much the same as CPU address assignments.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">i2c@1,0 &#123;</span><br><span class="line">    compatible &#x3D; &quot;acme,a1234-i2c-bus&quot;;</span><br><span class="line">    #address-cells &#x3D; &lt;1&gt;;</span><br><span class="line">    #size-cells &#x3D; &lt;0&gt;;</span><br><span class="line">    reg &#x3D; &lt;1 0 0x1000&gt;;</span><br><span class="line">    rtc@58 &#123;</span><br><span class="line">        compatible &#x3D; &quot;maxim,ds1338&quot;;</span><br><span class="line">        reg &#x3D; &lt;58&gt;;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="Ranges-Address-Translation"><a href="#Ranges-Address-Translation" class="headerlink" title="Ranges (Address Translation)"></a>Ranges (Address Translation)</h3><p>We’ve talked about how to assign addresses to devices, but at this  point those addresses are only local to the device node.  It doesn’t yet describe how to map from those address to an address that the CPU can  use.</p>
<p>The root node always describes the CPU’s view of the address  space.  Child nodes of the root are already using the CPU’s address  domain, and so do not need any explicit mapping.  For example, the  serial@101f0000 device is directly assigned the address 0x101f0000.</p>
<p>Nodes that are not direct children of the root do not use the  CPU’s address domain.  In order to get a memory mapped address the  device tree must specify how to translate addresses from one domain to  another.  The <code>ranges</code> property is used for this purpose.</p>
<p>Here is the sample device tree with the ranges property added.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;dts-v1&#x2F;;</span><br><span class="line"></span><br><span class="line">&#x2F; &#123;</span><br><span class="line">    compatible &#x3D; &quot;acme,coyotes-revenge&quot;;</span><br><span class="line">    #address-cells &#x3D; &lt;1&gt;;</span><br><span class="line">    #size-cells &#x3D; &lt;1&gt;;</span><br><span class="line">    ...</span><br><span class="line">    external-bus &#123;</span><br><span class="line">        #address-cells &#x3D; &lt;2&gt;;</span><br><span class="line">        #size-cells &#x3D; &lt;1&gt;;</span><br><span class="line">        ranges &#x3D; &lt;0 0  0x10100000   0x10000     &#x2F;&#x2F; Chipselect 1, Ethernet</span><br><span class="line">                  1 0  0x10160000   0x10000     &#x2F;&#x2F; Chipselect 2, i2c controller</span><br><span class="line">                  2 0  0x30000000   0x1000000&gt;; &#x2F;&#x2F; Chipselect 3, NOR Flash</span><br><span class="line"></span><br><span class="line">        ethernet@0,0 &#123;</span><br><span class="line">            compatible &#x3D; &quot;smc,smc91c111&quot;;</span><br><span class="line">            reg &#x3D; &lt;0 0 0x1000&gt;;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        i2c@1,0 &#123;</span><br><span class="line">            compatible &#x3D; &quot;acme,a1234-i2c-bus&quot;;</span><br><span class="line">            #address-cells &#x3D; &lt;1&gt;;</span><br><span class="line">            #size-cells &#x3D; &lt;0&gt;;</span><br><span class="line">            reg &#x3D; &lt;1 0 0x1000&gt;;</span><br><span class="line">            rtc@58 &#123;</span><br><span class="line">                compatible &#x3D; &quot;maxim,ds1338&quot;;</span><br><span class="line">                reg &#x3D; &lt;58&gt;;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        flash@2,0 &#123;</span><br><span class="line">            compatible &#x3D; &quot;samsung,k8f1315ebm&quot;, &quot;cfi-flash&quot;;</span><br><span class="line">            reg &#x3D; &lt;2 0 0x4000000&gt;;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><code>ranges</code> is a list of address translations.  Each entry in the ranges table is a tuple containing the child address, the parent  address, and the size of the region in the child address space.  The  size of each field is determined by taking the child’s <code>#address-cells</code> value, the parent’s <code>#address-cells</code> value, and the child’s <code>#size-cells</code> value.  For the external bus in our example, the child address is 2  cells, the parent address is 1 cell, and the size is also 1 cell.  Three ranges are being translated:</p>
<ul>
<li>Offset 0 from chip select 0 is mapped to address range 0x10100000..0x1010ffff</li>
<li>Offset 0 from chip select 1 is mapped to address range 0x10160000..0x1016ffff</li>
<li>Offset 0 from chip select 2 is mapped to address range 0x30000000..0x30ffffff</li>
</ul>
<p>Alternately, if the parent and child address spaces are identical, then a node can instead add an empty <code>ranges</code> property.  The presence of an empty ranges property means addresses in  the child address space are mapped 1:1 onto the parent address space.</p>
<p>You might ask why address translation is used at all when it  could all be written with 1:1 mapping.  Some busses (like PCI) have  entirely different address spaces whose details need to be exposed to  the operating system.  Others have DMA engines which need to know the  real address on the bus.  Sometimes devices need to be grouped together  because they all share the same software programmable physical address  mapping.  Whether or not 1:1 mappings should be used depends a lot on  the information needed by the Operating system, and on the hardware  design.</p>
<p>You should also notice that there is no <code>ranges</code>  property in the i2c@1,0 node.  The reason for this is that unlike the  external bus, devices on the i2c bus are not memory mapped on the CPU’s  address domain.  Instead, the CPU indirectly accesses the rtc@58 device  via the i2c@1,0 device.  The lack of a <code>ranges</code> property means that a device cannot be directly accessed by any device other than it’s parent.</p>
<h2 id="How-Interrupts-Work"><a href="#How-Interrupts-Work" class="headerlink" title="How Interrupts Work"></a>How Interrupts Work</h2><p>Unlike address range translation which follows the natural structure  of the tree, Interrupt signals can originate from and terminate on any  device in a machine.  Unlike device addressing which is naturally  expressed in the device tree, interrupt signals are expressed as links  between nodes independent of the tree.  Four properties are used to  describe interrupt connections:</p>
<ul>
<li><code>interrupt-controller</code> - An empty property declaring a node as a device that receives interrupt signals</li>
<li><code>#interrupt-cells</code> - This is a property of the interrupt controller node.  It states how many cells are in an <em>interrupt specifier</em> for this interrupt controller (Similar to <code>#address-cells</code> and <code>#size-cells</code>).</li>
<li><code>interrupt-parent</code> - A property of a device node containing a <em>phandle</em> to the interrupt controller that it is attached to.  Nodes that do not  have an interrupt-parent property can also inherit the property from  their parent node.</li>
<li><code>interrupts</code> - A property of a device node containing a list of <em>interrupt specifiers</em>, one for each interrupt output signal on the device.</li>
</ul>
<p>An <em>interrupt specifier</em> is one or more cells of data (as  specified by #interrupt-cells) that specifies which interrupt input the  device is attached to.  Most devices only have a single interrupt output as shown in the example below, but it is possible to have multiple  interrupt outputs on a device.  The meaning of an interrupt specifier  depends entirely on the binding for the interrupt controller device.   Each interrupt controller can decide how many cells it need to uniquely  define an interrupt input.</p>
<p>The following code adds interrupt connections to our Coyote’s Revenge example machine:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;dts-v1&#x2F;;</span><br><span class="line"></span><br><span class="line">&#x2F; &#123;</span><br><span class="line">    compatible &#x3D; &quot;acme,coyotes-revenge&quot;;</span><br><span class="line">    #address-cells &#x3D; &lt;1&gt;;</span><br><span class="line">    #size-cells &#x3D; &lt;1&gt;;</span><br><span class="line">    interrupt-parent &#x3D; &lt;&amp;intc&gt;;</span><br><span class="line"></span><br><span class="line">    cpus &#123;</span><br><span class="line">        #address-cells &#x3D; &lt;1&gt;;</span><br><span class="line">        #size-cells &#x3D; &lt;0&gt;;</span><br><span class="line">        cpu@0 &#123;</span><br><span class="line">            compatible &#x3D; &quot;arm,cortex-a9&quot;;</span><br><span class="line">            reg &#x3D; &lt;0&gt;;</span><br><span class="line">        &#125;;</span><br><span class="line">        cpu@1 &#123;</span><br><span class="line">            compatible &#x3D; &quot;arm,cortex-a9&quot;;</span><br><span class="line">            reg &#x3D; &lt;1&gt;;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    serial@101f0000 &#123;</span><br><span class="line">        compatible &#x3D; &quot;arm,pl011&quot;;</span><br><span class="line">        reg &#x3D; &lt;0x101f0000 0x1000 &gt;;</span><br><span class="line">        interrupts &#x3D; &lt; 1 0 &gt;;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    serial@101f2000 &#123;</span><br><span class="line">        compatible &#x3D; &quot;arm,pl011&quot;;</span><br><span class="line">        reg &#x3D; &lt;0x101f2000 0x1000 &gt;;</span><br><span class="line">        interrupts &#x3D; &lt; 2 0 &gt;;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    gpio@101f3000 &#123;</span><br><span class="line">        compatible &#x3D; &quot;arm,pl061&quot;;</span><br><span class="line">        reg &#x3D; &lt;0x101f3000 0x1000</span><br><span class="line">               0x101f4000 0x0010&gt;;</span><br><span class="line">        interrupts &#x3D; &lt; 3 0 &gt;;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    intc: interrupt-controller@10140000 &#123;</span><br><span class="line">        compatible &#x3D; &quot;arm,pl190&quot;;</span><br><span class="line">        reg &#x3D; &lt;0x10140000 0x1000 &gt;;</span><br><span class="line">        interrupt-controller;</span><br><span class="line">        #interrupt-cells &#x3D; &lt;2&gt;;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    spi@10115000 &#123;</span><br><span class="line">        compatible &#x3D; &quot;arm,pl022&quot;;</span><br><span class="line">        reg &#x3D; &lt;0x10115000 0x1000 &gt;;</span><br><span class="line">        interrupts &#x3D; &lt; 4 0 &gt;;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    external-bus &#123;</span><br><span class="line">        #address-cells &#x3D; &lt;2&gt;;</span><br><span class="line">        #size-cells &#x3D; &lt;1&gt;;</span><br><span class="line">        ranges &#x3D; &lt;0 0  0x10100000   0x10000     &#x2F;&#x2F; Chipselect 1, Ethernet</span><br><span class="line">                  1 0  0x10160000   0x10000     &#x2F;&#x2F; Chipselect 2, i2c controller</span><br><span class="line">                  2 0  0x30000000   0x1000000&gt;; &#x2F;&#x2F; Chipselect 3, NOR Flash</span><br><span class="line"></span><br><span class="line">        ethernet@0,0 &#123;</span><br><span class="line">            compatible &#x3D; &quot;smc,smc91c111&quot;;</span><br><span class="line">            reg &#x3D; &lt;0 0 0x1000&gt;;</span><br><span class="line">            interrupts &#x3D; &lt; 5 2 &gt;;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        i2c@1,0 &#123;</span><br><span class="line">            compatible &#x3D; &quot;acme,a1234-i2c-bus&quot;;</span><br><span class="line">            #address-cells &#x3D; &lt;1&gt;;</span><br><span class="line">            #size-cells &#x3D; &lt;0&gt;;</span><br><span class="line">            reg &#x3D; &lt;1 0 0x1000&gt;;</span><br><span class="line">            interrupts &#x3D; &lt; 6 2 &gt;;</span><br><span class="line">            rtc@58 &#123;</span><br><span class="line">                compatible &#x3D; &quot;maxim,ds1338&quot;;</span><br><span class="line">                reg &#x3D; &lt;58&gt;;</span><br><span class="line">                interrupts &#x3D; &lt; 7 3 &gt;;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        flash@2,0 &#123;</span><br><span class="line">            compatible &#x3D; &quot;samsung,k8f1315ebm&quot;, &quot;cfi-flash&quot;;</span><br><span class="line">            reg &#x3D; &lt;2 0 0x4000000&gt;;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>Some things to notice:</p>
<ul>
<li>The machine has a single interrupt controller, interrupt-controller@10140000.</li>
<li>The label ‘intc:’ has been added to the interrupt controller node,  and the label was used to assign a phandle to the interrupt-parent  property in the root node.  This interrupt-parent value becomes the  default for the system because all child nodes inherit it unless it is  explicitly overridden.</li>
<li>Each device uses an interrupt property to specify a different interrupt input line.</li>
<li>#interrupt-cells is 2, so each interrupt specifier has 2 cells.   This example uses the common pattern of using the first cell to encode  the interrupt line number, and the second cell to encode flags such as  active high vs. active low, or edge vs. level sensitive.  For any given  interrupt controller, refer to the controller’s binding documentation to learn how the specifier is encoded.</li>
</ul>
<h2 id="Device-Specific-Data"><a href="#Device-Specific-Data" class="headerlink" title="Device Specific Data"></a>Device Specific Data</h2><p>Beyond the common properties, arbitrary properties and child nodes  can be added to nodes.  Any data needed by the operating system can be  added as long as some rules are followed.</p>
<p>First, new device-specific property names should use a  manufacture prefix so that they don’t conflict with existing standard  property names.</p>
<p>Second, the meaning of the properties and child nodes must be  documented in a binding so that a device driver author knows how to  interpret the data.  A binding documents what a particular compatible  value means, what properties it should have, what child nodes it might  have, and what device it represents.  Each unique <code>compatible</code> value should have its own binding (or claim compatibility with another  compatible value).  Bindings for new devices are documented in this  wiki.  See the <a href="https://elinux.org/Main_Page">Main Page</a> for a description of the documentation format and review process.</p>
<p>Third, post new bindings for review on the  devicetree-discuss@lists.ozlabs.org mailing list.  Reviewing new  bindings catches a lot of common mistakes that will cause problems in  the future.</p>
<h2 id="Special-Nodes"><a href="#Special-Nodes" class="headerlink" title="Special Nodes"></a>Special Nodes</h2><h3 id="aliases-Node"><a href="#aliases-Node" class="headerlink" title="aliases Node"></a><code>aliases</code> Node</h3><p>A specific node is normally referenced by the full path, like <code>/external-bus/ethernet@0,0</code>, but that gets cumbersome when what a user really wants to know is, “which device is eth0?”  The <code>aliases</code> node can be used to assign a short <em>alias</em> to a full device path.  For example:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">aliases &#123;</span><br><span class="line">    ethernet0 &#x3D; &amp;eth0;</span><br><span class="line">    serial0 &#x3D; &amp;serial0;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>The operating system is welcome to use the aliases when assigning an identifier to a device.</p>
<p>You’ll notice a new syntax used here.  The <code>*property* = &amp;*label*;</code> syntax assigns the full node path referenced by the label as a string property.  This is different from the <code>*phandle* = &lt; &amp;*label* &gt;;</code> form used earlier which inserts a phandle value into a cell.</p>
<h3 id="chosen-Node"><a href="#chosen-Node" class="headerlink" title="chosen Node"></a><code>chosen</code> Node</h3><p>The <code>chosen</code> node doesn’t represent a real device, but  serves as a place for passing data between firmware and the operating  system, like boot arguments.  Data in the chosen node does not represent the hardware.  Typically the chosen node is left empty in .dts source  files and populated at boot time.</p>
<p>In our example system, firmware might add the following to the chosen node:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chosen &#123;</span><br><span class="line">    bootargs &#x3D; &quot;root&#x3D;&#x2F;dev&#x2F;nfs rw nfsroot&#x3D;192.168.1.1 console&#x3D;ttyS0,115200&quot;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="Advanced-Topics"><a href="#Advanced-Topics" class="headerlink" title="Advanced Topics"></a>Advanced Topics</h2><h3 id="Advanced-Sample-Machine"><a href="#Advanced-Sample-Machine" class="headerlink" title="Advanced Sample Machine"></a>Advanced Sample Machine</h3><p>Now that we’ve got the basics defined, let’s add some hardware to the sample machine to discuss some of the more complicated use cases.</p>
<p>The advanced sample machine adds a PCI host bridge with control  registers memory mapped to 0x10180000, and BARs programmed to start  above the address 0x80000000.</p>
<p>Given what we already know about the device tree, we can start  with the addition of the following node to describe the PCI host bridge.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pci@10180000 &#123;</span><br><span class="line">    compatible &#x3D; &quot;arm,versatile-pci-hostbridge&quot;, &quot;pci&quot;;</span><br><span class="line">    reg &#x3D; &lt;0x10180000 0x1000&gt;;</span><br><span class="line">    interrupts &#x3D; &lt;8 0&gt;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="PCI-Host-Bridge"><a href="#PCI-Host-Bridge" class="headerlink" title="PCI Host Bridge"></a>PCI Host Bridge</h3><p>This section describes the Host/PCI bridge node.</p>
<p>Note, some basic knowledge of PCI is assumed in this section.  This is NOT a tutorial about PCI, if you need some more in depth  information, please read<a href="https://elinux.org/Device_Tree_Usage#cite_note-1">[1]</a>. You can also refer to either <a href="https://www.power.org/documentation/power-org-standard-for-embedded-power-architecture-platform-requirements-epapr-v1-1-2/">ePAPR v1.1</a> or the <a href="https://www.openfirmware.info/data/docs/bus.pci.pdf">PCI Bus Binding to Open Firmware</a>. A complete working example for a Freescale MPC5200 can be found <a href="https://elinux.org/index.php?title=MPC5200:PCI&amp;action=edit&amp;redlink=1">here</a>.</p>
<h4 id="PCI-Bus-numbering"><a href="#PCI-Bus-numbering" class="headerlink" title="PCI Bus numbering"></a>PCI Bus numbering</h4><p>Each PCI bus segment is uniquely numbered, and the bus numbering is exposed in the pci node by using the <code>bus-range</code> property, which contains two cells.  The first cell gives the bus  number assigned to this node, and the second cell gives the maximum bus  number of any of the subordinate PCI busses.</p>
<p>The sample machine has a single pci bus, so both cells are 0.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pci@0x10180000 &#123;</span><br><span class="line">    compatible &#x3D; &quot;arm,versatile-pci-hostbridge&quot;, &quot;pci&quot;;</span><br><span class="line">    reg &#x3D; &lt;0x10180000 0x1000&gt;;</span><br><span class="line">    interrupts &#x3D; &lt;8 0&gt;;</span><br><span class="line">    bus-range &#x3D; &lt;0 0&gt;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="PCI-Address-Translation"><a href="#PCI-Address-Translation" class="headerlink" title="PCI Address Translation"></a>PCI Address Translation</h4><p>Similar to the local bus described earlier, the PCI address space is  completely separate from the CPU address space, so address translation  is needed to get from a PCI address to a CPU address. As always, this is done using the <a href="https://elinux.org/Device_Tree_Usage#Ranges_.28Address_Translation.29"><code>range</code></a>, <code>#address-cells</code>, and <code>#size-cells</code> properties.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pci@0x10180000 &#123;</span><br><span class="line">    compatible &#x3D; &quot;arm,versatile-pci-hostbridge&quot;, &quot;pci&quot;;</span><br><span class="line">    reg &#x3D; &lt;0x10180000 0x1000&gt;;</span><br><span class="line">    interrupts &#x3D; &lt;8 0&gt;;</span><br><span class="line">    bus-range &#x3D; &lt;0 0&gt;;</span><br><span class="line"></span><br><span class="line">    #address-cells &#x3D; &lt;3&gt;</span><br><span class="line">    #size-cells &#x3D; &lt;2&gt;;</span><br><span class="line">    ranges &#x3D; &lt;0x42000000 0 0x80000000 0x80000000 0 0x20000000</span><br><span class="line">              0x02000000 0 0xa0000000 0xa0000000 0 0x10000000</span><br><span class="line">              0x01000000 0 0x00000000 0xb0000000 0 0x01000000&gt;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>As you can see, child addresses (PCI  addresses) use 3 cells, and PCI ranges are encoded into 2 cells. The  first question might be, why do we need three 32 bit cells to specify a  PCI address. The three cells are labeled phys.hi, phys.mid and phys.low <a href="https://elinux.org/Device_Tree_Usage#cite_note-2">[2]</a>.</p>
<ul>
<li><code>phys.hi cell:  npt000ss bbbbbbbb dddddfff rrrrrrrr</code></li>
<li><code>phys.mid cell: hhhhhhhh hhhhhhhh hhhhhhhh hhhhhhhh</code></li>
<li><code>phys.low cell: llllllll llllllll llllllll llllllll</code></li>
</ul>
<p>PCI addresses are 64 bits wide, and are encoded into phys.mid and  phys.low.  However, the really interesting things are in phys.high which is a bit field:</p>
<ul>
<li><code>n</code>: relocatable region flag (doesn’t play a role here)</li>
<li><code>p</code>: prefetchable (cacheable) region flag</li>
<li><code>t</code>: aliased address flag (doesn’t play a role here)</li>
<li><code>ss</code>: space code<ul>
<li>00: configuration space</li>
<li>01: I/O space</li>
<li>10: 32 bit memory space</li>
<li>11: 64 bit memory space</li>
</ul>
</li>
<li><code>bbbbbbbb</code>: The PCI bus number. PCI may be structured hierarchically. So we may have PCI/PCI bridges which will define sub busses.</li>
<li><code>ddddd</code>: The device number, typically associated with IDSEL signal connections.</li>
<li><code>fff</code>: The function number. Used for multifunction PCI devices.</li>
<li><code>rrrrrrrr</code>: Register number; used for configuration cycles.</li>
</ul>
<p>For the purpose of PCI address translation, the important fields are <code>p</code> and <code>ss</code>.  The value of p and ss in phys.hi determines which PCI address space is being accessed.  So looking onto our ranges property, we have three  regions:</p>
<ul>
<li>a 32 bit prefetchable memory region beginning on PCI address  0x80000000 of 512 MByte size which will be mapped onto address  0x80000000 on the host CPU.</li>
<li>a 32 bit non-prefetchable memory region beginning on PCI address  0xa0000000 of 256 MByte size which will be mapped onto address  0xa0000000 on the host CPU.</li>
<li>an I/O region beginning on PCI address 0x00000000 of 16 MByte size which will be mapped onto address 0xb0000000 on the host CPU.</li>
</ul>
<p>To throw a wrench into the works, the presence of the phys.hi  bitfield means that an operating system needs to know that the node  represents a PCI bridge so that it can ignore the irrelevant fields for  the purpose of translation.  An OS will look for the string “pci” in the PCI bus nodes to determine whether it needs to mask of the extra  fields.</p>
<h4 id="PCI-DMA-Address-Translation"><a href="#PCI-DMA-Address-Translation" class="headerlink" title="PCI DMA Address Translation"></a>PCI DMA Address Translation</h4><p>The above ranges define how the CPU see the PCI memory, and helps the CPU to set up the right memory windows and write the right parameters  into various PCI device registers. This is sometimes referred to as <em>outbound memory</em>.</p>
<p>A special case of address translation concerns how the PCI host  hardware sees the core memory of the system. This happens when the PCI  host controller will act as master and independently access the core  memory of the system. As this is often a different view than that of the CPU (due to how the memory lines have been wired) this may need to be  programmed into the PCI host controller on initialization. This is seen  as a kind of DMA as the PCI bus independently performs direct memory  access, and for this reason the mappings are named <strong>dma-ranges</strong>. This type of memory mapping is sometimes referred to as <em>inbound memory</em> and is not part of the PCI device tree specification.</p>
<p>In some cases, a ROM (BIOS) or similar will set up these  registers on boot, but in other cases, the PCI controller is completely  uninitialized and these translations need to be set up from the device  tree. The PCI host driver will then typically parse the dma-ranges  property and set up some registers in the host controller accordingly.</p>
<p>Expanding on the example above:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pci@0x10180000 &#123;</span><br><span class="line">    compatible &#x3D; &quot;arm,versatile-pci-hostbridge&quot;, &quot;pci&quot;;</span><br><span class="line">    reg &#x3D; &lt;0x10180000 0x1000&gt;;</span><br><span class="line">    interrupts &#x3D; &lt;8 0&gt;;</span><br><span class="line">    bus-range &#x3D; &lt;0 0&gt;;</span><br><span class="line"></span><br><span class="line">    #address-cells &#x3D; &lt;3&gt;</span><br><span class="line">    #size-cells &#x3D; &lt;2&gt;;</span><br><span class="line">    ranges &#x3D; &lt;0x42000000 0 0x80000000 0x80000000 0 0x20000000</span><br><span class="line">              0x02000000 0 0xa0000000 0xa0000000 0 0x10000000</span><br><span class="line">              0x01000000 0 0x00000000 0xb0000000 0 0x01000000</span><br><span class="line">    dma-ranges &#x3D; &lt;0x02000000 0 0x00000000 0x80000000 0 0x20000000&gt;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>This <strong>dma-ranges</strong> entry indicates that from the PCI host controller’s point of view, the 512 MB at PCI address 0x00000000 will appear in the main core memory at address 0x80000000. As you can see we just set the <em>ss</em> address type to 0x02 indicating this is some 32bit memory.</p>
<h3 id="Advanced-Interrupt-Mapping"><a href="#Advanced-Interrupt-Mapping" class="headerlink" title="Advanced Interrupt Mapping"></a>Advanced Interrupt Mapping</h3><p>Now we come to the most interesting part, PCI interrupt mapping. A  PCI device can trigger interrupts using the wires #INTA, #INTB, #INTC  and #INTD. The # hash sign in front of the interrupt names means it is  active low, this is a common convention, and PCI interrupt lines are  always active low. A single-function device is obligated to use #INTA  for interrupts.  A multi-function device must use #INTA if it uses a  single interrupt pin, #INTA and #INTB if it uses two interrupt pins,  etc.  Due to these rules, #INTA is normally used by more functions than  #INTB, #INTC, and #INTD.  To distribute the load across the four IRQ  lines backing #INTA through #INTD, each PCI slot or device is typically  wired to different inputs on the interrupt controller in rotating manner so as to avoid having all #INTA clients connected to the same incoming  interrupt line.  This procedure is referred to as <em>swizzling</em> the  interrupts.  So, the device tree needs a way of mapping each PCI  interrupt signal to the inputs of the interrupt controller.  The <code>#interrupt-cells</code>, <code>interrupt-map</code> and <code>interrupt-map-mask</code> properties are used to describe the interrupt mapping.</p>
<p>Actually, the interrupt mapping described here isn’t limited to  PCI busses, any node can specify complex interrupt maps, but the PCI  case is by far the most common.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pci@0x10180000 &#123;</span><br><span class="line">    compatible &#x3D; &quot;arm,versatile-pci-hostbridge&quot;, &quot;pci&quot;;</span><br><span class="line">    reg &#x3D; &lt;0x10180000 0x1000&gt;;</span><br><span class="line">    interrupts &#x3D; &lt;8 0&gt;;</span><br><span class="line">    bus-range &#x3D; &lt;0 0&gt;;</span><br><span class="line"></span><br><span class="line">    #address-cells &#x3D; &lt;3&gt;</span><br><span class="line">    #size-cells &#x3D; &lt;2&gt;;</span><br><span class="line">    ranges &#x3D; &lt;0x42000000 0 0x80000000  0x80000000  0 0x20000000</span><br><span class="line">              0x02000000 0 0xa0000000  0xa0000000  0 0x10000000</span><br><span class="line">              0x01000000 0 0x00000000  0xb0000000  0 0x01000000&gt;;</span><br><span class="line"></span><br><span class="line">    #interrupt-cells &#x3D; &lt;1&gt;;</span><br><span class="line">    interrupt-map-mask &#x3D; &lt;0xf800 0 0 7&gt;;</span><br><span class="line">    interrupt-map &#x3D; &lt;0xc000 0 0 1 &amp;intc  9 3 &#x2F;&#x2F; 1st slot</span><br><span class="line">                     0xc000 0 0 2 &amp;intc 10 3</span><br><span class="line">                     0xc000 0 0 3 &amp;intc 11 3</span><br><span class="line">                     0xc000 0 0 4 &amp;intc 12 3</span><br><span class="line"></span><br><span class="line">                     0xc800 0 0 1 &amp;intc 10 3 &#x2F;&#x2F; 2nd slot</span><br><span class="line">                     0xc800 0 0 2 &amp;intc 11 3</span><br><span class="line">                     0xc800 0 0 3 &amp;intc 12 3</span><br><span class="line">                     0xc800 0 0 4 &amp;intc  9 3&gt;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>First you’ll notice that PCI interrupt numbers use only one cell, unlike the system interrupt controller which uses 2 cells; one for the  irq number, and one for flags.  PCI only needs one cell for interrupts  because PCI interrupts are specified to always be level-low sensitive.</p>
<p>In our example board, we have 2 PCI slots with 4 interrupt lines, respectively, so we have to map 8 interrupt lines to the interrupt  controller. This is done using the interrupt-map property. The exact  procedure for interrupt mapping is described in<a href="https://elinux.org/Device_Tree_Usage#cite_note-3">[3]</a> .</p>
<p>Because the interrupt number (#INTA etc.) is not sufficient to  distinguish between several PCI devices on a single PCI bus, we also  have to denote which PCI device triggered the interrupt line.  Fortunately, every PCI device has a unique device number that we can use for. To distinguish between interrupts of several PCI devices we need a tuple consisting of the PCI device number and the PCI interrupt number. Speaking more generally, we construct a unit interrupt specifier which has four cells:</p>
<ul>
<li>three #address-cells consisting of phys.hi, phys.mid, phys.low, and</li>
<li>one #interrupt-cell (#INTA, #INTB, #INTC, #INTD).</li>
</ul>
<p>Because we only need the device number part of the PCI address, the  interrupt-map-mask property comes into play. interrupt-map-mask is also a 4-tuple like the unit interrupt specifier. The 1’s in the mask denote which part of the unit interrupt specifier should be taken into account. In our example we can see that only the  device number part of phys.hi is required and we need 3 bits to  distinguish between the four interrupt lines (Counting PCI interrupt  lines start at 1, not at 0!).</p>
<p>Now we can construct the interrupt-map property. This property is a table and each entry in this table consists of a child (PCI bus) unit interrupt specifier, a parent handle (the interrupt controller which is responsible for serving the interrupts) and a parent unit interrupt specifier. So in the first line we can read that the PCI interrupt #INTA is mapped onto IRQ 9, level low sensitive of our interrupt controller.  <a href="https://elinux.org/Device_Tree_Usage#cite_note-4">[4]</a>.</p>
<p>The only missing part for now are the weird numbers int the PCI bus unit interrupt specifier.  The important part of the unit interrupt specifier is the device  number from the phys.hi bit field.  Device number is board specific, and it depends on how each PCI host controller activates the IDSEL pin on  each device.  In this example, PCI slot 1 is assigned device id 24  (0x18), and PCI slot 2 is assigned device id 25 (0x19).  The value of  phys.hi for each slot is determined by shifting the device number up by  11 bits into the ddddd section of the bitfield as follows:</p>
<ul>
<li>phys.hi for slot 1 is 0xC000, and</li>
<li>phys.hi for slot 2 is 0xC800.</li>
</ul>
<p>Putting it all together the interrupt-map property show:</p>
<ul>
<li>#INTA of slot 1 is IRQ9, level low sensitive on the primary interrupt controller</li>
<li>#INTB of slot 1 is IRQ10, level low sensitive on the primary interrupt controller</li>
<li>#INTC of slot 1 is IRQ11, level low sensitive on the primary interrupt controller</li>
<li>#INTD of slot 1 is IRQ12, level low sensitive on the primary interrupt controller</li>
</ul>
<p>and</p>
<ul>
<li>#INTA of slot 2 is IRQ10, level low sensitive on the primary interrupt controller</li>
<li>#INTB of slot 2 is IRQ11, level low sensitive on the primary interrupt controller</li>
<li>#INTC of slot 2 is IRQ12, level low sensitive on the primary interrupt controller</li>
<li>#INTD of slot 2 is IRQ9, level low sensitive on the primary interrupt controller</li>
</ul>
<p>The <code>interrupts = &lt;8 0&gt;;</code> property describes the  interrupts the host/PCI-bridge controller itself may trigger. Don’t mix  up these interrupts with interrupts <em>PCI devices</em> might trigger (using INTA, INTB, …).</p>
<p>One final thing to note.  Just like with the interrupt-parent  property, the presence of an interrupt-map property on a node will  change the default interrupt controller for all child and grandchild  nodes.  In this PCI example, that means that the PCI host bridge becomes the default interrupt controller.  If a device attached via the PCI bus has a direct connection to another interrupt controller, then it also  needs to specify its own interrupt-parent property.</p>
<h2 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h2><ol>
<li>Tom Shanley / Don Anderson: PCI System Architecture. <a href="http://www.mindshare.com/">Mindshare Inc.</a></li>
<li><a href="http://playground.sun.com/1275/bindings/pci/pci2_1.pdf">PCI Bus Bindings to Open Firmware.</a></li>
<li><a href="http://playground.sun.com/1275/practice/imap/imap0_9d.pdf">Open Firmware Recommended Practice: Interrupt Mapping</a></li>
<li>PCI interrupts are always level low sensitive.</li>
</ol>
<script src="https://code.jquery.com/jquery-3.1.1.min.js"></script><link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css"><script src="https://code.jquery.com/jquery-3.1.1.min.js"></script>]]></content>
      <categories>
        <category>计算机科学与技术</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>C</tag>
      </tags>
  </entry>
</search>
